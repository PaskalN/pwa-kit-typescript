declare namespace CommerceSDKRef {
    type Prettify<T> = NonNullable<{
        [K in keyof T]: T[K]
    }>
    /*
     * Generates the types required on a method, based on those provided in the config.
     */
    type CompositeParameters<
        MethodParameters extends Record<string, unknown>,
        ConfigParameters extends Record<string, unknown>
    > = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>
    /**
     * If an object has a `parameters` property, and the `parameters` object has required properties,
     * then the `parameters` property on the root object is marked as required.
     */
    type RequireParametersUnlessAllAreOptional<
        T extends {
            parameters?: Record<string, unknown>
        }
    > = Record<string, never> extends NonNullable<T['parameters']>
        ? T
        : Prettify<T & Required<Pick<T, 'parameters'>>>
    /**
     * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
     * if not specified.
     */
    interface BaseUriParameters {
        shortCode: string
        version?: string // Optional, will default to "v1" if not provided.
    }
    /**
     * Generic interface for path parameters.
     */
    interface PathParameters {
        [key: string]: string | number | boolean
    }
    /**
     * Generic interface for query parameters.
     */
    interface QueryParameters {
        [key: string]: string | number | boolean | string[] | number[]
    }
    /**
     * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
     * it from the `RequestInit` provided by node-fetch.
     */
    type BrowserRequestInit = RequestInit
    /**
     * unknown properties supported in either the browser or node are accepted.
     * Using the right properties in the right context is left to the user.
     */
    type FetchOptions = NodeRequestInit & BrowserRequestInit
    /**
     * Base options that can be passed to the `ClientConfig` class.
     */
    interface ClientConfigInit<Params extends BaseUriParameters> {
        baseUri?: string
        proxy?: string
        headers?: {
            [key: string]: string
        }
        parameters: Params
        fetchOptions?: FetchOptions
        transformRequest?: (
            data: unknown,
            headers: {
                [key: string]: string
            }
        ) => Required<FetchOptions>['body']
        throwOnBadResponse?: boolean
    }
    type FetchFunction = (input: RequestInfo, init?: FetchOptions | undefined) => Promise<Response>
    /**
     * Configuration parameters common to Commerce SDK clients
     */

    declare class ClientConfig<Params extends BaseUriParameters>
        implements ClientConfigInit<Params>
    {
        baseUri?: string
        proxy?: string
        headers: {
            [key: string]: string
        }
        parameters: Params
        fetchOptions: FetchOptions
        transformRequest: NonNullable<ClientConfigInit<Params>['transformRequest']>
        throwOnBadResponse: boolean
        constructor(config: ClientConfigInit<Params>)
        static readonly defaults: Pick<Required<ClientConfigInit<never>>, 'transformRequest'>
    }
    type BoolFilter = {
        filters?: Array<Filter>
        operator: string
    } & {
        [key: string]: unknown
    }
    type MatchAllQuery = Record<string, unknown>
    type FilteredQuery = {
        filter: Filter
        query: Query
    } & {
        [key: string]: unknown
    }
    type QueryFilter = {
        query: Query
    } & {
        [key: string]: unknown
    }
    type Query = {
        boolQuery?: BoolQuery
        filteredQuery?: FilteredQuery
        matchAllQuery?: MatchAllQuery
        nestedQuery?: NestedQuery
        termQuery?: TermQuery
        textQuery?: TextQuery
    } & {
        [key: string]: unknown
    }
    type TermQuery = {
        fields: Array<string>
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TermFilter = {
        field: string
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TextQuery = {
        fields: Array<string>
        searchPhrase: string
    } & {
        [key: string]: unknown
    }
    type Range2Filter = {
        filterMode?: string
        fromField: string
        fromInclusive?: boolean
        fromValue?: unknown
        toField: string
        toInclusive?: boolean
        toValue?: unknown
    } & {
        [key: string]: unknown
    }
    type BoolQuery = {
        must?: Array<Query>
        mustNot?: Array<Query>
        should?: Array<Query>
    } & {
        [key: string]: unknown
    }
    type NestedQuery = {
        path: string
        query: Query
        scoreMode?: string
    } & {
        [key: string]: unknown
    }
    type Filter = {
        boolFilter?: BoolFilter
        queryFilter?: QueryFilter
        range2Filter?: Range2Filter
        rangeFilter?: RangeFilter
        termFilter?: TermFilter
    } & {
        [key: string]: unknown
    }
    type Sort = {
        field: string
        sortOrder?: string
    } & {
        [key: string]: unknown
    }
    type RangeFilter = {
        field: string
        from?: unknown
        fromInclusive?: boolean
        to?: unknown
        toInclusive?: boolean
    } & {
        [key: string]: unknown
    }
    type L10nString = Record<string, unknown>
    type PropertyValueDefinition = {
        description: L10nString
        displayValue: L10nString
        id: string
        position?: number
        value: string
    }
    type TaxItems = {
        taxItems?: Array<TaxItem>
    } & {
        [key: string]: unknown
    }
    type PaymentCardSpec = {
        cardType?: string
        checksumVerificationEnabled?: boolean
        description?: string
        image?: string
        name?: string
        numberLengths?: Array<string>
        numberPrefixes?: Array<string>
        securityCodeLength?: number
    } & {
        [key: string]: unknown
    }
    type OrderAddress = {
        address1?: string
        address2?: string
        city?: string
        companyName?: string
        countryCode?: string
        firstName?: string
        fullName?: string
        id?: string
        jobTitle?: string
        lastName?: string
        phone?: string
        postBox?: string
        postalCode?: string
        salutation?: string
        secondName?: string
        stateCode?: string
        suffix?: string
        suite?: string
        title?: string
    } & {
        [key: string]: unknown
    }
    type BasketsResult = {
        baskets: Array<Basket>
        total: number
    } & {
        [key: string]: unknown
    }
    type PriceAdjustmentRequest = {
        discount?: DiscountRequest
        itemId?: string
        itemText?: string
        level: string
        promotionId?: string
        reasonCode?: string
    } & {
        [key: string]: unknown
    }
    type PaymentCard = {
        cardType?: string
        creditCardExpired?: boolean
        creditCardToken?: string
        expirationMonth?: number
        expirationYear?: number
        holder?: string
        issueNumber?: string
        maskedNumber?: string
        numberLastDigits?: string
        validFromMonth?: number
        validFromYear?: number
    }
    type ShippingItem = {
        adjustedTax?: number
        basePrice?: number
        itemId?: string
        itemText?: string
        price?: number
        priceAdjustments?: Array<PriceAdjustment>
        priceAfterItemDiscount?: number
        shipmentId?: string
        tax?: number
        taxBasis?: number
        taxClassId?: string
        taxRate?: number
    } & {
        [key: string]: unknown
    }
    type Discount = {
        amount?: number
        percentage?: number
        priceBookId?: string
        type: string
    } & {
        [key: string]: unknown
    }
    type Note = {
        createdBy?: string
        creationDate?: unknown
        id?: string
        subject?: string
        text?: string
    }
    type CouponItem = {
        code: string
        couponItemId?: string
        statusCode?: string
        valid?: boolean
    } & {
        [key: string]: unknown
    }
    type PriceBookIds = Array<string>
    type ShippingPromotion = {
        calloutMsg?: string
        promotionId?: string
        promotionName?: string
    } & {
        [key: string]: unknown
    }
    type ProductItem = {
        adjustedTax?: number
        basePrice?: number
        bonusDiscountLineItemId?: string
        bonusProductLineItem?: boolean
        bundledProductItems?: Array<ProductItem>
        gift?: boolean
        giftMessage?: string
        inventoryId?: string
        itemId?: string
        itemText?: string
        optionItems?: Array<OptionItem>
        price?: number
        priceAdjustments?: Array<PriceAdjustment>
        priceAfterItemDiscount?: number
        priceAfterOrderDiscount?: number
        productId?: string
        productListItem?: ProductListItemReference
        productName?: string
        quantity?: number
        shipmentId?: string
        shippingItemId?: string
        tax?: number
        taxBasis?: number
        taxClassId?: string
        taxRate?: number
    } & {
        [key: string]: unknown
    }
    type BasketPaymentInstrumentRequest = {
        amount?: number
        bankRoutingNumber?: string
        giftCertificateCode?: string
        paymentCard?: OrderPaymentCardRequest
        paymentMethodId?: string
    } & {
        [key: string]: unknown
    }
    type Taxes = {
        taxes: Record<string, unknown>
    }
    type OrderPaymentInstrument = {
        amount?: number
        authorizationStatus?: Status
        bankRoutingNumber?: string
        maskedGiftCertificateCode?: string
        paymentCard?: PaymentCard
        paymentInstrumentId?: string
        paymentMethodId?: string
    } & {
        [key: string]: unknown
    }
    type BonusDiscountLineItem = {
        bonusProducts?: Array<ProductDetailsLink>
        couponCode?: string
        id?: string
        maxBonusItems?: number
        promotionId?: string
    } & {
        [key: string]: unknown
    }
    type PaymentMethodResult = {
        applicablePaymentMethods?: Array<PaymentMethod>
    } & {
        [key: string]: unknown
    }
    type Shipment = {
        adjustedMerchandizeTotalTax?: number
        adjustedShippingTotalTax?: number
        gift?: boolean
        giftMessage?: string
        merchandizeTotalTax?: number
        productSubTotal?: number
        productTotal?: number
        shipmentId?: string
        shipmentNo?: string
        shipmentTotal?: number
        shippingAddress?: OrderAddress
        shippingMethod?: ShippingMethod
        shippingStatus?: string
        shippingTotal?: number
        shippingTotalTax?: number
        taxTotal?: number
        trackingNumber?: string
    } & {
        [key: string]: unknown
    }
    type CustomerInfo = {
        customerId?: string
        customerName?: string
        customerNo?: string
        email: string
    } & {
        [key: string]: unknown
    }
    type SimpleLink = Record<string, unknown>
    type PriceAdjustment = {
        appliedDiscount?: Discount
        couponCode?: string
        createdBy?: string
        creationDate?: unknown
        custom?: boolean
        itemText?: string
        lastModified?: unknown
        manual?: boolean
        price?: number
        priceAdjustmentId?: string
        promotionId?: string
        promotionLink?: string
        reasonCode?: string
    } & {
        [key: string]: unknown
    }
    type ShippingMethodResult = {
        applicableShippingMethods?: Array<ShippingMethod>
        defaultShippingMethodId?: string
    } & {
        [key: string]: unknown
    }
    type ProductDetailsLink = {
        productDescription?: string
        productId: string
        productName?: string
        title?: string
    }
    type OptionItem = {
        adjustedTax?: number
        basePrice?: number
        bonusDiscountLineItemId?: string
        bonusProductLineItem?: boolean
        bundledProductItems?: Array<ProductItem>
        gift?: boolean
        giftMessage?: string
        inventoryId?: string
        itemId?: string
        itemText?: string
        optionId: string
        optionItems?: Array<OptionItem>
        optionValueId: string
        price?: number
        priceAdjustments?: Array<PriceAdjustment>
        priceAfterItemDiscount?: number
        priceAfterOrderDiscount?: number
        productId?: string
        productListItem?: ProductListItemReference
        productName?: string
        quantity?: number
        shipmentId?: string
        shippingItemId?: string
        tax?: number
        taxBasis?: number
        taxClassId?: string
        taxRate?: number
    } & {
        [key: string]: unknown
    }
    type ShippingMethod = {
        description?: string
        externalShippingMethod?: string
        id: string
        name?: string
        price?: number
        shippingPromotions?: Array<ShippingPromotion>
    } & {
        [key: string]: unknown
    }
    type DiscountRequest = {
        type: string
        value: number
    }
    type Basket = {
        adjustedMerchandizeTotalTax?: number
        adjustedShippingTotalTax?: number
        agentBasket?: boolean
        basketId?: string
        billingAddress?: OrderAddress
        bonusDiscountLineItems?: Array<BonusDiscountLineItem>
        channelType?: string
        couponItems?: Array<CouponItem>
        creationDate?: unknown
        currency?: string
        customerInfo?: CustomerInfo
        giftCertificateItems?: Array<GiftCertificateItem>
        inventoryReservationExpiry?: unknown
        lastModified?: unknown
        merchandizeTotalTax?: number
        notes?: SimpleLink
        orderPriceAdjustments?: Array<PriceAdjustment>
        orderTotal?: number
        paymentInstruments?: Array<OrderPaymentInstrument>
        productItems?: Array<ProductItem>
        productSubTotal?: number
        productTotal?: number
        shipments?: Array<Shipment>
        shippingItems?: Array<ShippingItem>
        shippingTotal?: number
        shippingTotalTax?: number
        sourceCode?: string
        taxTotal?: number
        taxation?: string
    } & {
        [key: string]: unknown
    }
    type OrderPaymentInstrumentRequest = {
        amount?: number
        bankRoutingNumber?: string
        giftCertificateCode?: string
        paymentCard?: OrderPaymentCardRequest
        paymentMethodId?: string
    } & {
        [key: string]: unknown
    }
    type GiftCertificateItem = {
        amount: number
        giftCertificateItemId?: string
        message?: string
        recipientEmail: string
        recipientName?: string
        senderName?: string
        shipmentId?: string
    } & {
        [key: string]: unknown
    }
    type ProductListLink = {
        description?: string
        name?: string
        public?: boolean
        title?: string
        type?: string
    } & {
        [key: string]: unknown
    }
    type Order = {
        adjustedMerchandizeTotalTax?: number
        adjustedShippingTotalTax?: number
        billingAddress?: OrderAddress
        bonusDiscountLineItems?: Array<BonusDiscountLineItem>
        channelType?: string
        confirmationStatus?: string
        couponItems?: Array<CouponItem>
        createdBy?: string
        creationDate?: unknown
        currency?: string
        customerInfo?: CustomerInfo
        customerName?: string
        exportStatus?: string
        externalOrderStatus?: string
        giftCertificateItems?: Array<GiftCertificateItem>
        globalPartyId?: string
        lastModified?: unknown
        merchandizeTotalTax?: number
        notes?: SimpleLink
        orderNo?: string
        orderPriceAdjustments?: Array<PriceAdjustment>
        orderToken?: string
        orderTotal?: number
        paymentInstruments?: Array<OrderPaymentInstrument>
        paymentStatus?: string
        productItems?: Array<ProductItem>
        productSubTotal?: number
        productTotal?: number
        shipments?: Array<Shipment>
        shippingItems?: Array<ShippingItem>
        shippingStatus?: string
        shippingTotal?: number
        shippingTotalTax?: number
        siteId?: string
        sourceCode?: string
        status?: string
        taxTotal?: number
        taxation?: string
    } & {
        [key: string]: unknown
    }
    type OrderPaymentCardRequest = {
        cardType?: string
        creditCardToken?: string
        expirationMonth?: number
        expirationYear?: number
        holder?: string
        issueNumber?: string
        maskedNumber?: string
        validFromMonth?: number
        validFromYear?: number
    }
    type PaymentMethod = {
        cards?: Array<PaymentCardSpec>
        description?: string
        id: string
        image?: string
        name?: string
        paymentProcessorId?: string
    } & {
        [key: string]: unknown
    }
    type TaxItem = {
        id: string
        rate: number
        value?: number
    }
    type Status = {
        code?: string
        message?: string
        status?: number
    }
    type ProductListItemReference = {
        id: string
        priority?: number
        productDetailsLink?: ProductDetailsLink
        productList?: ProductListLink
        public?: boolean
        purchasedQuantity?: number
        quantity?: number
        type?: string
    }
    /**
     * All path parameters that are used by at least one ShopperBaskets method.
     */
    type ShopperBasketsPathParameters = {
        organizationId?: string
        basketId?: string
        couponItemId?: string
        giftCertificateItemId?: string
        itemId?: string
        paymentInstrumentId?: string
        priceAdjustmentId?: string
        shipmentId?: string
    }
    /**
     * All query parameters that are used by at least one ShopperBaskets method.
     */
    type ShopperBasketsQueryParameters = {
        taxMode?: string
        siteId?: string
        locale?: string
        overrideExisting?: boolean
        createDestinationBasket?: boolean
        productItemMergeMode?: string
        useAsShipping?: boolean
        removeExternalTax?: boolean
        useAsBilling?: boolean
        exchange?: boolean
    }
    /**
     * All parameters that are used by ShopperBaskets.
     */
    type ShopperBasketsParameters = ShopperBasketsPathParameters &
        BaseUriParameters &
        ShopperBasketsQueryParameters
    /**
     * All parameters that are used by ShopperBaskets.
     */
    type ShopperBasketsParameters = ShopperBasketsPathParameters &
        BaseUriParameters &
        ShopperBasketsQueryParameters
    /**
 * [Shopper Baskets](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-baskets:Summary)
 * ==================================
 *
 * *Build a checkout experience.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperBaskets } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperBasketsClient = new ShopperBaskets(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 0.8.9<br />
 * Last Updated: <br />
 * </span>
 
 *
 
 */
    declare class ShopperBaskets<
        ConfigParameters extends ShopperBasketsParameters & Record<string, unknown>
    > {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string
        }
        static readonly defaultBaseUri =
            'https://{shortCode}.api.commercecloud.salesforce.com/checkout/shopper-baskets/{version}'
        constructor(config: ClientConfigInit<ConfigParameters>)
        /**
     * Creates a new basket.
     
     The created basket is initialized with default values. Optional JSON data provided in the request body is populated into the created basket. It can be updated with other endpoints offered by the Shopper Baskets API.
     
     Each customer can have just one open basket. When a basket is created, it is said to be open. It remains open until either an order is created from it or it is deleted.
     *
     * If you would like to get a raw Response object use the other createBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param taxMode - Determines how taxes are calculated.
     
     The default value is `internal` where the tax calculation is done automatically based on internal tax tables. Setting `taxMode` to `external` allows manual modification of the tax rates and values. External tax data is mandatory for product line items, option line items, shipping line items, coupon line items, and bonus discount line item. Gift certificate line items are optional and use zero tax rate by default, which can be overwritten. Price adjustments cannot be set because they are either calculated or inherited. Depending on the type, the tax rate is either obtained from the related line item or computed as a prorate of the basket.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        createBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        taxMode?: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: Basket
            }>
        ): Promise<Basket>
        /**
     * Creates a new basket.
     
     The created basket is initialized with default values. Optional JSON data provided in the request body is populated into the created basket. It can be updated with other endpoints offered by the Shopper Baskets API.
     
     Each customer can have just one open basket. When a basket is created, it is said to be open. It remains open until either an order is created from it or it is deleted.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param taxMode - Determines how taxes are calculated.
     
     The default value is `internal` where the tax calculation is done automatically based on internal tax tables. Setting `taxMode` to `external` allows manual modification of the tax rates and values. External tax data is mandatory for product line items, option line items, shipping line items, coupon line items, and bonus discount line item. Gift certificate line items are optional and use zero tax rate by default, which can be overwritten. Price adjustments cannot be set because they are either calculated or inherited. Depending on the type, the tax rate is either obtained from the related line item or computed as a prorate of the basket.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        createBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        taxMode?: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: Basket
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Transfer the previous shopper's basket to the current shopper by updating the basket's owner. No other values change. You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token.
     
     A success response contains the transferred basket.
     
     If the current shopper has an active basket, and the `overrideExisting` request parameter is `false`, then the transfer request returns a BasketTransferException (HTTP status 409). You can proceed with one of these options:
     - Keep the current shopper's active basket.
     - Merge the previous and current shoppers' baskets by calling the `baskets/merge` endpoint.
     - Force the transfer by calling the `baskets/transfer` endpoint again, with the parameter `overrideExisting=true`. Forcing the transfer deletes the current shopper's active basket.
     *
     * If you would like to get a raw Response object use the other transferBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param overrideExisting - If the current shopper has no active basket, this parameter is ignored. If the current shopper has an active basket, this parameter controls the behavior:
     - `false` (default): Return a BasketTransferException (HTTP status 409). The basket owner doesn't change.
     - `true`: Force the transfer by deleting the current shopper's active basket and making the current shopper the owner of the previous shopper's basket. Returns the transferred basket (HTTP status 200).
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
        transferBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        overrideExisting?: boolean
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Basket>
        /**
     * Transfer the previous shopper's basket to the current shopper by updating the basket's owner. No other values change. You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token.
     
     A success response contains the transferred basket.
     
     If the current shopper has an active basket, and the `overrideExisting` request parameter is `false`, then the transfer request returns a BasketTransferException (HTTP status 409). You can proceed with one of these options:
     - Keep the current shopper's active basket.
     - Merge the previous and current shoppers' baskets by calling the `baskets/merge` endpoint.
     - Force the transfer by calling the `baskets/transfer` endpoint again, with the parameter `overrideExisting=true`. Forcing the transfer deletes the current shopper's active basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param overrideExisting - If the current shopper has no active basket, this parameter is ignored. If the current shopper has an active basket, this parameter controls the behavior:
     - `false` (default): Return a BasketTransferException (HTTP status 409). The basket owner doesn't change.
     - `true`: Force the transfer by deleting the current shopper's active basket and making the current shopper the owner of the previous shopper's basket. Returns the transferred basket (HTTP status 200).
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        transferBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        overrideExisting?: boolean
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Merge data from the previous shopper's basket into the current shopper's active basket and delete the previous shopper's basket. This endpoint doesn't merge Personally Identifiable Information (PII). You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token. After the merge, all basket amounts are recalculated and totaled, including lookups for prices, taxes, shipping, and promotions.
     
     The following information is merged:
     - custom attributes on the basket and on all copied records
     - product items
     - gift certificate items
     - coupon items
     - shipments
     - ad-hoc price adjustments
     
     To control the merging of products that exist in both baskets, use the `productItemMergeMode` parameter. By default, the higher of the two basket quantities is used for each product. Products in both baskets are considered to be the same when all of the following values match (if one product doesn't have a value, the other product is a match only if it also doesn't have that value):
     - shipment
     - productId
     - option values
     - wishlist reference
     - inventory list id
     - gift flag & message
     - ad-hoc price adjustments
     
     If any of the listed values don't match, then the item in the previous shopper's basket is copied to a new line item in the current shopper's basket. If the listed values all match, but the matching products have different values for any custom attribute, the merged line item keeps the custom attribute value from the current shopper's basket.
     
     A success response contains the current shopper's active basket. The previous guest shopper's active basket is deleted.
     
     If the current shopper doesn't have an active basket, and the createDestinationBasket request parameter is false, then the merge request returns a BasketMergeException (HTTP status 409). You can proceed with one of these options:
     - Transfer the previous shopper's active basket to the current logged-in shopper by calling the `baskets/transfer` endpoint.
     - Force the merge by calling the `baskets/merge` endpoint again, with the parameter `createDestinationBasket=true`. Forcing the merge creates a new basket for the current shopper and copies information from the previous shopper's basket into it. Because the merge doesn't copy all basket data, a forced merge is not the same as a transfer. For example, the new basket doesn't contain any Personally Identifiable Information (PII) from the previous basket.
     
     ### before merge
     | Previous Shopper's Basket, SKU: Quantity, Custom Attributes | Current Shopper's Basket, SKU: Quantity, Custom Attributes  |
     |-------------------------------------------------------------|-------------------------------------------------------------|
     | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> c_customAttr_1: 'ABC' \<br\> c_customAttr_2: 'DEF'   | SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_3: 'XYZ'   |
     
     ### after merge - (previous shopper's basket is deleted)
     | productItemMergeMode | Current Shopper's Basket - SKU: Quantity, Custom Attributes  |
     |----------------------|--------------------------------------------------------------|
     | sum_quantities         | SKU_A: 7\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | higher_quantity      | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | saved_quantity       | SKU_A: 2\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | separate_item        | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ' |
     *
     * If you would like to get a raw Response object use the other mergeBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param createDestinationBasket - If the current shopper has an active basket, this parameter is ignored. If the current shopper has no active basket, this parameter controls the behavior:
     - `false` (default): Return a BasketMergeException (HTTP status 409).
     - `true`: Force the merge by creating a basket for the current shopper and copying information from the previous shopper's basket into it. Return success (HTTP status 200).
     * @param productItemMergeMode - This parameter controls the quantity calculation for products that exist in both baskets.
     - higher_quantity (default): Compare the product's quantities in each basket, and use the higher value.
     - sum_quantities: Use the sum of the product's quantities from both baskets.
     - saved_quantity: Use the product's quantity in the current shopper's active basket. Ignore the quantity from the previous shopper's basket.
     - separate_item: Add a separate product item to the current shopper's basket for the quantity in the previous shopper's basket.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
        mergeBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        createDestinationBasket?: boolean
                        productItemMergeMode?: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Basket>
        /**
     * Merge data from the previous shopper's basket into the current shopper's active basket and delete the previous shopper's basket. This endpoint doesn't merge Personally Identifiable Information (PII). You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token. After the merge, all basket amounts are recalculated and totaled, including lookups for prices, taxes, shipping, and promotions.
     
     The following information is merged:
     - custom attributes on the basket and on all copied records
     - product items
     - gift certificate items
     - coupon items
     - shipments
     - ad-hoc price adjustments
     
     To control the merging of products that exist in both baskets, use the `productItemMergeMode` parameter. By default, the higher of the two basket quantities is used for each product. Products in both baskets are considered to be the same when all of the following values match (if one product doesn't have a value, the other product is a match only if it also doesn't have that value):
     - shipment
     - productId
     - option values
     - wishlist reference
     - inventory list id
     - gift flag & message
     - ad-hoc price adjustments
     
     If any of the listed values don't match, then the item in the previous shopper's basket is copied to a new line item in the current shopper's basket. If the listed values all match, but the matching products have different values for any custom attribute, the merged line item keeps the custom attribute value from the current shopper's basket.
     
     A success response contains the current shopper's active basket. The previous guest shopper's active basket is deleted.
     
     If the current shopper doesn't have an active basket, and the createDestinationBasket request parameter is false, then the merge request returns a BasketMergeException (HTTP status 409). You can proceed with one of these options:
     - Transfer the previous shopper's active basket to the current logged-in shopper by calling the `baskets/transfer` endpoint.
     - Force the merge by calling the `baskets/merge` endpoint again, with the parameter `createDestinationBasket=true`. Forcing the merge creates a new basket for the current shopper and copies information from the previous shopper's basket into it. Because the merge doesn't copy all basket data, a forced merge is not the same as a transfer. For example, the new basket doesn't contain any Personally Identifiable Information (PII) from the previous basket.
     
     ### before merge
     | Previous Shopper's Basket, SKU: Quantity, Custom Attributes | Current Shopper's Basket, SKU: Quantity, Custom Attributes  |
     |-------------------------------------------------------------|-------------------------------------------------------------|
     | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> c_customAttr_1: 'ABC' \<br\> c_customAttr_2: 'DEF'   | SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_3: 'XYZ'   |
     
     ### after merge - (previous shopper's basket is deleted)
     | productItemMergeMode | Current Shopper's Basket - SKU: Quantity, Custom Attributes  |
     |----------------------|--------------------------------------------------------------|
     | sum_quantities         | SKU_A: 7\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | higher_quantity      | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | saved_quantity       | SKU_A: 2\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
     | separate_item        | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ' |
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param createDestinationBasket - If the current shopper has an active basket, this parameter is ignored. If the current shopper has no active basket, this parameter controls the behavior:
     - `false` (default): Return a BasketMergeException (HTTP status 409).
     - `true`: Force the merge by creating a basket for the current shopper and copying information from the previous shopper's basket into it. Return success (HTTP status 200).
     * @param productItemMergeMode - This parameter controls the quantity calculation for products that exist in both baskets.
     - higher_quantity (default): Compare the product's quantities in each basket, and use the higher value.
     - sum_quantities: Use the sum of the product's quantities from both baskets.
     - saved_quantity: Use the product's quantity in the current shopper's active basket. Ignore the quantity from the previous shopper's basket.
     - separate_item: Add a separate product item to the current shopper's basket for the quantity in the previous shopper's basket.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        mergeBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        createDestinationBasket?: boolean
                        productItemMergeMode?: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
         * Removes a basket.
         *
         * If you would like to get a raw Response object use the other deleteBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        deleteBasket(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<void>
        /**
         * Removes a basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        deleteBasket<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
        /**
     * Gets a basket.
     *
     * If you would like to get a raw Response object use the other getBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
        getBasket(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Basket>
        /**
     * Gets a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        getBasket<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Updates a basket. Only the currency of the basket, source code, the custom
     properties of the basket, and the shipping items will be considered.
     *
     * If you would like to get a raw Response object use the other updateBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        updateBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: Basket
            }>
        ): Promise<Basket>
        /**
     * Updates a basket. Only the currency of the basket, source code, the custom
     properties of the basket, and the shipping items will be considered.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        updateBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: Basket
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Marks a basket as an agent basket.
     *
     * If you would like to get a raw Response object use the other updateAsAgentBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
        updateAsAgentBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Basket>
        /**
     * Marks a basket as an agent basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        updateAsAgentBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Sets the billing address of a basket.
     *
     * If you would like to get a raw Response object use the other updateBillingAddressForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param useAsShipping -
     * @param removeExternalTax - Changing the billing/shipping address can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
     - true: (default) The basket's tax values are set to null and must be recalculated.
     - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the billing/shipping address change doesn't affect the tax calculation.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        updateBillingAddressForBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        useAsShipping?: boolean
                        removeExternalTax?: boolean
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: OrderAddress
            }>
        ): Promise<Basket>
        /**
     * Sets the billing address of a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param useAsShipping -
     * @param removeExternalTax - Changing the billing/shipping address can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
     - true: (default) The basket's tax values are set to null and must be recalculated.
     - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the billing/shipping address change doesn't affect the tax calculation.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        updateBillingAddressForBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        useAsShipping?: boolean
                        removeExternalTax?: boolean
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: OrderAddress
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Adds a coupon to an existing basket.
     *
     * If you would like to get a raw Response object use the other addCouponToBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        addCouponToBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CouponItem
            }>
        ): Promise<Basket>
        /**
     * Adds a coupon to an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        addCouponToBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CouponItem
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Removes a coupon from the basket.
     *
     * If you would like to get a raw Response object use the other removeCouponFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param couponItemId - The ID of the coupon item to be removed.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
        removeCouponFromBasket(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        couponItemId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Basket>
        /**
     * Removes a coupon from the basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param couponItemId - The ID of the coupon item to be removed.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        removeCouponFromBasket<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        couponItemId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Sets customer information for an existing basket.
     *
     * If you would like to get a raw Response object use the other updateCustomerForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        updateCustomerForBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerInfo
            }>
        ): Promise<Basket>
        /**
     * Sets customer information for an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        updateCustomerForBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerInfo
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Adds a gift certificate item to an existing basket.
     *
     * If you would like to get a raw Response object use the other addGiftCertificateItemToBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        addGiftCertificateItemToBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: GiftCertificateItem
            }>
        ): Promise<Basket>
        /**
     * Adds a gift certificate item to an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        addGiftCertificateItemToBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: GiftCertificateItem
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Deletes a gift certificate item from an existing basket.
     *
     * If you would like to get a raw Response object use the other removeGiftCertificateItemFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
        removeGiftCertificateItemFromBasket(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        giftCertificateItemId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Basket>
        /**
     * Deletes a gift certificate item from an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        removeGiftCertificateItemFromBasket<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        giftCertificateItemId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Updates a gift certificate item of an existing basket.
     *
     * If you would like to get a raw Response object use the other updateGiftCertificateItemInBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        updateGiftCertificateItemInBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        giftCertificateItemId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: GiftCertificateItem
            }>
        ): Promise<Basket>
        /**
     * Updates a gift certificate item of an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        updateGiftCertificateItemInBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        giftCertificateItemId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: GiftCertificateItem
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Adds new items to a basket. The added items are associated with the
     specified shipment. If no shipment id is specified, the added items are associated with the default shipment.
     Considered values from the request body, for each item are:
     
     - productId: a valid product ID. This is the ID of the product to be added to the basket. If the
     product is already in the basket, the API either increments the quantity of the existing product line item or
     creates a new product line item, based on the site preference 'Add Product Behavior'. For option products and
     product bundles containing variation masters, the API creates a new product line item regardless of the site
     preference.
     - shipmentId: a valid shipment ID (optional). This is the ID of the shipment in which the product item
     is created.
     - quantity: a number between 0.01 and 999. This is the quantity of the product to order.
     - inventoryId: a valid inventory ID (optional). This is the ID of the inventory from which the item is
     allocated.
     - bonusDiscountLineItemId: a valid bonus discount line item ID (optional). This is the ID of the
     bonus discount line item for which the added product is a selected bonus product.
     - optionItems/optionValueId: a valid option value ID. This is an option value for an option item of
     an option product.  This is only possible if the product item is an option
     product. To set option values, you must specify a collection of option items in the optionItems
     property. These option items must contain optionId and optionValueId. Also,
     the values you specify must be valid for the option product that this product item represents. Otherwise, the
     server throws an InvalidProductOptionItemException or an
     InvalidProductOptionValueItemException.
     - custom properties in the form c_\<CUSTOM_NAME\>: the custom property must correspond to a custom
     attribute (\<CUSTOM_NAME\>) defined for ProductLineItem. The value of this property must be valid for the
     type of custom attribute defined for ProductLineItem.
     *
     * If you would like to get a raw Response object use the other addItemToBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        addItemToBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: Array<ProductItem>
            }>
        ): Promise<Basket>
        /**
     * Adds new items to a basket. The added items are associated with the
     specified shipment. If no shipment id is specified, the added items are associated with the default shipment.
     Considered values from the request body, for each item are:
     
     - productId: a valid product ID. This is the ID of the product to be added to the basket. If the
     product is already in the basket, the API either increments the quantity of the existing product line item or
     creates a new product line item, based on the site preference 'Add Product Behavior'. For option products and
     product bundles containing variation masters, the API creates a new product line item regardless of the site
     preference.
     - shipmentId: a valid shipment ID (optional). This is the ID of the shipment in which the product item
     is created.
     - quantity: a number between 0.01 and 999. This is the quantity of the product to order.
     - inventoryId: a valid inventory ID (optional). This is the ID of the inventory from which the item is
     allocated.
     - bonusDiscountLineItemId: a valid bonus discount line item ID (optional). This is the ID of the
     bonus discount line item for which the added product is a selected bonus product.
     - optionItems/optionValueId: a valid option value ID. This is an option value for an option item of
     an option product.  This is only possible if the product item is an option
     product. To set option values, you must specify a collection of option items in the optionItems
     property. These option items must contain optionId and optionValueId. Also,
     the values you specify must be valid for the option product that this product item represents. Otherwise, the
     server throws an InvalidProductOptionItemException or an
     InvalidProductOptionValueItemException.
     - custom properties in the form c_\<CUSTOM_NAME\>: the custom property must correspond to a custom
     attribute (\<CUSTOM_NAME\>) defined for ProductLineItem. The value of this property must be valid for the
     type of custom attribute defined for ProductLineItem.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        addItemToBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: Array<ProductItem>
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Removes a product item from the basket.
     *
     * If you would like to get a raw Response object use the other removeItemFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param itemId - The ID of the item to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
        removeItemFromBasket(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        itemId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Basket>
        /**
     * Removes a product item from the basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param itemId - The ID of the item to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        removeItemFromBasket<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        itemId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Updates an item in a basket. The
     following values in the request body are considered by the server:
     
     - productId: a valid product ID. The purpose of this
     value is to exchange a variation of a variation product.
     - shipmentId: a valid shipment ID. The purpose of
     this value is to move a product item to another shipment.
     - quantity: a number between 0 and 999. The purpose of
     this value is to change quantity of the product item. If quantity is 0,
     the product item is removed.
     - optionItems/optionValueId: a valid option value
     ID. The purpose of this value is to exchange an option value for an
     option item of an option product.
     This is only possible if the product item is an option product. To change
     option values a collection of option items to be changed need to be
     provided in property optionItems. Those
     optionItems need to contain optionId
     and optionValueId. The provided values must be valid
     for the option product that this product item represents. Otherwise
     InvalidProductOptionItemException or
     InvalidProductOptionValueItemException will be thrown.
     custom properties c_\<CUSTOM_NAME\>: a
     value corresponding to the type defined for custom attribute
     \<CUSTOM_NAME\> of ProductLineItem. The purpose of this value is to
     add or change the value of a custom attribute defined for
     ProductLineItem.
     *
     * If you would like to get a raw Response object use the other updateItemInBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param itemId - The ID of the item to be updated.
     * @param removeExternalTax - Updating the quantity of the product item can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
     - true: (default) The tax values for the product item are set to null and must be recalculated.
     - false: The tax value for the product item will be updated based on the external tax rate (if no tax value was externally computed). Use this setting to prevent an unnecessary external tax call.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        updateItemInBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        itemId: string
                        removeExternalTax?: boolean
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: ProductItem
            }>
        ): Promise<Basket>
        /**
     * Updates an item in a basket. The
     following values in the request body are considered by the server:
     
     - productId: a valid product ID. The purpose of this
     value is to exchange a variation of a variation product.
     - shipmentId: a valid shipment ID. The purpose of
     this value is to move a product item to another shipment.
     - quantity: a number between 0 and 999. The purpose of
     this value is to change quantity of the product item. If quantity is 0,
     the product item is removed.
     - optionItems/optionValueId: a valid option value
     ID. The purpose of this value is to exchange an option value for an
     option item of an option product.
     This is only possible if the product item is an option product. To change
     option values a collection of option items to be changed need to be
     provided in property optionItems. Those
     optionItems need to contain optionId
     and optionValueId. The provided values must be valid
     for the option product that this product item represents. Otherwise
     InvalidProductOptionItemException or
     InvalidProductOptionValueItemException will be thrown.
     custom properties c_\<CUSTOM_NAME\>: a
     value corresponding to the type defined for custom attribute
     \<CUSTOM_NAME\> of ProductLineItem. The purpose of this value is to
     add or change the value of a custom attribute defined for
     ProductLineItem.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param itemId - The ID of the item to be updated.
     * @param removeExternalTax - Updating the quantity of the product item can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
     - true: (default) The tax values for the product item are set to null and must be recalculated.
     - false: The tax value for the product item will be updated based on the external tax rate (if no tax value was externally computed). Use this setting to prevent an unnecessary external tax call.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        updateItemInBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        itemId: string
                        removeExternalTax?: boolean
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: ProductItem
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
         * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for a specific taxable line item. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
         *
         * If you would like to get a raw Response object use the other addTaxesForBasketItem function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param itemId - The ID of the item to be updated.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        addTaxesForBasketItem(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        itemId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: TaxItems
            }>
        ): Promise<void>
        /**
         * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for a specific taxable line item. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param itemId - The ID of the item to be updated.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        addTaxesForBasketItem<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        itemId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: TaxItems
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
        /**
     * Adds a payment instrument to a basket.
     *
     * If you would like to get a raw Response object use the other addPaymentInstrumentToBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        addPaymentInstrumentToBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: BasketPaymentInstrumentRequest
            }>
        ): Promise<Basket>
        /**
     * Adds a payment instrument to a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        addPaymentInstrumentToBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: BasketPaymentInstrumentRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Removes a payment instrument of a basket.
     *
     * If you would like to get a raw Response object use the other removePaymentInstrumentFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param paymentInstrumentId -
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
        removePaymentInstrumentFromBasket(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        paymentInstrumentId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Basket>
        /**
     * Removes a payment instrument of a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param paymentInstrumentId -
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        removePaymentInstrumentFromBasket<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        paymentInstrumentId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Updates payment instrument of an existing basket.
     *
     * If you would like to get a raw Response object use the other updatePaymentInstrumentInBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param paymentInstrumentId -
     * @param removeExternalTax - Updating the payment instrument can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
     - true: (default) The basket's tax values are set to null and must be recalculated.
     - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the payment instrument change doesn't affect the tax calculation.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        updatePaymentInstrumentInBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        paymentInstrumentId: string
                        removeExternalTax?: boolean
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: OrderPaymentInstrument
            }>
        ): Promise<Basket>
        /**
     * Updates payment instrument of an existing basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param paymentInstrumentId -
     * @param removeExternalTax - Updating the payment instrument can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
     - true: (default) The basket's tax values are set to null and must be recalculated.
     - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the payment instrument change doesn't affect the tax calculation.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        updatePaymentInstrumentInBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        paymentInstrumentId: string
                        removeExternalTax?: boolean
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: OrderPaymentInstrument
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Gets applicable payment methods for an existing basket considering the open payment amount only.
     *
     * If you would like to get a raw Response object use the other getPaymentMethodsForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PaymentMethodResult.
     *
     */
        getPaymentMethodsForBasket(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<PaymentMethodResult>
        /**
     * Gets applicable payment methods for an existing basket considering the open payment amount only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PaymentMethodResult otherwise.
     *
     */
        getPaymentMethodsForBasket<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : PaymentMethodResult>
        /**
     * Adds a custom manual price adjustment to the basket.
     *
     * If you would like to get a raw Response object use the other addPriceAdjustmentToBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        addPriceAdjustmentToBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: PriceAdjustmentRequest
            }>
        ): Promise<Basket>
        /**
     * Adds a custom manual price adjustment to the basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        addPriceAdjustmentToBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: PriceAdjustmentRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Removes a custom manual price adjustment from the basket.
     *
     * If you would like to get a raw Response object use the other removePriceAdjustmentFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param priceAdjustmentId -
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
        removePriceAdjustmentFromBasket(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        priceAdjustmentId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Basket>
        /**
     * Removes a custom manual price adjustment from the basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param priceAdjustmentId -
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        removePriceAdjustmentFromBasket<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        priceAdjustmentId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Updates a custom manual price adjustment on the basket. Only the following path values are considered for the update; all other attributes are ignored.
     - `discount`
     - `itemText`
     - `reasonCode`
     - `custom properties`
     The discount `type` of a price adjustment cannot be updated and therefore, the value of the existing type must be passed. For an adjustment of type `percentage`, the `percentage` attribute is mandatory. For adjustments of type `amount` and `fixed_price`, the `amount` attribute is mandatory.
     *
     * If you would like to get a raw Response object use the other updatePriceAdjustmentInBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param priceAdjustmentId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        updatePriceAdjustmentInBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        priceAdjustmentId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: PriceAdjustment
            }>
        ): Promise<Basket>
        /**
     * Updates a custom manual price adjustment on the basket. Only the following path values are considered for the update; all other attributes are ignored.
     - `discount`
     - `itemText`
     - `reasonCode`
     - `custom properties`
     The discount `type` of a price adjustment cannot be updated and therefore, the value of the existing type must be passed. For an adjustment of type `percentage`, the `percentage` attribute is mandatory. For adjustments of type `amount` and `fixed_price`, the `amount` attribute is mandatory.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param priceAdjustmentId -
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        updatePriceAdjustmentInBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        priceAdjustmentId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: PriceAdjustment
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
         * Gets applicable price books for an existing basket.
         *
         * If you would like to get a raw Response object use the other getPriceBooksForBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PriceBookIds.
         *
         */
        getPriceBooksForBasket(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<PriceBookIds>
        /**
         * Gets applicable price books for an existing basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PriceBookIds otherwise.
         *
         */
        getPriceBooksForBasket<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : PriceBookIds>
        /**
         * This method allows you to put an array of priceBookIds to an existing basket, which will be used for basket calculation.
         *
         * If you would like to get a raw Response object use the other addPriceBooksToBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        addPriceBooksToBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: PriceBookIds
            }>
        ): Promise<void>
        /**
         * This method allows you to put an array of priceBookIds to an existing basket, which will be used for basket calculation.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        addPriceBooksToBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: PriceBookIds
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
        /**
     * Creates a new shipment for a basket.
     
     The created shipment is initialized with values provided in the body
     document and can be updated with further data API calls. Considered from
     the body are the following properties if specified:
     
     - the ID
     - the shipping address
     - the shipping method
     - gift boolean flag
     - gift message
     - custom properties
     *
     * If you would like to get a raw Response object use the other createShipmentForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        createShipmentForBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: Shipment
            }>
        ): Promise<Basket>
        /**
     * Creates a new shipment for a basket.
     
     The created shipment is initialized with values provided in the body
     document and can be updated with further data API calls. Considered from
     the body are the following properties if specified:
     
     - the ID
     - the shipping address
     - the shipping method
     - gift boolean flag
     - gift message
     - custom properties
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        createShipmentForBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: Shipment
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Removes a specified shipment and all associated product, gift certificate,
     shipping, and price adjustment line items from a basket.
     It is not allowed to remove the default shipment.
     *
     * If you would like to get a raw Response object use the other removeShipmentFromBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
        removeShipmentFromBasket(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        shipmentId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Basket>
        /**
     * Removes a specified shipment and all associated product, gift certificate,
     shipping, and price adjustment line items from a basket.
     It is not allowed to remove the default shipment.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        removeShipmentFromBasket<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        shipmentId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Updates a shipment for a basket.
     
     The shipment is initialized with values provided in the body
     document and can be updated with further data API calls. Considered from
     the body are the following properties if specified:
     - the ID
     - the shipping address
     - the shipping method
     - gift boolean flag
     - gift message
     - custom properties
     *
     * If you would like to get a raw Response object use the other updateShipmentForBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        updateShipmentForBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        shipmentId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: Shipment
            }>
        ): Promise<Basket>
        /**
     * Updates a shipment for a basket.
     
     The shipment is initialized with values provided in the body
     document and can be updated with further data API calls. Considered from
     the body are the following properties if specified:
     - the ID
     - the shipping address
     - the shipping method
     - gift boolean flag
     - gift message
     - custom properties
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        updateShipmentForBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        shipmentId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: Shipment
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Sets a shipping address of a specific shipment of a basket.
     *
     * If you would like to get a raw Response object use the other updateShippingAddressForShipment function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param useAsBilling -
     * @param removeExternalTax - Updating the shipping/billing address can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
     - true: (default) The basket's tax values are set to null and must be recalculated.
     - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the shipping/billing address change doesn't affect the tax calculation.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        updateShippingAddressForShipment(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        shipmentId: string
                        useAsBilling?: boolean
                        removeExternalTax?: boolean
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: OrderAddress
            }>
        ): Promise<Basket>
        /**
     * Sets a shipping address of a specific shipment of a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param useAsBilling -
     * @param removeExternalTax - Updating the shipping/billing address can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
     - true: (default) The basket's tax values are set to null and must be recalculated.
     - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the shipping/billing address change doesn't affect the tax calculation.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        updateShippingAddressForShipment<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        shipmentId: string
                        useAsBilling?: boolean
                        removeExternalTax?: boolean
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: OrderAddress
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Sets a shipping method to a specific shipment of a basket.
     *
     * If you would like to get a raw Response object use the other updateShippingMethodForShipment function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Basket.
     *
     */
        updateShippingMethodForShipment(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        shipmentId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: ShippingMethod
            }>
        ): Promise<Basket>
        /**
     * Sets a shipping method to a specific shipment of a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        updateShippingMethodForShipment<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        shipmentId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: ShippingMethod
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
     * Gets the applicable shipping methods for a certain shipment of a basket.
     *
     * If you would like to get a raw Response object use the other getShippingMethodsForShipment function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type ShippingMethodResult.
     *
     */
        getShippingMethodsForShipment(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        shipmentId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<ShippingMethodResult>
        /**
     * Gets the applicable shipping methods for a certain shipment of a basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param shipmentId - The ID of the shipment to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type ShippingMethodResult otherwise.
     *
     */
        getShippingMethodsForShipment<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        shipmentId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : ShippingMethodResult>
        /**
     * Marks a basket as a storefront basket.
     *
     * If you would like to get a raw Response object use the other updateAsStorefrontBasket function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param exchange - If true, an existing storefront basket is exchanged and marked as an agent basket. If false, a `CustomerBasketsQuotaExceededException` is thrown.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Basket.
     *
     */
        updateAsStorefrontBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        exchange?: boolean
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Basket>
        /**
     * Marks a basket as a storefront basket.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param basketId - The ID of the basket to be modified.
     * @param exchange - If true, an existing storefront basket is exchanged and marked as an agent basket. If false, a `CustomerBasketsQuotaExceededException` is thrown.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
     *
     */
        updateAsStorefrontBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        exchange?: boolean
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Basket>
        /**
         * This method gives you the external taxation data set by the PUT taxes API. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
         *
         * If you would like to get a raw Response object use the other getTaxesFromBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Taxes.
         *
         */
        getTaxesFromBasket(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Taxes>
        /**
         * This method gives you the external taxation data set by the PUT taxes API. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Taxes otherwise.
         *
         */
        getTaxesFromBasket<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Taxes>
        /**
         * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for all taxable line items. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
         *
         * If you would like to get a raw Response object use the other addTaxesForBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        addTaxesForBasket(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: Taxes
            }>
        ): Promise<void>
        /**
         * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for all taxable line items. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        addTaxesForBasket<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        basketId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: Taxes
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
    }
    declare namespace ShopperBasketsTypes {
        /*
         * Copyright (c) 2023, Salesforce, Inc.
         * All rights reserved.
         * SPDX-License-Identifier: BSD-3-Clause
         * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
         */
        /**
         * Makes a type easier to read.
         */
        type Prettify<T> = NonNullable<{
            [K in keyof T]: T[K]
        }>
        /**
         * Generates the types required on a method, based on those provided in the config.
         */
        type CompositeParameters<
            MethodParameters extends Record<string, unknown>,
            ConfigParameters extends Record<string, unknown>
        > = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>
        /**
         * If an object has a `parameters` property, and the `parameters` object has required properties,
         * then the `parameters` property on the root object is marked as required.
         */
        type RequireParametersUnlessAllAreOptional<
            T extends {
                parameters?: Record<string, unknown>
            }
        > = Record<string, never> extends NonNullable<T['parameters']>
            ? T
            : Prettify<T & Required<Pick<T, 'parameters'>>>
        /**
         * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
         * if not specified.
         */
        interface BaseUriParameters {
            shortCode: string
            version?: string // Optional, will default to "v1" if not provided.
        }
        /**
         * Generic interface for path parameters.
         */
        interface PathParameters {
            [key: string]: string | number | boolean
        }
        /**
         * Generic interface for query parameters.
         */
        interface QueryParameters {
            [key: string]: string | number | boolean | string[] | number[]
        }
        /**
         * Generic interface for all parameter types.
         */
        type UrlParameters = PathParameters | QueryParameters
        /**
         * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
         * it from the `RequestInit` provided by node-fetch.
         */
        type BrowserRequestInit = RequestInit
        /**
         * Any properties supported in either the browser or node are accepted.
         * Using the right properties in the right context is left to the user.
         */
        type FetchOptions = NodeRequestInit & BrowserRequestInit
        /**
         * Base options that can be passed to the `ClientConfig` class.
         */
        interface ClientConfigInit<Params extends BaseUriParameters> {
            baseUri?: string
            proxy?: string
            headers?: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions?: FetchOptions
            transformRequest?: (
                data: unknown,
                headers: {
                    [key: string]: string
                }
            ) => Required<FetchOptions>['body']
            throwOnBadResponse?: boolean
        }
        type FetchFunction = (
            input: RequestInfo,
            init?: FetchOptions | undefined
        ) => Promise<Response>
        /**
         * Configuration parameters common to Commerce SDK clients
         */
        class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
            baseUri?: string
            proxy?: string
            headers: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions: FetchOptions
            transformRequest: NonNullable<ClientConfigInit<Params>['transformRequest']>
            throwOnBadResponse: boolean
            constructor(config: ClientConfigInit<Params>)
            static readonly defaults: Pick<Required<ClientConfigInit<never>>, 'transformRequest'>
        }
        type ErrorResponse = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type Money = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResult = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type SearchRequest = {
            limit?: number
            query: Query
            sorts?: Array<Sort>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type PropertyDefinition = {
            defaultValue?: PropertyValueDefinition
            id?: string
            name: L10nString
            description: L10nString
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString
            possibleValues?: Array<PropertyValueDefinition>
            type: string
            visible?: boolean
        } & {
            [key: string]: unknown
        }
        type LocalizedString = Record<string, unknown>
        type PaginatedSearchResult = {
            query: Query
            sorts?: Array<Sort>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type ClosedObject = Record<string, unknown>
        type OpenObject = Record<string, unknown>
        type NoPropertiesAllowed = Record<string, unknown>
        type SpecifiedPropertiesAllowed = Record<string, unknown>
        type BoolFilter = {
            filters?: Array<Filter>
            operator: string
        } & {
            [key: string]: unknown
        }
        type PaginatedSearchResultBase = {
            query: Query
            sorts?: Array<Sort>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type MatchAllQuery = Record<string, unknown>
        type FilteredQuery = {
            filter: Filter
            query: Query
        } & {
            [key: string]: unknown
        }
        type QueryFilter = {
            query: Query
        } & {
            [key: string]: unknown
        }
        type Query = {
            boolQuery?: BoolQuery
            filteredQuery?: FilteredQuery
            matchAllQuery?: MatchAllQuery
            nestedQuery?: NestedQuery
            termQuery?: TermQuery
            textQuery?: TextQuery
        } & {
            [key: string]: unknown
        }
        type TermQuery = {
            fields: Array<string>
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TermFilter = {
            field: string
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TextQuery = {
            fields: Array<string>
            searchPhrase: string
        } & {
            [key: string]: unknown
        }
        type Range2Filter = {
            filterMode?: string
            fromField: string
            fromInclusive?: boolean
            fromValue?: unknown
            toField: string
            toInclusive?: boolean
            toValue?: unknown
        } & {
            [key: string]: unknown
        }
        type BoolQuery = {
            must?: Array<Query>
            mustNot?: Array<Query>
            should?: Array<Query>
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResultBase = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type NestedQuery = {
            path: string
            query: Query
            scoreMode?: string
        } & {
            [key: string]: unknown
        }
        type Filter = {
            boolFilter?: BoolFilter
            queryFilter?: QueryFilter
            range2Filter?: Range2Filter
            rangeFilter?: RangeFilter
            termFilter?: TermFilter
        } & {
            [key: string]: unknown
        }
        type Sort = {
            field: string
            sortOrder?: string
        } & {
            [key: string]: unknown
        }
        type RangeFilter = {
            field: string
            from?: unknown
            fromInclusive?: boolean
            to?: unknown
            toInclusive?: boolean
        } & {
            [key: string]: unknown
        }
        type SearchRequestBase = {
            limit?: number
            query: Query
            sorts?: Array<Sort>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type MoneyMnemonic = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type L10nString = Record<string, unknown>
        type AttributeDefinition = {
            defaultValue?: PropertyValueDefinition
            id?: string
            name: L10nString
            description: L10nString
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString
            possibleValues?: Array<PropertyValueDefinition>
            type: string
            visible?: boolean
        }
        type PropertyValueDefinition = {
            description: L10nString
            displayValue: L10nString
            id: string
            position?: number
            value: string
        }
        type TaxItems = {
            taxItems?: Array<TaxItem>
        } & {
            [key: string]: unknown
        }
        type PaymentCardSpec = {
            cardType?: string
            checksumVerificationEnabled?: boolean
            description?: string
            image?: string
            name?: string
            numberLengths?: Array<string>
            numberPrefixes?: Array<string>
            securityCodeLength?: number
        } & {
            [key: string]: unknown
        }
        type OrderAddress = {
            address1?: string
            address2?: string
            city?: string
            companyName?: string
            countryCode?: string
            firstName?: string
            fullName?: string
            id?: string
            jobTitle?: string
            lastName?: string
            phone?: string
            postBox?: string
            postalCode?: string
            salutation?: string
            secondName?: string
            stateCode?: string
            suffix?: string
            suite?: string
            title?: string
        } & {
            [key: string]: unknown
        }
        type BasketsResult = {
            baskets: Array<Basket>
            total: number
        } & {
            [key: string]: unknown
        }
        type PriceAdjustmentRequest = {
            discount?: DiscountRequest
            itemId?: string
            itemText?: string
            level: string
            promotionId?: string
            reasonCode?: string
        } & {
            [key: string]: unknown
        }
        type PaymentCard = {
            cardType?: string
            creditCardExpired?: boolean
            creditCardToken?: string
            expirationMonth?: number
            expirationYear?: number
            holder?: string
            issueNumber?: string
            maskedNumber?: string
            numberLastDigits?: string
            validFromMonth?: number
            validFromYear?: number
        }
        type NotesResult = {
            notes?: Array<Note>
        } & {
            [key: string]: unknown
        }
        type ShippingItem = {
            adjustedTax?: number
            basePrice?: number
            itemId?: string
            itemText?: string
            price?: number
            priceAdjustments?: Array<PriceAdjustment>
            priceAfterItemDiscount?: number
            shipmentId?: string
            tax?: number
            taxBasis?: number
            taxClassId?: string
            taxRate?: number
        } & {
            [key: string]: unknown
        }
        type Discount = {
            amount?: number
            percentage?: number
            priceBookId?: string
            type: string
        } & {
            [key: string]: unknown
        }
        type Note = {
            createdBy?: string
            creationDate?: unknown
            id?: string
            subject?: string
            text?: string
        }
        type CouponItem = {
            code: string
            couponItemId?: string
            statusCode?: string
            valid?: boolean
        } & {
            [key: string]: unknown
        }
        type PromotionLink = {
            calloutMsg?: string
            name?: string
            promotionId?: string
            title?: string
        }
        type PriceBookIds = Array<string>
        type ShippingPromotion = {
            calloutMsg?: string
            promotionId?: string
            promotionName?: string
        } & {
            [key: string]: unknown
        }
        type ProductItem = {
            adjustedTax?: number
            basePrice?: number
            bonusDiscountLineItemId?: string
            bonusProductLineItem?: boolean
            bundledProductItems?: Array<ProductItem>
            gift?: boolean
            giftMessage?: string
            inventoryId?: string
            itemId?: string
            itemText?: string
            optionItems?: Array<OptionItem>
            price?: number
            priceAdjustments?: Array<PriceAdjustment>
            priceAfterItemDiscount?: number
            priceAfterOrderDiscount?: number
            productId?: string
            productListItem?: ProductListItemReference
            productName?: string
            quantity?: number
            shipmentId?: string
            shippingItemId?: string
            tax?: number
            taxBasis?: number
            taxClassId?: string
            taxRate?: number
        } & {
            [key: string]: unknown
        }
        type BasketPaymentInstrumentRequest = {
            amount?: number
            bankRoutingNumber?: string
            giftCertificateCode?: string
            paymentCard?: OrderPaymentCardRequest
            paymentMethodId?: string
        } & {
            [key: string]: unknown
        }
        type Taxes = {
            taxes: Record<string, unknown>
        }
        type OrderPaymentInstrument = {
            amount?: number
            authorizationStatus?: Status
            bankRoutingNumber?: string
            maskedGiftCertificateCode?: string
            paymentCard?: PaymentCard
            paymentInstrumentId?: string
            paymentMethodId?: string
        } & {
            [key: string]: unknown
        }
        type BonusDiscountLineItem = {
            bonusProducts?: Array<ProductDetailsLink>
            couponCode?: string
            id?: string
            maxBonusItems?: number
            promotionId?: string
        } & {
            [key: string]: unknown
        }
        type PaymentMethodResult = {
            applicablePaymentMethods?: Array<PaymentMethod>
        } & {
            [key: string]: unknown
        }
        type Shipment = {
            adjustedMerchandizeTotalTax?: number
            adjustedShippingTotalTax?: number
            gift?: boolean
            giftMessage?: string
            merchandizeTotalTax?: number
            productSubTotal?: number
            productTotal?: number
            shipmentId?: string
            shipmentNo?: string
            shipmentTotal?: number
            shippingAddress?: OrderAddress
            shippingMethod?: ShippingMethod
            shippingStatus?: string
            shippingTotal?: number
            shippingTotalTax?: number
            taxTotal?: number
            trackingNumber?: string
        } & {
            [key: string]: unknown
        }
        type CustomerInfo = {
            customerId?: string
            customerName?: string
            customerNo?: string
            email: string
        } & {
            [key: string]: unknown
        }
        type SimpleLink = Record<string, unknown>
        type PriceAdjustment = {
            appliedDiscount?: Discount
            couponCode?: string
            createdBy?: string
            creationDate?: unknown
            custom?: boolean
            itemText?: string
            lastModified?: unknown
            manual?: boolean
            price?: number
            priceAdjustmentId?: string
            promotionId?: string
            promotionLink?: string
            reasonCode?: string
        } & {
            [key: string]: unknown
        }
        type ShippingMethodResult = {
            applicableShippingMethods?: Array<ShippingMethod>
            defaultShippingMethodId?: string
        } & {
            [key: string]: unknown
        }
        type ProductDetailsLink = {
            productDescription?: string
            productId: string
            productName?: string
            title?: string
        }
        type OptionItem = {
            adjustedTax?: number
            basePrice?: number
            bonusDiscountLineItemId?: string
            bonusProductLineItem?: boolean
            bundledProductItems?: Array<ProductItem>
            gift?: boolean
            giftMessage?: string
            inventoryId?: string
            itemId?: string
            itemText?: string
            optionId: string
            optionItems?: Array<OptionItem>
            optionValueId: string
            price?: number
            priceAdjustments?: Array<PriceAdjustment>
            priceAfterItemDiscount?: number
            priceAfterOrderDiscount?: number
            productId?: string
            productListItem?: ProductListItemReference
            productName?: string
            quantity?: number
            shipmentId?: string
            shippingItemId?: string
            tax?: number
            taxBasis?: number
            taxClassId?: string
            taxRate?: number
        } & {
            [key: string]: unknown
        }
        type ShippingMethod = {
            description?: string
            externalShippingMethod?: string
            id: string
            name?: string
            price?: number
            shippingPromotions?: Array<ShippingPromotion>
        } & {
            [key: string]: unknown
        }
        type DiscountRequest = {
            type: string
            value: number
        }
        type Basket = {
            adjustedMerchandizeTotalTax?: number
            adjustedShippingTotalTax?: number
            agentBasket?: boolean
            basketId?: string
            billingAddress?: OrderAddress
            bonusDiscountLineItems?: Array<BonusDiscountLineItem>
            channelType?: string
            couponItems?: Array<CouponItem>
            creationDate?: unknown
            currency?: string
            customerInfo?: CustomerInfo
            giftCertificateItems?: Array<GiftCertificateItem>
            inventoryReservationExpiry?: unknown
            lastModified?: unknown
            merchandizeTotalTax?: number
            notes?: SimpleLink
            orderPriceAdjustments?: Array<PriceAdjustment>
            orderTotal?: number
            paymentInstruments?: Array<OrderPaymentInstrument>
            productItems?: Array<ProductItem>
            productSubTotal?: number
            productTotal?: number
            shipments?: Array<Shipment>
            shippingItems?: Array<ShippingItem>
            shippingTotal?: number
            shippingTotalTax?: number
            sourceCode?: string
            taxTotal?: number
            taxation?: string
        } & {
            [key: string]: unknown
        }
        type OrderPaymentInstrumentRequest = {
            amount?: number
            bankRoutingNumber?: string
            giftCertificateCode?: string
            paymentCard?: OrderPaymentCardRequest
            paymentMethodId?: string
        } & {
            [key: string]: unknown
        }
        type GiftCertificateItem = {
            amount: number
            giftCertificateItemId?: string
            message?: string
            recipientEmail: string
            recipientName?: string
            senderName?: string
            shipmentId?: string
        } & {
            [key: string]: unknown
        }
        type ProductListLink = {
            description?: string
            name?: string
            public?: boolean
            title?: string
            type?: string
        } & {
            [key: string]: unknown
        }
        type Order = {
            adjustedMerchandizeTotalTax?: number
            adjustedShippingTotalTax?: number
            billingAddress?: OrderAddress
            bonusDiscountLineItems?: Array<BonusDiscountLineItem>
            channelType?: string
            confirmationStatus?: string
            couponItems?: Array<CouponItem>
            createdBy?: string
            creationDate?: unknown
            currency?: string
            customerInfo?: CustomerInfo
            customerName?: string
            exportStatus?: string
            externalOrderStatus?: string
            giftCertificateItems?: Array<GiftCertificateItem>
            globalPartyId?: string
            lastModified?: unknown
            merchandizeTotalTax?: number
            notes?: SimpleLink
            orderNo?: string
            orderPriceAdjustments?: Array<PriceAdjustment>
            orderToken?: string
            orderTotal?: number
            paymentInstruments?: Array<OrderPaymentInstrument>
            paymentStatus?: string
            productItems?: Array<ProductItem>
            productSubTotal?: number
            productTotal?: number
            shipments?: Array<Shipment>
            shippingItems?: Array<ShippingItem>
            shippingStatus?: string
            shippingTotal?: number
            shippingTotalTax?: number
            siteId?: string
            sourceCode?: string
            status?: string
            taxTotal?: number
            taxation?: string
        } & {
            [key: string]: unknown
        }
        type OrderPaymentCardRequest = {
            cardType?: string
            creditCardToken?: string
            expirationMonth?: number
            expirationYear?: number
            holder?: string
            issueNumber?: string
            maskedNumber?: string
            validFromMonth?: number
            validFromYear?: number
        }
        type PaymentMethod = {
            cards?: Array<PaymentCardSpec>
            description?: string
            id: string
            image?: string
            name?: string
            paymentProcessorId?: string
        } & {
            [key: string]: unknown
        }
        type TaxItem = {
            id: string
            rate: number
            value?: number
        }
        type Status = {
            code?: string
            message?: string
            status?: number
        }
        type ProductListItemReference = {
            id: string
            priority?: number
            productDetailsLink?: ProductDetailsLink
            productList?: ProductListLink
            public?: boolean
            purchasedQuantity?: number
            quantity?: number
            type?: string
        }
        type ChangeControlled = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type ChangeControlledDataType = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type Error = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        /**
         * All path parameters that are used by at least one ShopperBaskets method.
         */
        type ShopperBasketsPathParameters = {
            organizationId?: string
            basketId?: string
            couponItemId?: string
            giftCertificateItemId?: string
            itemId?: string
            paymentInstrumentId?: string
            priceAdjustmentId?: string
            shipmentId?: string
        }
        /**
         * All query parameters that are used by at least one ShopperBaskets method.
         */
        type ShopperBasketsQueryParameters = {
            taxMode?: string
            siteId?: string
            locale?: string
            overrideExisting?: boolean
            createDestinationBasket?: boolean
            productItemMergeMode?: string
            useAsShipping?: boolean
            removeExternalTax?: boolean
            useAsBilling?: boolean
            exchange?: boolean
        }
        /**
         * All parameters that are used by ShopperBaskets.
         */
        type ShopperBasketsParameters = ShopperBasketsPathParameters &
            BaseUriParameters &
            ShopperBasketsQueryParameters
        /**
     * [Shopper Baskets](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-baskets:Summary)
     * ==================================
     *
     * *Build a checkout experience.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperBaskets } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperBasketsClient = new ShopperBaskets(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 0.8.9<br />
     * Last Updated: <br />
     * </span>
     
     *
     
     */
        class ShopperBaskets<
            ConfigParameters extends ShopperBasketsParameters & Record<string, unknown>
        > {
            // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
            clientConfig: ClientConfig<ConfigParameters> & {
                baseUri: string
            }
            static readonly defaultBaseUri =
                'https://{shortCode}.api.commercecloud.salesforce.com/checkout/shopper-baskets/{version}'
            constructor(config: ClientConfigInit<ConfigParameters>)
            /**
         * Creates a new basket.
         
         The created basket is initialized with default values. Optional JSON data provided in the request body is populated into the created basket. It can be updated with other endpoints offered by the Shopper Baskets API.
         
         Each customer can have just one open basket. When a basket is created, it is said to be open. It remains open until either an order is created from it or it is deleted.
         *
         * If you would like to get a raw Response object use the other createBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param taxMode - Determines how taxes are calculated.
         
         The default value is `internal` where the tax calculation is done automatically based on internal tax tables. Setting `taxMode` to `external` allows manual modification of the tax rates and values. External tax data is mandatory for product line items, option line items, shipping line items, coupon line items, and bonus discount line item. Gift certificate line items are optional and use zero tax rate by default, which can be overwritten. Price adjustments cannot be set because they are either calculated or inherited. Depending on the type, the tax rate is either obtained from the related line item or computed as a prorate of the basket.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            createBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            taxMode?: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: Basket
                }>
            ): Promise<Basket>
            /**
         * Creates a new basket.
         
         The created basket is initialized with default values. Optional JSON data provided in the request body is populated into the created basket. It can be updated with other endpoints offered by the Shopper Baskets API.
         
         Each customer can have just one open basket. When a basket is created, it is said to be open. It remains open until either an order is created from it or it is deleted.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param taxMode - Determines how taxes are calculated.
         
         The default value is `internal` where the tax calculation is done automatically based on internal tax tables. Setting `taxMode` to `external` allows manual modification of the tax rates and values. External tax data is mandatory for product line items, option line items, shipping line items, coupon line items, and bonus discount line item. Gift certificate line items are optional and use zero tax rate by default, which can be overwritten. Price adjustments cannot be set because they are either calculated or inherited. Depending on the type, the tax rate is either obtained from the related line item or computed as a prorate of the basket.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            createBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            taxMode?: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: Basket
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Transfer the previous shopper's basket to the current shopper by updating the basket's owner. No other values change. You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token.
         
         A success response contains the transferred basket.
         
         If the current shopper has an active basket, and the `overrideExisting` request parameter is `false`, then the transfer request returns a BasketTransferException (HTTP status 409). You can proceed with one of these options:
         - Keep the current shopper's active basket.
         - Merge the previous and current shoppers' baskets by calling the `baskets/merge` endpoint.
         - Force the transfer by calling the `baskets/transfer` endpoint again, with the parameter `overrideExisting=true`. Forcing the transfer deletes the current shopper's active basket.
         *
         * If you would like to get a raw Response object use the other transferBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param overrideExisting - If the current shopper has no active basket, this parameter is ignored. If the current shopper has an active basket, this parameter controls the behavior:
         - `false` (default): Return a BasketTransferException (HTTP status 409). The basket owner doesn't change.
         - `true`: Force the transfer by deleting the current shopper's active basket and making the current shopper the owner of the previous shopper's basket. Returns the transferred basket (HTTP status 200).
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
            transferBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            overrideExisting?: boolean
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Basket>
            /**
         * Transfer the previous shopper's basket to the current shopper by updating the basket's owner. No other values change. You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token.
         
         A success response contains the transferred basket.
         
         If the current shopper has an active basket, and the `overrideExisting` request parameter is `false`, then the transfer request returns a BasketTransferException (HTTP status 409). You can proceed with one of these options:
         - Keep the current shopper's active basket.
         - Merge the previous and current shoppers' baskets by calling the `baskets/merge` endpoint.
         - Force the transfer by calling the `baskets/transfer` endpoint again, with the parameter `overrideExisting=true`. Forcing the transfer deletes the current shopper's active basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param overrideExisting - If the current shopper has no active basket, this parameter is ignored. If the current shopper has an active basket, this parameter controls the behavior:
         - `false` (default): Return a BasketTransferException (HTTP status 409). The basket owner doesn't change.
         - `true`: Force the transfer by deleting the current shopper's active basket and making the current shopper the owner of the previous shopper's basket. Returns the transferred basket (HTTP status 200).
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            transferBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            overrideExisting?: boolean
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Merge data from the previous shopper's basket into the current shopper's active basket and delete the previous shopper's basket. This endpoint doesn't merge Personally Identifiable Information (PII). You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token. After the merge, all basket amounts are recalculated and totaled, including lookups for prices, taxes, shipping, and promotions.
         
         The following information is merged:
         - custom attributes on the basket and on all copied records
         - product items
         - gift certificate items
         - coupon items
         - shipments
         - ad-hoc price adjustments
         
         To control the merging of products that exist in both baskets, use the `productItemMergeMode` parameter. By default, the higher of the two basket quantities is used for each product. Products in both baskets are considered to be the same when all of the following values match (if one product doesn't have a value, the other product is a match only if it also doesn't have that value):
         - shipment
         - productId
         - option values
         - wishlist reference
         - inventory list id
         - gift flag & message
         - ad-hoc price adjustments
         
         If any of the listed values don't match, then the item in the previous shopper's basket is copied to a new line item in the current shopper's basket. If the listed values all match, but the matching products have different values for any custom attribute, the merged line item keeps the custom attribute value from the current shopper's basket.
         
         A success response contains the current shopper's active basket. The previous guest shopper's active basket is deleted.
         
         If the current shopper doesn't have an active basket, and the createDestinationBasket request parameter is false, then the merge request returns a BasketMergeException (HTTP status 409). You can proceed with one of these options:
         - Transfer the previous shopper's active basket to the current logged-in shopper by calling the `baskets/transfer` endpoint.
         - Force the merge by calling the `baskets/merge` endpoint again, with the parameter `createDestinationBasket=true`. Forcing the merge creates a new basket for the current shopper and copies information from the previous shopper's basket into it. Because the merge doesn't copy all basket data, a forced merge is not the same as a transfer. For example, the new basket doesn't contain any Personally Identifiable Information (PII) from the previous basket.
         
         ### before merge
         | Previous Shopper's Basket, SKU: Quantity, Custom Attributes | Current Shopper's Basket, SKU: Quantity, Custom Attributes  |
         |-------------------------------------------------------------|-------------------------------------------------------------|
         | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> c_customAttr_1: 'ABC' \<br\> c_customAttr_2: 'DEF'   | SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_3: 'XYZ'   |
         
         ### after merge - (previous shopper's basket is deleted)
         | productItemMergeMode | Current Shopper's Basket - SKU: Quantity, Custom Attributes  |
         |----------------------|--------------------------------------------------------------|
         | sum_quantities         | SKU_A: 7\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
         | higher_quantity      | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
         | saved_quantity       | SKU_A: 2\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
         | separate_item        | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ' |
         *
         * If you would like to get a raw Response object use the other mergeBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param createDestinationBasket - If the current shopper has an active basket, this parameter is ignored. If the current shopper has no active basket, this parameter controls the behavior:
         - `false` (default): Return a BasketMergeException (HTTP status 409).
         - `true`: Force the merge by creating a basket for the current shopper and copying information from the previous shopper's basket into it. Return success (HTTP status 200).
         * @param productItemMergeMode - This parameter controls the quantity calculation for products that exist in both baskets.
         - higher_quantity (default): Compare the product's quantities in each basket, and use the higher value.
         - sum_quantities: Use the sum of the product's quantities from both baskets.
         - saved_quantity: Use the product's quantity in the current shopper's active basket. Ignore the quantity from the previous shopper's basket.
         - separate_item: Add a separate product item to the current shopper's basket for the quantity in the previous shopper's basket.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
            mergeBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            createDestinationBasket?: boolean
                            productItemMergeMode?: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Basket>
            /**
         * Merge data from the previous shopper's basket into the current shopper's active basket and delete the previous shopper's basket. This endpoint doesn't merge Personally Identifiable Information (PII). You must obtain the shopper authorization token via SLAS and you must provide the ‘guest usid‘ in both the ‘/oauth2/login‘ and ‘/oauth2/token‘ calls while fetching the registered user JWT token. After the merge, all basket amounts are recalculated and totaled, including lookups for prices, taxes, shipping, and promotions.
         
         The following information is merged:
         - custom attributes on the basket and on all copied records
         - product items
         - gift certificate items
         - coupon items
         - shipments
         - ad-hoc price adjustments
         
         To control the merging of products that exist in both baskets, use the `productItemMergeMode` parameter. By default, the higher of the two basket quantities is used for each product. Products in both baskets are considered to be the same when all of the following values match (if one product doesn't have a value, the other product is a match only if it also doesn't have that value):
         - shipment
         - productId
         - option values
         - wishlist reference
         - inventory list id
         - gift flag & message
         - ad-hoc price adjustments
         
         If any of the listed values don't match, then the item in the previous shopper's basket is copied to a new line item in the current shopper's basket. If the listed values all match, but the matching products have different values for any custom attribute, the merged line item keeps the custom attribute value from the current shopper's basket.
         
         A success response contains the current shopper's active basket. The previous guest shopper's active basket is deleted.
         
         If the current shopper doesn't have an active basket, and the createDestinationBasket request parameter is false, then the merge request returns a BasketMergeException (HTTP status 409). You can proceed with one of these options:
         - Transfer the previous shopper's active basket to the current logged-in shopper by calling the `baskets/transfer` endpoint.
         - Force the merge by calling the `baskets/merge` endpoint again, with the parameter `createDestinationBasket=true`. Forcing the merge creates a new basket for the current shopper and copies information from the previous shopper's basket into it. Because the merge doesn't copy all basket data, a forced merge is not the same as a transfer. For example, the new basket doesn't contain any Personally Identifiable Information (PII) from the previous basket.
         
         ### before merge
         | Previous Shopper's Basket, SKU: Quantity, Custom Attributes | Current Shopper's Basket, SKU: Quantity, Custom Attributes  |
         |-------------------------------------------------------------|-------------------------------------------------------------|
         | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> c_customAttr_1: 'ABC' \<br\> c_customAttr_2: 'DEF'   | SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_3: 'XYZ'   |
         
         ### after merge - (previous shopper's basket is deleted)
         | productItemMergeMode | Current Shopper's Basket - SKU: Quantity, Custom Attributes  |
         |----------------------|--------------------------------------------------------------|
         | sum_quantities         | SKU_A: 7\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
         | higher_quantity      | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
         | saved_quantity       | SKU_A: 2\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ'              |
         | separate_item        | SKU_A: 5\<br\> SKU_B: 3\<br\> SKU_C: 4\<br\> SKU_A: 2\<br\> SKU_D: 6\<br\> SKU_E: 7\<br\> c_customAttr_1: 'UVW' \<br\> c_customAttr_2: 'DEF' \<br\> c_customAttr_3: 'XYZ' |
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param createDestinationBasket - If the current shopper has an active basket, this parameter is ignored. If the current shopper has no active basket, this parameter controls the behavior:
         - `false` (default): Return a BasketMergeException (HTTP status 409).
         - `true`: Force the merge by creating a basket for the current shopper and copying information from the previous shopper's basket into it. Return success (HTTP status 200).
         * @param productItemMergeMode - This parameter controls the quantity calculation for products that exist in both baskets.
         - higher_quantity (default): Compare the product's quantities in each basket, and use the higher value.
         - sum_quantities: Use the sum of the product's quantities from both baskets.
         - saved_quantity: Use the product's quantity in the current shopper's active basket. Ignore the quantity from the previous shopper's basket.
         - separate_item: Add a separate product item to the current shopper's basket for the quantity in the previous shopper's basket.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            mergeBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            createDestinationBasket?: boolean
                            productItemMergeMode?: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
             * Removes a basket.
             *
             * If you would like to get a raw Response object use the other deleteBasket function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param basketId - The ID of the basket to be modified.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type void.
             *
             */
            deleteBasket(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<void>
            /**
             * Removes a basket.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param basketId - The ID of the basket to be modified.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            deleteBasket<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
         * Gets a basket.
         *
         * If you would like to get a raw Response object use the other getBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
            getBasket(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Basket>
            /**
         * Gets a basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            getBasket<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Updates a basket. Only the currency of the basket, source code, the custom
         properties of the basket, and the shipping items will be considered.
         *
         * If you would like to get a raw Response object use the other updateBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            updateBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: Basket
                }>
            ): Promise<Basket>
            /**
         * Updates a basket. Only the currency of the basket, source code, the custom
         properties of the basket, and the shipping items will be considered.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            updateBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: Basket
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Marks a basket as an agent basket.
         *
         * If you would like to get a raw Response object use the other updateAsAgentBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
            updateAsAgentBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Basket>
            /**
         * Marks a basket as an agent basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            updateAsAgentBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Sets the billing address of a basket.
         *
         * If you would like to get a raw Response object use the other updateBillingAddressForBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param useAsShipping -
         * @param removeExternalTax - Changing the billing/shipping address can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
         - true: (default) The basket's tax values are set to null and must be recalculated.
         - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the billing/shipping address change doesn't affect the tax calculation.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            updateBillingAddressForBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            useAsShipping?: boolean
                            removeExternalTax?: boolean
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: OrderAddress
                }>
            ): Promise<Basket>
            /**
         * Sets the billing address of a basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param useAsShipping -
         * @param removeExternalTax - Changing the billing/shipping address can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
         - true: (default) The basket's tax values are set to null and must be recalculated.
         - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the billing/shipping address change doesn't affect the tax calculation.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            updateBillingAddressForBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            useAsShipping?: boolean
                            removeExternalTax?: boolean
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: OrderAddress
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Adds a coupon to an existing basket.
         *
         * If you would like to get a raw Response object use the other addCouponToBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            addCouponToBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CouponItem
                }>
            ): Promise<Basket>
            /**
         * Adds a coupon to an existing basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            addCouponToBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CouponItem
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Removes a coupon from the basket.
         *
         * If you would like to get a raw Response object use the other removeCouponFromBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param couponItemId - The ID of the coupon item to be removed.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
            removeCouponFromBasket(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            couponItemId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Basket>
            /**
         * Removes a coupon from the basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param couponItemId - The ID of the coupon item to be removed.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            removeCouponFromBasket<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            couponItemId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Sets customer information for an existing basket.
         *
         * If you would like to get a raw Response object use the other updateCustomerForBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            updateCustomerForBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerInfo
                }>
            ): Promise<Basket>
            /**
         * Sets customer information for an existing basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            updateCustomerForBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerInfo
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Adds a gift certificate item to an existing basket.
         *
         * If you would like to get a raw Response object use the other addGiftCertificateItemToBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            addGiftCertificateItemToBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: GiftCertificateItem
                }>
            ): Promise<Basket>
            /**
         * Adds a gift certificate item to an existing basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            addGiftCertificateItemToBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: GiftCertificateItem
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Deletes a gift certificate item from an existing basket.
         *
         * If you would like to get a raw Response object use the other removeGiftCertificateItemFromBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
            removeGiftCertificateItemFromBasket(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            giftCertificateItemId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Basket>
            /**
         * Deletes a gift certificate item from an existing basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            removeGiftCertificateItemFromBasket<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            giftCertificateItemId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Updates a gift certificate item of an existing basket.
         *
         * If you would like to get a raw Response object use the other updateGiftCertificateItemInBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            updateGiftCertificateItemInBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            giftCertificateItemId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: GiftCertificateItem
                }>
            ): Promise<Basket>
            /**
         * Updates a gift certificate item of an existing basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param giftCertificateItemId - the ID of the gift certificate item to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            updateGiftCertificateItemInBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            giftCertificateItemId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: GiftCertificateItem
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Adds new items to a basket. The added items are associated with the
         specified shipment. If no shipment id is specified, the added items are associated with the default shipment.
         Considered values from the request body, for each item are:
         
         - productId: a valid product ID. This is the ID of the product to be added to the basket. If the
         product is already in the basket, the API either increments the quantity of the existing product line item or
         creates a new product line item, based on the site preference 'Add Product Behavior'. For option products and
         product bundles containing variation masters, the API creates a new product line item regardless of the site
         preference.
         - shipmentId: a valid shipment ID (optional). This is the ID of the shipment in which the product item
         is created.
         - quantity: a number between 0.01 and 999. This is the quantity of the product to order.
         - inventoryId: a valid inventory ID (optional). This is the ID of the inventory from which the item is
         allocated.
         - bonusDiscountLineItemId: a valid bonus discount line item ID (optional). This is the ID of the
         bonus discount line item for which the added product is a selected bonus product.
         - optionItems/optionValueId: a valid option value ID. This is an option value for an option item of
         an option product.  This is only possible if the product item is an option
         product. To set option values, you must specify a collection of option items in the optionItems
         property. These option items must contain optionId and optionValueId. Also,
         the values you specify must be valid for the option product that this product item represents. Otherwise, the
         server throws an InvalidProductOptionItemException or an
         InvalidProductOptionValueItemException.
         - custom properties in the form c_\<CUSTOM_NAME\>: the custom property must correspond to a custom
         attribute (\<CUSTOM_NAME\>) defined for ProductLineItem. The value of this property must be valid for the
         type of custom attribute defined for ProductLineItem.
         *
         * If you would like to get a raw Response object use the other addItemToBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            addItemToBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: Array<ProductItem>
                }>
            ): Promise<Basket>
            /**
         * Adds new items to a basket. The added items are associated with the
         specified shipment. If no shipment id is specified, the added items are associated with the default shipment.
         Considered values from the request body, for each item are:
         
         - productId: a valid product ID. This is the ID of the product to be added to the basket. If the
         product is already in the basket, the API either increments the quantity of the existing product line item or
         creates a new product line item, based on the site preference 'Add Product Behavior'. For option products and
         product bundles containing variation masters, the API creates a new product line item regardless of the site
         preference.
         - shipmentId: a valid shipment ID (optional). This is the ID of the shipment in which the product item
         is created.
         - quantity: a number between 0.01 and 999. This is the quantity of the product to order.
         - inventoryId: a valid inventory ID (optional). This is the ID of the inventory from which the item is
         allocated.
         - bonusDiscountLineItemId: a valid bonus discount line item ID (optional). This is the ID of the
         bonus discount line item for which the added product is a selected bonus product.
         - optionItems/optionValueId: a valid option value ID. This is an option value for an option item of
         an option product.  This is only possible if the product item is an option
         product. To set option values, you must specify a collection of option items in the optionItems
         property. These option items must contain optionId and optionValueId. Also,
         the values you specify must be valid for the option product that this product item represents. Otherwise, the
         server throws an InvalidProductOptionItemException or an
         InvalidProductOptionValueItemException.
         - custom properties in the form c_\<CUSTOM_NAME\>: the custom property must correspond to a custom
         attribute (\<CUSTOM_NAME\>) defined for ProductLineItem. The value of this property must be valid for the
         type of custom attribute defined for ProductLineItem.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            addItemToBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: Array<ProductItem>
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Removes a product item from the basket.
         *
         * If you would like to get a raw Response object use the other removeItemFromBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param itemId - The ID of the item to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
            removeItemFromBasket(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            itemId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Basket>
            /**
         * Removes a product item from the basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param itemId - The ID of the item to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            removeItemFromBasket<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            itemId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Updates an item in a basket. The
         following values in the request body are considered by the server:
         
         - productId: a valid product ID. The purpose of this
         value is to exchange a variation of a variation product.
         - shipmentId: a valid shipment ID. The purpose of
         this value is to move a product item to another shipment.
         - quantity: a number between 0 and 999. The purpose of
         this value is to change quantity of the product item. If quantity is 0,
         the product item is removed.
         - optionItems/optionValueId: a valid option value
         ID. The purpose of this value is to exchange an option value for an
         option item of an option product.
         This is only possible if the product item is an option product. To change
         option values a collection of option items to be changed need to be
         provided in property optionItems. Those
         optionItems need to contain optionId
         and optionValueId. The provided values must be valid
         for the option product that this product item represents. Otherwise
         InvalidProductOptionItemException or
         InvalidProductOptionValueItemException will be thrown.
         custom properties c_\<CUSTOM_NAME\>: a
         value corresponding to the type defined for custom attribute
         \<CUSTOM_NAME\> of ProductLineItem. The purpose of this value is to
         add or change the value of a custom attribute defined for
         ProductLineItem.
         *
         * If you would like to get a raw Response object use the other updateItemInBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param itemId - The ID of the item to be updated.
         * @param removeExternalTax - Updating the quantity of the product item can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
         - true: (default) The tax values for the product item are set to null and must be recalculated.
         - false: The tax value for the product item will be updated based on the external tax rate (if no tax value was externally computed). Use this setting to prevent an unnecessary external tax call.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            updateItemInBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            itemId: string
                            removeExternalTax?: boolean
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: ProductItem
                }>
            ): Promise<Basket>
            /**
         * Updates an item in a basket. The
         following values in the request body are considered by the server:
         
         - productId: a valid product ID. The purpose of this
         value is to exchange a variation of a variation product.
         - shipmentId: a valid shipment ID. The purpose of
         this value is to move a product item to another shipment.
         - quantity: a number between 0 and 999. The purpose of
         this value is to change quantity of the product item. If quantity is 0,
         the product item is removed.
         - optionItems/optionValueId: a valid option value
         ID. The purpose of this value is to exchange an option value for an
         option item of an option product.
         This is only possible if the product item is an option product. To change
         option values a collection of option items to be changed need to be
         provided in property optionItems. Those
         optionItems need to contain optionId
         and optionValueId. The provided values must be valid
         for the option product that this product item represents. Otherwise
         InvalidProductOptionItemException or
         InvalidProductOptionValueItemException will be thrown.
         custom properties c_\<CUSTOM_NAME\>: a
         value corresponding to the type defined for custom attribute
         \<CUSTOM_NAME\> of ProductLineItem. The purpose of this value is to
         add or change the value of a custom attribute defined for
         ProductLineItem.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param itemId - The ID of the item to be updated.
         * @param removeExternalTax - Updating the quantity of the product item can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
         - true: (default) The tax values for the product item are set to null and must be recalculated.
         - false: The tax value for the product item will be updated based on the external tax rate (if no tax value was externally computed). Use this setting to prevent an unnecessary external tax call.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            updateItemInBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            itemId: string
                            removeExternalTax?: boolean
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: ProductItem
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
             * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for a specific taxable line item. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
             *
             * If you would like to get a raw Response object use the other addTaxesForBasketItem function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param basketId - The ID of the basket to be modified.
             * @param itemId - The ID of the item to be updated.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type void.
             *
             */
            addTaxesForBasketItem(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            itemId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TaxItems
                }>
            ): Promise<void>
            /**
             * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for a specific taxable line item. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param basketId - The ID of the basket to be modified.
             * @param itemId - The ID of the item to be updated.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            addTaxesForBasketItem<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            itemId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TaxItems
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
         * Adds a payment instrument to a basket.
         *
         * If you would like to get a raw Response object use the other addPaymentInstrumentToBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            addPaymentInstrumentToBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: BasketPaymentInstrumentRequest
                }>
            ): Promise<Basket>
            /**
         * Adds a payment instrument to a basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            addPaymentInstrumentToBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: BasketPaymentInstrumentRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Removes a payment instrument of a basket.
         *
         * If you would like to get a raw Response object use the other removePaymentInstrumentFromBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param paymentInstrumentId -
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
            removePaymentInstrumentFromBasket(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            paymentInstrumentId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Basket>
            /**
         * Removes a payment instrument of a basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param paymentInstrumentId -
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            removePaymentInstrumentFromBasket<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            paymentInstrumentId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Updates payment instrument of an existing basket.
         *
         * If you would like to get a raw Response object use the other updatePaymentInstrumentInBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param paymentInstrumentId -
         * @param removeExternalTax - Updating the payment instrument can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
         - true: (default) The basket's tax values are set to null and must be recalculated.
         - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the payment instrument change doesn't affect the tax calculation.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            updatePaymentInstrumentInBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            paymentInstrumentId: string
                            removeExternalTax?: boolean
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: OrderPaymentInstrument
                }>
            ): Promise<Basket>
            /**
         * Updates payment instrument of an existing basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param paymentInstrumentId -
         * @param removeExternalTax - Updating the payment instrument can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
         - true: (default) The basket's tax values are set to null and must be recalculated.
         - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the payment instrument change doesn't affect the tax calculation.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            updatePaymentInstrumentInBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            paymentInstrumentId: string
                            removeExternalTax?: boolean
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: OrderPaymentInstrument
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Gets applicable payment methods for an existing basket considering the open payment amount only.
         *
         * If you would like to get a raw Response object use the other getPaymentMethodsForBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PaymentMethodResult.
         *
         */
            getPaymentMethodsForBasket(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<PaymentMethodResult>
            /**
         * Gets applicable payment methods for an existing basket considering the open payment amount only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PaymentMethodResult otherwise.
         *
         */
            getPaymentMethodsForBasket<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : PaymentMethodResult>
            /**
         * Adds a custom manual price adjustment to the basket.
         *
         * If you would like to get a raw Response object use the other addPriceAdjustmentToBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            addPriceAdjustmentToBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PriceAdjustmentRequest
                }>
            ): Promise<Basket>
            /**
         * Adds a custom manual price adjustment to the basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            addPriceAdjustmentToBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PriceAdjustmentRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Removes a custom manual price adjustment from the basket.
         *
         * If you would like to get a raw Response object use the other removePriceAdjustmentFromBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param priceAdjustmentId -
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
            removePriceAdjustmentFromBasket(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            priceAdjustmentId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Basket>
            /**
         * Removes a custom manual price adjustment from the basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param priceAdjustmentId -
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            removePriceAdjustmentFromBasket<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            priceAdjustmentId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Updates a custom manual price adjustment on the basket. Only the following path values are considered for the update; all other attributes are ignored.
         - `discount`
         - `itemText`
         - `reasonCode`
         - `custom properties`
         The discount `type` of a price adjustment cannot be updated and therefore, the value of the existing type must be passed. For an adjustment of type `percentage`, the `percentage` attribute is mandatory. For adjustments of type `amount` and `fixed_price`, the `amount` attribute is mandatory.
         *
         * If you would like to get a raw Response object use the other updatePriceAdjustmentInBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param priceAdjustmentId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            updatePriceAdjustmentInBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            priceAdjustmentId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PriceAdjustment
                }>
            ): Promise<Basket>
            /**
         * Updates a custom manual price adjustment on the basket. Only the following path values are considered for the update; all other attributes are ignored.
         - `discount`
         - `itemText`
         - `reasonCode`
         - `custom properties`
         The discount `type` of a price adjustment cannot be updated and therefore, the value of the existing type must be passed. For an adjustment of type `percentage`, the `percentage` attribute is mandatory. For adjustments of type `amount` and `fixed_price`, the `amount` attribute is mandatory.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param priceAdjustmentId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            updatePriceAdjustmentInBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            priceAdjustmentId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PriceAdjustment
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
             * Gets applicable price books for an existing basket.
             *
             * If you would like to get a raw Response object use the other getPriceBooksForBasket function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param basketId - The ID of the basket to be modified.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type PriceBookIds.
             *
             */
            getPriceBooksForBasket(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<PriceBookIds>
            /**
             * Gets applicable price books for an existing basket.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param basketId - The ID of the basket to be modified.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type PriceBookIds otherwise.
             *
             */
            getPriceBooksForBasket<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : PriceBookIds>
            /**
             * This method allows you to put an array of priceBookIds to an existing basket, which will be used for basket calculation.
             *
             * If you would like to get a raw Response object use the other addPriceBooksToBasket function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param basketId - The ID of the basket to be modified.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type void.
             *
             */
            addPriceBooksToBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PriceBookIds
                }>
            ): Promise<void>
            /**
             * This method allows you to put an array of priceBookIds to an existing basket, which will be used for basket calculation.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param basketId - The ID of the basket to be modified.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            addPriceBooksToBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PriceBookIds
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
         * Creates a new shipment for a basket.
         
         The created shipment is initialized with values provided in the body
         document and can be updated with further data API calls. Considered from
         the body are the following properties if specified:
         
         - the ID
         - the shipping address
         - the shipping method
         - gift boolean flag
         - gift message
         - custom properties
         *
         * If you would like to get a raw Response object use the other createShipmentForBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            createShipmentForBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: Shipment
                }>
            ): Promise<Basket>
            /**
         * Creates a new shipment for a basket.
         
         The created shipment is initialized with values provided in the body
         document and can be updated with further data API calls. Considered from
         the body are the following properties if specified:
         
         - the ID
         - the shipping address
         - the shipping method
         - gift boolean flag
         - gift message
         - custom properties
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            createShipmentForBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: Shipment
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Removes a specified shipment and all associated product, gift certificate,
         shipping, and price adjustment line items from a basket.
         It is not allowed to remove the default shipment.
         *
         * If you would like to get a raw Response object use the other removeShipmentFromBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
            removeShipmentFromBasket(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            shipmentId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Basket>
            /**
         * Removes a specified shipment and all associated product, gift certificate,
         shipping, and price adjustment line items from a basket.
         It is not allowed to remove the default shipment.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            removeShipmentFromBasket<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            shipmentId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Updates a shipment for a basket.
         
         The shipment is initialized with values provided in the body
         document and can be updated with further data API calls. Considered from
         the body are the following properties if specified:
         - the ID
         - the shipping address
         - the shipping method
         - gift boolean flag
         - gift message
         - custom properties
         *
         * If you would like to get a raw Response object use the other updateShipmentForBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            updateShipmentForBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            shipmentId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: Shipment
                }>
            ): Promise<Basket>
            /**
         * Updates a shipment for a basket.
         
         The shipment is initialized with values provided in the body
         document and can be updated with further data API calls. Considered from
         the body are the following properties if specified:
         - the ID
         - the shipping address
         - the shipping method
         - gift boolean flag
         - gift message
         - custom properties
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            updateShipmentForBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            shipmentId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: Shipment
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Sets a shipping address of a specific shipment of a basket.
         *
         * If you would like to get a raw Response object use the other updateShippingAddressForShipment function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param useAsBilling -
         * @param removeExternalTax - Updating the shipping/billing address can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
         - true: (default) The basket's tax values are set to null and must be recalculated.
         - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the shipping/billing address change doesn't affect the tax calculation.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            updateShippingAddressForShipment(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            shipmentId: string
                            useAsBilling?: boolean
                            removeExternalTax?: boolean
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: OrderAddress
                }>
            ): Promise<Basket>
            /**
         * Sets a shipping address of a specific shipment of a basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param useAsBilling -
         * @param removeExternalTax - Updating the shipping/billing address can trigger tax recalculation. If the basket's tax mode is internal, the tax is automatically recalculated using tax tables. If the basket's tax mode is external, this query parameter controls tax recalculation as follows:
         - true: (default) The basket's tax values are set to null and must be recalculated.
         - false: The basket's tax values don't change. Use this setting to prevent an unnecessary external tax call when the shipping/billing address change doesn't affect the tax calculation.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            updateShippingAddressForShipment<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            shipmentId: string
                            useAsBilling?: boolean
                            removeExternalTax?: boolean
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: OrderAddress
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Sets a shipping method to a specific shipment of a basket.
         *
         * If you would like to get a raw Response object use the other updateShippingMethodForShipment function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Basket.
         *
         */
            updateShippingMethodForShipment(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            shipmentId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: ShippingMethod
                }>
            ): Promise<Basket>
            /**
         * Sets a shipping method to a specific shipment of a basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            updateShippingMethodForShipment<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            shipmentId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: ShippingMethod
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
         * Gets the applicable shipping methods for a certain shipment of a basket.
         *
         * If you would like to get a raw Response object use the other getShippingMethodsForShipment function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type ShippingMethodResult.
         *
         */
            getShippingMethodsForShipment(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            shipmentId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<ShippingMethodResult>
            /**
         * Gets the applicable shipping methods for a certain shipment of a basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param shipmentId - The ID of the shipment to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type ShippingMethodResult otherwise.
         *
         */
            getShippingMethodsForShipment<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            shipmentId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : ShippingMethodResult>
            /**
         * Marks a basket as a storefront basket.
         *
         * If you would like to get a raw Response object use the other updateAsStorefrontBasket function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param exchange - If true, an existing storefront basket is exchanged and marked as an agent basket. If false, a `CustomerBasketsQuotaExceededException` is thrown.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Basket.
         *
         */
            updateAsStorefrontBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            exchange?: boolean
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Basket>
            /**
         * Marks a basket as a storefront basket.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param basketId - The ID of the basket to be modified.
         * @param exchange - If true, an existing storefront basket is exchanged and marked as an agent basket. If false, a `CustomerBasketsQuotaExceededException` is thrown.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Basket otherwise.
         *
         */
            updateAsStorefrontBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            exchange?: boolean
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Basket>
            /**
             * This method gives you the external taxation data set by the PUT taxes API. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
             *
             * If you would like to get a raw Response object use the other getTaxesFromBasket function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param basketId - The ID of the basket to be modified.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type Taxes.
             *
             */
            getTaxesFromBasket(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Taxes>
            /**
             * This method gives you the external taxation data set by the PUT taxes API. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param basketId - The ID of the basket to be modified.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Taxes otherwise.
             *
             */
            getTaxesFromBasket<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Taxes>
            /**
             * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for all taxable line items. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
             *
             * If you would like to get a raw Response object use the other addTaxesForBasket function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param basketId - The ID of the basket to be modified.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type void.
             *
             */
            addTaxesForBasket(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: Taxes
                }>
            ): Promise<void>
            /**
             * This method allows you to apply external taxation data to an existing basket to be able to pass tax rates and optional values for all taxable line items. This endpoint can be called only if external taxation mode was used for basket creation. See POST /baskets for more information.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param basketId - The ID of the basket to be modified.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            addTaxesForBasket<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            basketId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: Taxes
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
        }
    }
    type ShopperContext = {
        effectiveDateTime?: unknown
        sourceCode?: unknown
        customQualifiers?: Record<string, unknown>
        assignmentQualifiers?: Record<string, unknown>
    } & {
        [key: string]: unknown
    }
    type RangeFilter$0 = {
        [key: string]: unknown
    }
    type BoolFilter$0 = {
        filters?: Array<Filter>
        operator: string
    } & {
        [key: string]: unknown
    }
    type MatchAllQuery$0 = Record<string, unknown>
    type FilteredQuery$0 = {
        filter: Filter
        query: Query
    } & {
        [key: string]: unknown
    }
    type QueryFilter$0 = {
        query: Query
    } & {
        [key: string]: unknown
    }
    type Query$0 = {
        boolQuery?: BoolQuery
        filteredQuery?: FilteredQuery$0
        matchAllQuery?: MatchAllQuery$0
        nestedQuery?: NestedQuery
        termQuery?: TermQuery
        textQuery?: TextQuery
    } & {
        [key: string]: unknown
    }
    type TermQuery$0 = {
        fields: Array<string>
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TermFilter$0 = {
        field: string
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TextQuery$0 = {
        fields: Array<string>
        searchPhrase: string
    } & {
        [key: string]: unknown
    }
    type Range2Filter$0 = {
        filterMode?: string
        fromField: string
        fromInclusive?: boolean
        fromValue?: unknown
        toField: string
        toInclusive?: boolean
        toValue?: unknown
    } & {
        [key: string]: unknown
    }
    type BoolQuery$0 = {
        must?: Array<Query$0>
        mustNot?: Array<Query$0>
        should?: Array<Query$0>
    } & {
        [key: string]: unknown
    }
    type NestedQuery$0 = {
        path: string
        query: Query$0
        scoreMode?: string
    } & {
        [key: string]: unknown
    }
    type Filter$0 = {
        boolFilter?: BoolFilter$0
        queryFilter?: QueryFilter$0
        range2Filter?: Range2Filter$0
        rangeFilter?: RangeFilter$0
        termFilter?: TermFilter$0
    } & {
        [key: string]: unknown
    }
    type Sort$0 = {
        field: string
        sortOrder?: string
    } & {
        [key: string]: unknown
    }
    type L10nString$0 = Record<string, unknown>
    type PropertyValueDefinition$0 = {
        description: L10nString$0
        displayValue: L10nString$0
        id: string
        position?: number
        value: string
    }
    /**
     * All path parameters that are used by at least one ShopperContexts method.
     */
    type ShopperContextsPathParameters = {
        organizationId?: string
        usid?: string
    }
    /**
     * All query parameters that are used by at least one ShopperContexts method.
     */
    type ShopperContextsQueryParameters = {
        siteId?: string
    }
    /**
     * All parameters that are used by ShopperContexts.
     */
    type ShopperContextsParameters = ShopperContextsPathParameters &
        BaseUriParameters &
        ShopperContextsQueryParameters
    /**
     * [Shopper Context](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-context:Summary)
     * ==================================
     *
     * *The Shopper Context API enables developers to build highly contextualized shopping experiences for shoppers.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperContexts } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperContextsClient = new ShopperContexts(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 0.0.20<br />
     * Last Updated: <br />
     * </span>
     
     *
     
     */
    declare class ShopperContexts<
        ConfigParameters extends ShopperContextsParameters & Record<string, unknown>
    > {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string
        }
        static readonly defaultBaseUri =
            'https://{shortCode}.api.commercecloud.salesforce.com/shopper/shopper-context/{version}'
        constructor(config: ClientConfigInit<ConfigParameters>)
        /**
         * Gets the shopper's context based on the shopperJWT.
         *
         * If you would like to get a raw Response object use the other getShopperContext function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
         * @param siteId - The identifer of the site that a request is being made in the context of. It is strongly recommended to pass in the siteId in the call.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type ShopperContext.
         *
         */
        getShopperContext(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        usid: string
                        siteId?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<ShopperContext>
        /**
         * Gets the shopper's context based on the shopperJWT.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
         * @param siteId - The identifer of the site that a request is being made in the context of. It is strongly recommended to pass in the siteId in the call.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type ShopperContext otherwise.
         *
         */
        getShopperContext<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        usid: string
                        siteId?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : ShopperContext>
        /**
         * Creates the shopper's context based on shopperJWT.
         *
         * If you would like to get a raw Response object use the other createShopperContext function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
         * @param siteId - The identifer of the site that a request is being made in the context of. It is strongly recommended to pass in the siteId in the call.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void | void.
         *
         */
        createShopperContext(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        usid: string
                        siteId?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: ShopperContext
            }>
        ): Promise<void | void>
        /**
         * Creates the shopper's context based on shopperJWT.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
         * @param siteId - The identifer of the site that a request is being made in the context of. It is strongly recommended to pass in the siteId in the call.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void | void otherwise.
         *
         */
        createShopperContext<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        usid: string
                        siteId?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: ShopperContext
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void | void>
        /**
         * Gets the shopper's context based on the shopperJWT.
         *
         * If you would like to get a raw Response object use the other deleteShopperContext function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
         * @param siteId - The identifer of the site that a request is being made in the context of. It is strongly recommended to pass in the siteId in the call.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        deleteShopperContext(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        usid: string
                        siteId?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<void>
        /**
         * Gets the shopper's context based on the shopperJWT.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
         * @param siteId - The identifer of the site that a request is being made in the context of. It is strongly recommended to pass in the siteId in the call.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        deleteShopperContext<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        usid: string
                        siteId?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
        /**
         * Updates the shopper's context based on the Shopper JWT. If the shopper context exists, it's updated with the patch body. If a customer qualifier or an `effectiveDateTime` is already present in the existing shopper context, its value is replaced by the corresponding value from the patch body. If a customer qualifers' value is set to `null` it's deleted from existing shopper context. If `effectiveDateTime` value is set to set to an empty string (\"\"), it's deleted from existing shopper context. If `effectiveDateTime` value is set to `null` it's ignored. If an `effectiveDateTime` or customer qualifiiers' value is new, it's added to the existing Shopper context.
         *
         * If you would like to get a raw Response object use the other updateShopperContext function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
         * @param siteId - The identifer of the site that a request is being made in the context of. It is strongly recommended to pass in the siteId in the call.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type ShopperContext.
         *
         */
        updateShopperContext(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        usid: string
                        siteId?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: ShopperContext
            }>
        ): Promise<ShopperContext>
        /**
         * Updates the shopper's context based on the Shopper JWT. If the shopper context exists, it's updated with the patch body. If a customer qualifier or an `effectiveDateTime` is already present in the existing shopper context, its value is replaced by the corresponding value from the patch body. If a customer qualifers' value is set to `null` it's deleted from existing shopper context. If `effectiveDateTime` value is set to set to an empty string (\"\"), it's deleted from existing shopper context. If `effectiveDateTime` value is set to `null` it's ignored. If an `effectiveDateTime` or customer qualifiiers' value is new, it's added to the existing Shopper context.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
         * @param siteId - The identifer of the site that a request is being made in the context of. It is strongly recommended to pass in the siteId in the call.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type ShopperContext otherwise.
         *
         */
        updateShopperContext<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        usid: string
                        siteId?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: ShopperContext
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : ShopperContext>
    }
    declare namespace ShopperContextsTypes {
        /*
         * Copyright (c) 2023, Salesforce, Inc.
         * All rights reserved.
         * SPDX-License-Identifier: BSD-3-Clause
         * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
         */
        /**
         * Makes a type easier to read.
         */
        type Prettify<T> = NonNullable<{
            [K in keyof T]: T[K]
        }>
        /**
         * Generates the types required on a method, based on those provided in the config.
         */
        type CompositeParameters<
            MethodParameters extends Record<string, unknown>,
            ConfigParameters extends Record<string, unknown>
        > = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>
        /**
         * If an object has a `parameters` property, and the `parameters` object has required properties,
         * then the `parameters` property on the root object is marked as required.
         */
        type RequireParametersUnlessAllAreOptional<
            T extends {
                parameters?: Record<string, unknown>
            }
        > = Record<string, never> extends NonNullable<T['parameters']>
            ? T
            : Prettify<T & Required<Pick<T, 'parameters'>>>
        /**
         * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
         * if not specified.
         */
        interface BaseUriParameters {
            shortCode: string
            version?: string // Optional, will default to "v1" if not provided.
        }
        /**
         * Generic interface for path parameters.
         */
        interface PathParameters {
            [key: string]: string | number | boolean
        }
        /**
         * Generic interface for query parameters.
         */
        interface QueryParameters {
            [key: string]: string | number | boolean | string[] | number[]
        }
        /**
         * Generic interface for all parameter types.
         */
        type UrlParameters = PathParameters | QueryParameters
        /**
         * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
         * it from the `RequestInit` provided by node-fetch.
         */
        type BrowserRequestInit = RequestInit
        /**
         * Any properties supported in either the browser or node are accepted.
         * Using the right properties in the right context is left to the user.
         */
        type FetchOptions = NodeRequestInit & BrowserRequestInit
        /**
         * Base options that can be passed to the `ClientConfig` class.
         */
        interface ClientConfigInit<Params extends BaseUriParameters> {
            baseUri?: string
            proxy?: string
            headers?: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions?: FetchOptions
            transformRequest?: (
                data: unknown,
                headers: {
                    [key: string]: string
                }
            ) => Required<FetchOptions>['body']
            throwOnBadResponse?: boolean
        }
        type FetchFunction = (
            input: RequestInfo,
            init?: FetchOptions | undefined
        ) => Promise<Response>
        /**
         * Configuration parameters common to Commerce SDK clients
         */
        class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
            baseUri?: string
            proxy?: string
            headers: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions: FetchOptions
            transformRequest: NonNullable<ClientConfigInit<Params>['transformRequest']>
            throwOnBadResponse: boolean
            constructor(config: ClientConfigInit<Params>)
            static readonly defaults: Pick<Required<ClientConfigInit<never>>, 'transformRequest'>
        }
        type ShopperContext = {
            effectiveDateTime?: unknown
            sourceCode?: unknown
            customQualifiers?: Record<string, unknown>
            assignmentQualifiers?: Record<string, unknown>
        } & {
            [key: string]: unknown
        }
        type ErrorResponse = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type ChangeControlled = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type RangeFilter = {
            [key: string]: unknown
        }
        type ChangeControlledDataType = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type Error = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type Money = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResult = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type SearchRequest = {
            limit?: number
            query: Query$0
            sorts?: Array<Sort$0>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type PropertyDefinition = {
            defaultValue?: PropertyValueDefinition$0
            id?: string
            name: L10nString$0
            description: L10nString$0
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString$0
            possibleValues?: Array<PropertyValueDefinition$0>
            type: string
            visible?: boolean
        } & {
            [key: string]: unknown
        }
        type LocalizedString = Record<string, unknown>
        type PaginatedSearchResult = {
            query: Query$0
            sorts?: Array<Sort$0>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type ClosedObject = Record<string, unknown>
        type OpenObject = Record<string, unknown>
        type NoPropertiesAllowed = Record<string, unknown>
        type SpecifiedPropertiesAllowed = Record<string, unknown>
        type BoolFilter = {
            filters?: Array<Filter$0>
            operator: string
        } & {
            [key: string]: unknown
        }
        type PaginatedSearchResultBase = {
            query: Query$0
            sorts?: Array<Sort$0>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type MatchAllQuery = Record<string, unknown>
        type FilteredQuery = {
            filter: Filter$0
            query: Query$0
        } & {
            [key: string]: unknown
        }
        type QueryFilter = {
            query: Query$0
        } & {
            [key: string]: unknown
        }
        type Query = {
            boolQuery?: BoolQuery$0
            filteredQuery?: FilteredQuery
            matchAllQuery?: MatchAllQuery
            nestedQuery?: NestedQuery$0
            termQuery?: TermQuery$0
            textQuery?: TextQuery$0
        } & {
            [key: string]: unknown
        }
        type TermQuery = {
            fields: Array<string>
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TermFilter = {
            field: string
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TextQuery = {
            fields: Array<string>
            searchPhrase: string
        } & {
            [key: string]: unknown
        }
        type Range2Filter = {
            filterMode?: string
            fromField: string
            fromInclusive?: boolean
            fromValue?: unknown
            toField: string
            toInclusive?: boolean
            toValue?: unknown
        } & {
            [key: string]: unknown
        }
        type BoolQuery = {
            must?: Array<Query>
            mustNot?: Array<Query>
            should?: Array<Query>
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResultBase = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type NestedQuery = {
            path: string
            query: Query
            scoreMode?: string
        } & {
            [key: string]: unknown
        }
        type Filter = {
            boolFilter?: BoolFilter
            queryFilter?: QueryFilter
            range2Filter?: Range2Filter
            rangeFilter?: RangeFilter
            termFilter?: TermFilter
        } & {
            [key: string]: unknown
        }
        type Sort = {
            field: string
            sortOrder?: string
        } & {
            [key: string]: unknown
        }
        type SearchRequestBase = {
            limit?: number
            query: Query
            sorts?: Array<Sort>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type MoneyMnemonic = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type L10nString = Record<string, unknown>
        type AttributeDefinition = {
            defaultValue?: PropertyValueDefinition$0
            id?: string
            name: L10nString
            description: L10nString
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString
            possibleValues?: Array<PropertyValueDefinition$0>
            type: string
            visible?: boolean
        }
        type PropertyValueDefinition = {
            description: L10nString
            displayValue: L10nString
            id: string
            position?: number
            value: string
        }
        /**
         * All path parameters that are used by at least one ShopperContexts method.
         */
        type ShopperContextsPathParameters = {
            organizationId?: string
            usid?: string
        }
        /**
         * All query parameters that are used by at least one ShopperContexts method.
         */
        type ShopperContextsQueryParameters = {
            siteId?: string
        }
        /**
         * All parameters that are used by ShopperContexts.
         */
        type ShopperContextsParameters = ShopperContextsPathParameters &
            BaseUriParameters &
            ShopperContextsQueryParameters
        /**
         * [Shopper Context](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-context:Summary)
         * ==================================
         *
         * *The Shopper Context API enables developers to build highly contextualized shopping experiences for shoppers.*<br />
         *
         * Simple example:
         *
         * ```typescript
         *   import { ShopperContexts } from "commerce-sdk-isomorphic";
         *
         *   const clientConfig = {
         *     parameters: {
         *       clientId: "XXXXXX",
         *       organizationId: "XXXX",
         *       shortCode: "XXX",
         *       siteId: "XX"
         *     }
         *   };
         *   const shopperContextsClient = new ShopperContexts(clientConfig);
         * ```
         *
         * <span style="font-size:.7em; display:block; text-align: right">
         * API Version: 0.0.20<br />
         * Last Updated: <br />
         * </span>
         
         *
         
         */
        class ShopperContexts<
            ConfigParameters extends ShopperContextsParameters & Record<string, unknown>
        > {
            // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
            clientConfig: ClientConfig<ConfigParameters> & {
                baseUri: string
            }
            static readonly defaultBaseUri =
                'https://{shortCode}.api.commercecloud.salesforce.com/shopper/shopper-context/{version}'
            constructor(config: ClientConfigInit<ConfigParameters>)
            /**
             * Gets the shopper's context based on the shopperJWT.
             *
             * If you would like to get a raw Response object use the other getShopperContext function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
             * @param siteId - The identifer of the site that a request is being made in the context of. It is strongly recommended to pass in the siteId in the call.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type ShopperContext.
             *
             */
            getShopperContext(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            usid: string
                            siteId?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<ShopperContext>
            /**
             * Gets the shopper's context based on the shopperJWT.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
             * @param siteId - The identifer of the site that a request is being made in the context of. It is strongly recommended to pass in the siteId in the call.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type ShopperContext otherwise.
             *
             */
            getShopperContext<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            usid: string
                            siteId?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : ShopperContext>
            /**
             * Creates the shopper's context based on shopperJWT.
             *
             * If you would like to get a raw Response object use the other createShopperContext function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
             * @param siteId - The identifer of the site that a request is being made in the context of. It is strongly recommended to pass in the siteId in the call.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type void | void.
             *
             */
            createShopperContext(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            usid: string
                            siteId?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: ShopperContext
                }>
            ): Promise<void | void>
            /**
             * Creates the shopper's context based on shopperJWT.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
             * @param siteId - The identifer of the site that a request is being made in the context of. It is strongly recommended to pass in the siteId in the call.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void | void otherwise.
             *
             */
            createShopperContext<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            usid: string
                            siteId?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: ShopperContext
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void | void>
            /**
             * Gets the shopper's context based on the shopperJWT.
             *
             * If you would like to get a raw Response object use the other deleteShopperContext function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
             * @param siteId - The identifer of the site that a request is being made in the context of. It is strongly recommended to pass in the siteId in the call.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type void.
             *
             */
            deleteShopperContext(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            usid: string
                            siteId?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<void>
            /**
             * Gets the shopper's context based on the shopperJWT.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
             * @param siteId - The identifer of the site that a request is being made in the context of. It is strongly recommended to pass in the siteId in the call.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            deleteShopperContext<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            usid: string
                            siteId?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
             * Updates the shopper's context based on the Shopper JWT. If the shopper context exists, it's updated with the patch body. If a customer qualifier or an `effectiveDateTime` is already present in the existing shopper context, its value is replaced by the corresponding value from the patch body. If a customer qualifers' value is set to `null` it's deleted from existing shopper context. If `effectiveDateTime` value is set to set to an empty string (\"\"), it's deleted from existing shopper context. If `effectiveDateTime` value is set to `null` it's ignored. If an `effectiveDateTime` or customer qualifiiers' value is new, it's added to the existing Shopper context.
             *
             * If you would like to get a raw Response object use the other updateShopperContext function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
             * @param siteId - The identifer of the site that a request is being made in the context of. It is strongly recommended to pass in the siteId in the call.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type ShopperContext.
             *
             */
            updateShopperContext(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            usid: string
                            siteId?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: ShopperContext
                }>
            ): Promise<ShopperContext>
            /**
             * Updates the shopper's context based on the Shopper JWT. If the shopper context exists, it's updated with the patch body. If a customer qualifier or an `effectiveDateTime` is already present in the existing shopper context, its value is replaced by the corresponding value from the patch body. If a customer qualifers' value is set to `null` it's deleted from existing shopper context. If `effectiveDateTime` value is set to set to an empty string (\"\"), it's deleted from existing shopper context. If `effectiveDateTime` value is set to `null` it's ignored. If an `effectiveDateTime` or customer qualifiiers' value is new, it's added to the existing Shopper context.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param usid - The Shopper's unique identifier. It is a required parameter and is part of the response from the Guest or Registered User Shopper Login (SLAS) API call.
             * @param siteId - The identifer of the site that a request is being made in the context of. It is strongly recommended to pass in the siteId in the call.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type ShopperContext otherwise.
             *
             */
            updateShopperContext<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            usid: string
                            siteId?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: ShopperContext
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : ShopperContext>
        }
    }
    type CustomerAddress = {
        address1?: string
        address2?: string
        addressId: string
        city?: string
        companyName?: string
        countryCode: string
        creationDate?: unknown
        firstName?: string
        fullName?: string
        jobTitle?: string
        lastModified?: unknown
        lastName: string
        phone?: string
        postBox?: string
        postalCode?: string
        preferred?: boolean
        salutation?: string
        secondName?: string
        stateCode?: string
        suffix?: string
        suite?: string
        title?: string
    } & {
        [key: string]: unknown
    }
    type CustomerProductListResult = {
        limit: number
        data: Array<CustomerProductList>
        total: number
    } & {
        [key: string]: unknown
    }
    type OptionValue = {
        default?: boolean
        id: string
        name?: string
        price?: number
    } & {
        [key: string]: unknown
    }
    type Master = {
        masterId: string
        orderable?: boolean
        price?: number
        priceMax?: number
        prices?: Record<string, unknown>
    } & {
        [key: string]: unknown
    }
    type OrderAddress$0 = {
        address1: string
        address2?: string
        city: string
        companyName?: string
        countryCode: string
        firstName: string
        fullName?: string
        id?: string
        jobTitle?: string
        lastName: string
        phone?: string
        postBox?: string
        postalCode: string
        salutation?: string
        secondName?: string
        stateCode?: string
        suffix?: string
        suite?: string
        title?: string
    } & {
        [key: string]: unknown
    }
    type PublicProductListResult = {
        limit: number
        data: Array<PublicProductListInfo>
        total: number
    } & {
        [key: string]: unknown
    }
    type BasketsResult$0 = {
        baskets?: Array<Basket>
        total: number
    } & {
        [key: string]: unknown
    }
    type TrustedSystemAuthRequest = {
        clientId: string
        login: string
    } & {
        [key: string]: unknown
    }
    type ResetPasswordRequest = {
        resetToken: string
        login: string
        newPassword: string
    } & {
        [key: string]: unknown
    }
    type PaymentCard$0 = {
        cardType: string
        creditCardExpired?: boolean
        creditCardToken?: string
        expirationMonth?: number
        expirationYear?: number
        holder?: string
        issueNumber?: string
        maskedNumber?: string
        numberLastDigits?: string
        validFromMonth?: number
        validFromYear?: number
    } & {
        [key: string]: unknown
    }
    type ShippingItem$0 = {
        adjustedTax: number
        basePrice: number
        itemId: string
        itemText: string
        price: number
        priceAdjustments: Array<PriceAdjustment>
        priceAfterItemDiscount: number
        shipmentId: string
        tax: number
        taxBasis: number
        taxClassId: string
        taxRate: number
    } & {
        [key: string]: unknown
    }
    type Discount$0 = {
        amount?: number
        percentage?: number
        priceBookId?: string
        type: string
    } & {
        [key: string]: unknown
    }
    type ResetPasswordToken = {
        login: string
        email: string
        resetToken: string
        expiresInMinutes: number
    } & {
        [key: string]: unknown
    }
    type CouponItem$0 = {
        code: string
        couponItemId?: string
        statusCode?: string
        valid?: boolean
    } & {
        [key: string]: unknown
    }
    type ShippingPromotion$0 = {
        calloutMsg: string
        promotionId: string
        promotionName: string
    } & {
        [key: string]: unknown
    }
    type VariationAttribute = {
        id: string
        name?: string
        values?: Array<VariationAttributeValue>
    } & {
        [key: string]: unknown
    }
    type ProductListShippingAddress = {
        addressId: string
        city?: string
        firstName?: string
        lastName?: string
    } & {
        [key: string]: unknown
    }
    type ProductItem$0 = {
        adjustedTax?: number
        basePrice?: number
        bonusDiscountLineItemId?: string
        bonusProductLineItem?: boolean
        bundledProductItems?: Array<ProductItem$0>
        gift?: boolean
        giftMessage?: string
        inventoryId?: string
        itemId?: string
        itemText?: string
        optionItems?: Array<OptionItem>
        price?: number
        priceAdjustments?: Array<PriceAdjustment>
        priceAfterItemDiscount?: number
        priceAfterOrderDiscount?: number
        productId?: string
        productListItem?: ProductListItemReference
        productName?: string
        quantity: number
        shipmentId?: string
        shippingItemId?: string
        tax?: number
        taxBasis?: number
        taxClassId?: string
        taxRate?: number
    } & {
        [key: string]: unknown
    }
    type CustomerProductListRegistrant = {
        email: string
        firstName: string
        lastName: string
        role: string
    } & {
        [key: string]: unknown
    }
    type PublicProductListInfo = {
        description?: string
        id: string
        name?: string
        title: string
        type: string
    } & {
        [key: string]: unknown
    }
    type CustomerPaymentCardRequest = {
        cardType: string
        creditCardToken?: string
        expirationMonth: number
        expirationYear: number
        holder: string
        issueNumber: string
        number: string
        validFromMonth: number
        validFromYear: number
    } & {
        [key: string]: unknown
    }
    type RecommendationType = {
        displayValue: string
        value: number
    } & {
        [key: string]: unknown
    }
    type OrderPaymentInstrument$0 = {
        amount: number
        authorizationStatus: Status
        bankRoutingNumber: string
        maskedGiftCertificateCode: string
        paymentBankAccount: PaymentBankAccount
        paymentCard: PaymentCard$0
        paymentInstrumentId: string
        paymentMethodId: string
    } & {
        [key: string]: unknown
    }
    type ProductType = {
        bundle: boolean
        item: boolean
        master: boolean
        option: boolean
        set: boolean
        variant: boolean
        variationGroup: boolean
    } & {
        [key: string]: unknown
    }
    type PaymentBankAccount = {
        driversLicenseLastDigits?: string
        driversLicenseStateCode?: string
        holder?: string
        maskedDriversLicense?: string
        maskedNumber?: string
        numberLastDigits?: string
    } & {
        [key: string]: unknown
    }
    type Recommendation = {
        calloutMsg?: string
        image?: Image
        longDescription?: string
        name?: string
        recommendationType: RecommendationType
        recommendedItemId?: string
        recommendedItemLink?: string
        shortDescription?: string
    } & {
        [key: string]: unknown
    }
    type Variant = {
        orderable?: boolean
        price?: number
        productId: string
        variationValues?: Record<string, unknown>
    } & {
        [key: string]: unknown
    }
    type BonusDiscountLineItem$0 = {
        bonusProducts: Array<ProductDetailsLink>
        couponCode: string
        id: string
        maxBonusItems: number
        promotionId: string
    } & {
        [key: string]: unknown
    }
    type CustomerPaymentInstrument = {
        bankRoutingNumber?: string
        creationDate?: unknown
        lastModified?: unknown
        maskedGiftCertificateCode?: string
        paymentBankAccount: PaymentBankAccount
        paymentCard: PaymentCard$0
        paymentInstrumentId: string
        paymentMethodId: string
    } & {
        [key: string]: unknown
    }
    type Shipment$0 = {
        adjustedMerchandizeTotalTax?: number
        adjustedShippingTotalTax?: number
        gift?: boolean
        giftMessage?: string
        merchandizeTotalTax?: number
        productSubTotal?: number
        productTotal?: number
        shipmentId?: string
        shipmentNo?: string
        shipmentTotal?: number
        shippingAddress?: OrderAddress$0
        shippingMethod?: ShippingMethod
        shippingStatus: string
        shippingTotal?: number
        shippingTotalTax?: number
        taxTotal?: number
        trackingNumber?: string
    } & {
        [key: string]: unknown
    }
    type CustomerInfo$0 = {
        customerId?: string
        customerName?: string
        customerNo: string
        email: string
    } & {
        [key: string]: unknown
    }
    type VariationGroup = {
        orderable: boolean
        price: number
        productId: string
        variationValues: Record<string, unknown>
    } & {
        [key: string]: unknown
    }
    type SimpleLink$0 = {
        link: string
    } & {
        [key: string]: unknown
    }
    type PaymentBankAccountRequest = {
        driversLicense: string
        driversLicenseStateCode: string
        holder: string
        number: string
    } & {
        [key: string]: unknown
    }
    type PriceAdjustment$0 = {
        appliedDiscount: Discount$0
        couponCode: string
        createdBy: string
        creationDate: unknown
        custom: boolean
        itemText: string
        lastModified: unknown
        manual: boolean
        price: number
        priceAdjustmentId: string
        promotionId: string
        promotionLink: string
        reasonCode: string
    } & {
        [key: string]: unknown
    }
    type PublicProductListItem = {
        id: string
        priority: number
        product?: Product
        type: string
    } & {
        [key: string]: unknown
    }
    type ProductDetailsLink$0 = {
        productDescription?: string
        productId: string
        productName?: string
        title?: string
    } & {
        [key: string]: unknown
    }
    type ProductLink = {
        sourceProductId: string
        sourceProductLink: string
        targetProductId: string
        targetProductLink: string
        type: string
    } & {
        [key: string]: unknown
    }
    type OptionItem$0 = {
        adjustedTax?: number
        basePrice?: number
        bonusDiscountLineItemId?: string
        bonusProductLineItem?: boolean
        bundledProductItems?: Array<ProductItem$0>
        gift?: boolean
        giftMessage?: string
        inventoryId?: string
        itemId?: string
        itemText?: string
        optionId: string
        optionItems?: Array<OptionItem$0>
        optionValueId: string
        price?: number
        priceAdjustments?: Array<PriceAdjustment$0>
        priceAfterItemDiscount?: number
        priceAfterOrderDiscount?: number
        productId?: string
        productListItem?: ProductListItemReference
        productName?: string
        quantity?: number
        shipmentId?: string
        shippingItemId?: string
        tax?: number
        taxBasis?: number
        taxClassId?: string
        taxRate?: number
    } & {
        [key: string]: unknown
    }
    type ShippingMethod$0 = {
        description?: string
        externalShippingMethod?: string
        id: string
        name?: string
        price?: number
        shippingPromotions?: Array<ShippingPromotion$0>
    } & {
        [key: string]: unknown
    }
    type ProductListEvent = {
        city?: string
        country?: string
        date?: unknown
        state?: string
        type: string
    } & {
        [key: string]: unknown
    }
    type PasswordChangeRequest = {
        currentPassword: string
        password: string
    } & {
        [key: string]: unknown
    }
    type AuthRequest = {
        type?: string
    } & {
        [key: string]: unknown
    }
    type Inventory = {
        ats?: number
        backorderable?: boolean
        id: string
        inStockDate?: unknown
        orderable?: boolean
        preorderable?: boolean
        stockLevel?: number
    } & {
        [key: string]: unknown
    }
    type CustomerProductList = {
        coRegistrant?: CustomerProductListRegistrant
        creationDate?: unknown
        currentShippingAddressInfo?: CustomerAddressInfo
        customerProductListItems?: Array<CustomerProductListItem>
        description?: string
        event?: ProductListEvent
        id?: string
        lastModified?: unknown
        name?: string
        postEventShippingAddressInfo?: CustomerAddressInfo
        productListShippingAddress?: ProductListShippingAddress
        public?: boolean
        registrant?: CustomerProductListRegistrant
        shippingAddressInfo?: CustomerAddressInfo
        type?: string
    } & {
        [key: string]: unknown
    }
    type Basket$0 = {
        adjustedMerchandizeTotalTax: number
        adjustedShippingTotalTax: number
        agentBasket: boolean
        basketId: string
        billingAddress?: OrderAddress$0
        bonusDiscountLineItems?: Array<BonusDiscountLineItem$0>
        channelType: string
        couponItems?: Array<CouponItem$0>
        creationDate: unknown
        currency: string
        customerInfo: CustomerInfo$0
        giftCertificateItems?: Array<GiftCertificateItem>
        inventoryReservationExpiry?: unknown
        lastModified: unknown
        merchandizeTotalTax: number
        notes: SimpleLink$0
        orderPriceAdjustments?: Array<PriceAdjustment$0>
        orderTotal: number
        paymentInstruments?: Array<OrderPaymentInstrument$0>
        productItems?: Array<ProductItem$0>
        productSubTotal: number
        productTotal: number
        shipments: Array<Shipment$0>
        shippingItems: Array<ShippingItem$0>
        shippingTotal: number
        shippingTotalTax: number
        sourceCode?: string
        taxTotal: number
        taxation: string
    } & {
        [key: string]: unknown
    }
    type CustomerPaymentInstrumentRequest = {
        bankRoutingNumber: string
        giftCertificateCode: string
        paymentBankAccount?: PaymentBankAccountRequest
        paymentCard: CustomerPaymentCardRequest
        paymentMethodId: string
    } & {
        [key: string]: unknown
    }
    type ImageGroup = {
        images: Array<Image>
        variationAttributes?: Array<VariationAttribute>
        viewType: string
    } & {
        [key: string]: unknown
    }
    type CustomerRegistration = {
        customer: Customer
        password: string
    } & {
        [key: string]: unknown
    }
    type Customer = {
        addresses?: Array<CustomerAddress>
        authType?: string
        birthday?: unknown
        companyName?: string
        creationDate?: unknown
        customerId?: string
        customerNo?: string
        email?: string
        enabled?: boolean
        fax?: string
        firstName?: string
        gender?: number
        jobTitle?: string
        lastLoginTime?: unknown
        lastModified?: unknown
        lastName?: string
        lastVisitTime?: unknown
        login?: string
        note?: string
        paymentInstruments?: Array<CustomerPaymentInstrument>
        phoneBusiness?: string
        phoneHome?: string
        phoneMobile?: string
        preferredLocale?: string
        previousLoginTime?: unknown
        previousVisitTime?: unknown
        salutation?: string
        secondName?: string
        suffix?: string
        title?: string
    } & {
        [key: string]: unknown
    }
    type PublicProductList = {
        coRegistrant?: ProductListRegistrant
        creationDate?: unknown
        description?: string
        event?: ProductListEvent
        id: string
        lastModified?: unknown
        name?: string
        productListItems?: Array<PublicProductListItem>
        productListShippingAddress?: ProductListShippingAddress
        public: boolean
        registrant?: ProductListRegistrant
        type: string
    } & {
        [key: string]: unknown
    }
    type Option = {
        description?: string
        id: string
        image?: string
        name?: string
        values?: Array<OptionValue>
    } & {
        [key: string]: unknown
    }
    type CustomerOrderResult = {
        limit: number
        data: Array<Order>
        offset: number
        total: number
    } & {
        [key: string]: unknown
    }
    type CustomerExtProfileRequest = {
        authenticationProviderId: string
        email?: string
        externalId: string
        firstName?: string
        lastName?: string
    } & {
        [key: string]: unknown
    }
    type GiftCertificateItem$0 = {
        amount: number
        giftCertificateItemId?: string
        message?: string
        recipientEmail: string
        recipientName?: string
        senderName?: string
        shipmentId?: string
    } & {
        [key: string]: unknown
    }
    type CustomerExternalProfile = {
        customerId: string
        authenticationProviderId: string
        email?: string
        externalId: string
        firstName?: string
        lastName?: string
    } & {
        [key: string]: unknown
    }
    type CustomerAddressInfo = {
        addressId: string
        title: string
    } & {
        [key: string]: unknown
    }
    type ResetPasswordTokenRequest = {
        login: string
    } & {
        [key: string]: unknown
    }
    type ProductListLink$0 = {
        description: string
        link: string
        name: string
        public: boolean
        title: string
        type: string
    } & {
        [key: string]: unknown
    }
    type ProductListRegistrant = {
        firstName: string
        lastName: string
        role: string
    } & {
        [key: string]: unknown
    }
    type Order$0 = {
        adjustedMerchandizeTotalTax?: number
        adjustedShippingTotalTax?: number
        billingAddress?: OrderAddress$0
        bonusDiscountLineItems?: Array<BonusDiscountLineItem$0>
        channelType?: string
        confirmationStatus: string
        couponItems?: Array<CouponItem$0>
        createdBy?: string
        creationDate?: unknown
        currency?: string
        customerInfo?: CustomerInfo$0
        customerName?: string
        exportStatus: string
        externalOrderStatus?: string
        giftCertificateItems?: Array<GiftCertificateItem$0>
        globalPartyId?: string
        lastModified?: unknown
        merchandizeTotalTax?: number
        notes?: SimpleLink$0
        orderNo?: string
        orderPriceAdjustments?: Array<PriceAdjustment$0>
        orderToken?: string
        orderTotal?: number
        paymentInstruments?: Array<OrderPaymentInstrument$0>
        paymentStatus: string
        productItems?: Array<ProductItem$0>
        productSubTotal?: number
        productTotal?: number
        shipments?: Array<Shipment$0>
        shippingItems?: Array<ShippingItem$0>
        shippingStatus: string
        shippingTotal?: number
        shippingTotalTax?: number
        siteId?: string
        sourceCode?: string
        status: string
        taxTotal?: number
        taxation?: string
    } & {
        [key: string]: unknown
    }
    type Product = {
        brand?: string
        bundledProducts?: Array<BundledProduct>
        currency?: string
        ean?: string
        fetchDate?: number
        id: string
        imageGroups?: Array<ImageGroup>
        inventories?: Array<Inventory>
        inventory?: Inventory
        longDescription?: string
        manufacturerName?: string
        manufacturerSku?: string
        master?: Master
        minOrderQuantity?: number
        name?: string
        options?: Array<Option>
        pageDescription?: string
        pageKeywords?: string
        pageTitle?: string
        price?: number
        priceMax?: number
        prices?: Record<string, unknown>
        primaryCategoryId?: string
        productLinks?: Array<ProductLink>
        productPromotions?: Array<ProductPromotion>
        recommendations?: Array<Recommendation>
        setProducts?: Array<Product>
        shortDescription?: string
        stepQuantity?: number
        type?: ProductType
        unit?: string
        upc?: string
        validFrom?: unknown
        validTo?: unknown
        variants?: Array<Variant>
        variationAttributes?: Array<VariationAttribute>
        variationGroups?: Array<VariationGroup>
        variationValues?: Record<string, unknown>
    } & {
        [key: string]: unknown
    }
    type Image = {
        alt?: string
        disBaseLink?: string
        link: string
        title?: string
    } & {
        [key: string]: unknown
    }
    type VariationAttributeValue = {
        description?: string
        image?: Image
        imageSwatch?: Image
        name?: string
        orderable?: boolean
        value: string
    } & {
        [key: string]: unknown
    }
    type ProductPromotion = {
        calloutMsg: string
        promotionId: string
        promotionalPrice: number
    } & {
        [key: string]: unknown
    }
    type BundledProduct = {
        id: string
        product: Product
        quantity: number
    } & {
        [key: string]: unknown
    }
    type Status$0 = {
        code: string
        message: string
        status: number
    } & {
        [key: string]: unknown
    }
    type CustomerProductListItem = {
        id?: string
        priority: number
        product?: Product
        productId?: string
        public: boolean
        purchasedQuantity?: number
        quantity: number
        type?: string
    } & {
        [key: string]: unknown
    }
    type ProductListItemReference$0 = {
        id: string
        priority?: number
        productList?: ProductListLink$0
        public?: boolean
        purchasedQuantity?: number
        quantity?: number
        type?: string
    } & {
        [key: string]: unknown
    }
    type RangeFilter$1 = {
        [key: string]: unknown
    }
    type BoolFilter$1 = {
        filters?: Array<Filter$0>
        operator: string
    } & {
        [key: string]: unknown
    }
    type MatchAllQuery$1 = Record<string, unknown>
    type FilteredQuery$1 = {
        filter: Filter$0
        query: Query$0
    } & {
        [key: string]: unknown
    }
    type QueryFilter$1 = {
        query: Query$0
    } & {
        [key: string]: unknown
    }
    type Query$1 = {
        boolQuery?: BoolQuery$0
        filteredQuery?: FilteredQuery$1
        matchAllQuery?: MatchAllQuery$1
        nestedQuery?: NestedQuery$0
        termQuery?: TermQuery$0
        textQuery?: TextQuery$0
    } & {
        [key: string]: unknown
    }
    type TermQuery$1 = {
        fields: Array<string>
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TermFilter$1 = {
        field: string
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TextQuery$1 = {
        fields: Array<string>
        searchPhrase: string
    } & {
        [key: string]: unknown
    }
    type Range2Filter$1 = {
        filterMode?: string
        fromField: string
        fromInclusive?: boolean
        fromValue?: unknown
        toField: string
        toInclusive?: boolean
        toValue?: unknown
    } & {
        [key: string]: unknown
    }
    type BoolQuery$1 = {
        must?: Array<Query$1>
        mustNot?: Array<Query$1>
        should?: Array<Query$1>
    } & {
        [key: string]: unknown
    }
    type NestedQuery$1 = {
        path: string
        query: Query$1
        scoreMode?: string
    } & {
        [key: string]: unknown
    }
    type Filter$1 = {
        boolFilter?: BoolFilter$1
        queryFilter?: QueryFilter$1
        range2Filter?: Range2Filter$1
        rangeFilter?: RangeFilter$1
        termFilter?: TermFilter$1
    } & {
        [key: string]: unknown
    }
    type Sort$1 = {
        field: string
        sortOrder?: string
    } & {
        [key: string]: unknown
    }
    type L10nString$1 = Record<string, unknown>
    type PropertyValueDefinition$1 = {
        description: L10nString$1
        displayValue: L10nString$1
        id: string
        position?: number
        value: string
    }
    /**
     * All path parameters that are used by at least one ShopperCustomers method.
     */
    type ShopperCustomersPathParameters = {
        organizationId?: string
        customerId?: string
        addressName?: string
        paymentInstrumentId?: string
        listId?: string
        itemId?: string
    }
    /**
     * All query parameters that are used by at least one ShopperCustomers method.
     */
    type ShopperCustomersQueryParameters = {
        siteId?: string
        clientId?: string
        externalId?: string
        authenticationProviderId?: string
        crossSites?: boolean
        from?: string
        until?: string
        status?: string
        offset?: unknown
        limit?: number
        email?: string
        firstName?: string
        lastName?: string
    }
    /**
     * All parameters that are used by ShopperCustomers.
     */
    type ShopperCustomersParameters = ShopperCustomersPathParameters &
        BaseUriParameters &
        ShopperCustomersQueryParameters
    /**
     * [Shopper Customers](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-customers:Summary)
     * ==================================
     *
     * *Allow customers to manage their own profiles and product lists.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperCustomers } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperCustomersClient = new ShopperCustomers(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 0.0.43<br />
     * Last Updated: <br />
     * </span>
     
     *
     
     */
    declare class ShopperCustomers<
        ConfigParameters extends ShopperCustomersParameters & Record<string, unknown>
    > {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string
        }
        static readonly defaultBaseUri =
            'https://{shortCode}.api.commercecloud.salesforce.com/customer/shopper-customers/{version}'
        constructor(config: ClientConfigInit<ConfigParameters>)
        /**
         * Registers a new customer. The mandatory data are the credentials, profile last name, and email. This requires a JSON Web Token (JWT) which needs to be obtained using the POST /customers/auth API with type \"guest\", or from the Shopper Login (SLAS) API.
         *
         * If you would like to get a raw Response object use the other registerCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Customer.
         *
         */
        registerCustomer(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerRegistration
            }>
        ): Promise<Customer>
        /**
         * Registers a new customer. The mandatory data are the credentials, profile last name, and email. This requires a JSON Web Token (JWT) which needs to be obtained using the POST /customers/auth API with type \"guest\", or from the Shopper Login (SLAS) API.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
         *
         */
        registerCustomer<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerRegistration
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Customer>
        /**
         * 🚨 **DEPRECATION NOTICE**
         
         To enhance the security and availability of Salesforce services, this endpoint is now **deprecated**, and **we plan to remove it in mid-2022**. This endpoint is not available to new customers, and we discourage existing customers from using it. Instead, we strongly recommend using the endpoints of the [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary) (SLAS) because they meet our rigorous standards for security and availability.
         
         ---
         
         Log the user out.
         *
         * If you would like to get a raw Response object use the other invalidateCustomerAuth function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        invalidateCustomerAuth(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<void>
        /**
         * 🚨 **DEPRECATION NOTICE**
         
         To enhance the security and availability of Salesforce services, this endpoint is now **deprecated**, and **we plan to remove it in mid-2022**. This endpoint is not available to new customers, and we discourage existing customers from using it. Instead, we strongly recommend using the endpoints of the [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary) (SLAS) because they meet our rigorous standards for security and availability.
         
         ---
         
         Log the user out.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        invalidateCustomerAuth<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
        /**
         * 🚨 **DEPRECATION NOTICE**
         
         To enhance the security and availability of Salesforce services, this endpoint is now **deprecated**, and **we plan to remove it in mid-2022**. This endpoint is not available to new customers, and we discourage existing customers from using it. Instead, we strongly recommend using the endpoints of the [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary) (SLAS) because they meet our rigorous standards for security and availability.
         
         ---
         
         Obtains a new JSON Web Token (JWT) for a guest or registered
         customer. Tokens are returned as an HTTP `Authorization: Bearer` response
         header entry. The following kinds of request are supported, as specified by the
         `type`:
         
         - `\{\"type\": \"guest\"\}` → Creates a guest (non-authenticated) customer and returns a token for the customer.
         - `\{\"type\": \"credentials\"\}` → Authenticates credentials passed in the `HTTP Authorization: Basic` request header and returns a token for a successfully authenticated customer (otherwise, it throws an `AuthenticationFailedException`). This type of request also updates profile attributes for the customer (for example, `last-visited`) and handles the maximum number of failed login attempts.
         - `\{\"type\": \"refresh\"\}` → Examines the token passed in the `HTTP Authorization: Bearer` request header. If valid, a new token is returned with an updated expiry time.
         
         The JWT contains 3 sections:
         
         1. Header: Specifies token type and algorithm used.
         2. Payload: Contains customer information, client ID, issue, and expiration time.
         3. Signature: Records the token signature.
         
         A token is created and returned to the client whenever a registered customer logs in (`credentials` type) or a guest customer requests it (`guest` type). The token is returned in the response header as `Authorization: Bearer --token--`.
         
         The client has to include the token in the request header as `Authorization: Bearer --token--` in any follow-up request. The server declines any follow-up requests without a token. The server declines any requests that cannot be verified based on the token signature or expiration time. A token nearing its expiration time should be exchanged for a new one (`refresh` type).
         *
         * If you would like to get a raw Response object use the other authorizeCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param clientId - Client ID for application identification
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Customer.
         *
         */
        authorizeCustomer(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        clientId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: AuthRequest
            }>
        ): Promise<Customer>
        /**
         * 🚨 **DEPRECATION NOTICE**
         
         To enhance the security and availability of Salesforce services, this endpoint is now **deprecated**, and **we plan to remove it in mid-2022**. This endpoint is not available to new customers, and we discourage existing customers from using it. Instead, we strongly recommend using the endpoints of the [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary) (SLAS) because they meet our rigorous standards for security and availability.
         
         ---
         
         Obtains a new JSON Web Token (JWT) for a guest or registered
         customer. Tokens are returned as an HTTP `Authorization: Bearer` response
         header entry. The following kinds of request are supported, as specified by the
         `type`:
         
         - `\{\"type\": \"guest\"\}` → Creates a guest (non-authenticated) customer and returns a token for the customer.
         - `\{\"type\": \"credentials\"\}` → Authenticates credentials passed in the `HTTP Authorization: Basic` request header and returns a token for a successfully authenticated customer (otherwise, it throws an `AuthenticationFailedException`). This type of request also updates profile attributes for the customer (for example, `last-visited`) and handles the maximum number of failed login attempts.
         - `\{\"type\": \"refresh\"\}` → Examines the token passed in the `HTTP Authorization: Bearer` request header. If valid, a new token is returned with an updated expiry time.
         
         The JWT contains 3 sections:
         
         1. Header: Specifies token type and algorithm used.
         2. Payload: Contains customer information, client ID, issue, and expiration time.
         3. Signature: Records the token signature.
         
         A token is created and returned to the client whenever a registered customer logs in (`credentials` type) or a guest customer requests it (`guest` type). The token is returned in the response header as `Authorization: Bearer --token--`.
         
         The client has to include the token in the request header as `Authorization: Bearer --token--` in any follow-up request. The server declines any follow-up requests without a token. The server declines any requests that cannot be verified based on the token signature or expiration time. A token nearing its expiration time should be exchanged for a new one (`refresh` type).
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param clientId - Client ID for application identification
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
         *
         */
        authorizeCustomer<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        clientId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: AuthRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Customer>
        /**
         * 🚨 **DEPRECATION NOTICE**
         
         To enhance the security and availability of Salesforce services, this endpoint is now **deprecated**, and **we plan to remove it in mid-2022**. This endpoint is not available to new customers, and we discourage existing customers from using it. Instead, we strongly recommend using the endpoints of the [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary) (SLAS) because they meet our rigorous standards for security and availability.
         
         ---
         
         Obtain the JSON Web Token (JWT) for registered customers whose credentials are stored using a third party system. Accepts `loginId` and
         `clientId`, returns a customer object in the response body and the JWT generated against the `clientId` in the response header.
         *
         * If you would like to get a raw Response object use the other authorizeTrustedSystem function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Customer.
         *
         */
        authorizeTrustedSystem(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: TrustedSystemAuthRequest
            }>
        ): Promise<Customer>
        /**
         * 🚨 **DEPRECATION NOTICE**
         
         To enhance the security and availability of Salesforce services, this endpoint is now **deprecated**, and **we plan to remove it in mid-2022**. This endpoint is not available to new customers, and we discourage existing customers from using it. Instead, we strongly recommend using the endpoints of the [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary) (SLAS) because they meet our rigorous standards for security and availability.
         
         ---
         
         Obtain the JSON Web Token (JWT) for registered customers whose credentials are stored using a third party system. Accepts `loginId` and
         `clientId`, returns a customer object in the response body and the JWT generated against the `clientId` in the response header.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
         *
         */
        authorizeTrustedSystem<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: TrustedSystemAuthRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Customer>
        /**
         * Reset customer password, after obtaining a reset token. This is the second step in the reset customer password flow, where a customer password is reset by providing the new credentials along with a reset token. This call should be preceded by a call to the /create-reset-token endpoint.
         *
         * If you would like to get a raw Response object use the other resetPassword function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        resetPassword(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: ResetPasswordRequest
            }>
        ): Promise<void>
        /**
         * Reset customer password, after obtaining a reset token. This is the second step in the reset customer password flow, where a customer password is reset by providing the new credentials along with a reset token. This call should be preceded by a call to the /create-reset-token endpoint.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        resetPassword<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: ResetPasswordRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
        /**
         * Get reset password token. This is the first step in the reset customer password flow, where a password reset token is requested for future use to reset a customer password. This call should be followed by a call to the /reset endpoint.
         *
         * If you would like to get a raw Response object use the other getResetPasswordToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type ResetPasswordToken.
         *
         */
        getResetPasswordToken(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: ResetPasswordTokenRequest
            }>
        ): Promise<ResetPasswordToken>
        /**
         * Get reset password token. This is the first step in the reset customer password flow, where a password reset token is requested for future use to reset a customer password. This call should be followed by a call to the /reset endpoint.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type ResetPasswordToken otherwise.
         *
         */
        getResetPasswordToken<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: ResetPasswordTokenRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : ResetPasswordToken>
        /**
         * Registers a new external profile for a customer. This endpoint accepts a guest customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other registerExternalProfile function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type CustomerExternalProfile.
         *
         */
        registerExternalProfile(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerExtProfileRequest
            }>
        ): Promise<CustomerExternalProfile>
        /**
         * Registers a new external profile for a customer. This endpoint accepts a guest customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerExternalProfile otherwise.
         *
         */
        registerExternalProfile<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerExtProfileRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : CustomerExternalProfile>
        /**
         * Gets the new external profile for a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other getExternalProfile function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param externalId - The External ID of the customer.
         * @param authenticationProviderId - The authentication Provider Id.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CustomerExternalProfile.
         *
         */
        getExternalProfile(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        externalId: string
                        authenticationProviderId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<CustomerExternalProfile>
        /**
         * Gets the new external profile for a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param externalId - The External ID of the customer.
         * @param authenticationProviderId - The authentication Provider Id.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerExternalProfile otherwise.
         *
         */
        getExternalProfile<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        externalId: string
                        authenticationProviderId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : CustomerExternalProfile>
        /**
         * Gets a customer with all existing addresses and payment instruments associated with the requested customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other getCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Customer.
         *
         */
        getCustomer(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Customer>
        /**
         * Gets a customer with all existing addresses and payment instruments associated with the requested customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
         *
         */
        getCustomer<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Customer>
        /**
         * Updates a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other updateCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Customer.
         *
         */
        updateCustomer(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: Customer
            }>
        ): Promise<Customer>
        /**
         * Updates a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
         *
         */
        updateCustomer<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: Customer
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Customer>
        /**
         * Creates a new address with the given name for the given customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other createCustomerAddress function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type CustomerAddress.
         *
         */
        createCustomerAddress(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerAddress
            }>
        ): Promise<CustomerAddress>
        /**
         * Creates a new address with the given name for the given customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerAddress otherwise.
         *
         */
        createCustomerAddress<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerAddress
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : CustomerAddress>
        /**
         * Retrieves a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other getCustomerAddress function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param addressName - The name of the address to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CustomerAddress.
         *
         */
        getCustomerAddress(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        addressName: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<CustomerAddress>
        /**
         * Retrieves a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param addressName - The name of the address to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerAddress otherwise.
         *
         */
        getCustomerAddress<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        addressName: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : CustomerAddress>
        /**
         * Deletes a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other removeCustomerAddress function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param addressName - The name of the address to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        removeCustomerAddress(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        addressName: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<void>
        /**
         * Deletes a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param addressName - The name of the address to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        removeCustomerAddress<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        addressName: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
        /**
         * Updates a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other updateCustomerAddress function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param addressName - The name of the address to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type CustomerAddress.
         *
         */
        updateCustomerAddress(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        addressName: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerAddress
            }>
        ): Promise<CustomerAddress>
        /**
         * Updates a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param addressName - The name of the address to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerAddress otherwise.
         *
         */
        updateCustomerAddress<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        addressName: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerAddress
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : CustomerAddress>
        /**
         * Gets the baskets of a customer. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other getCustomerBaskets function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type BasketsResult.
         *
         */
        getCustomerBaskets(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<BasketsResult$0>
        /**
         * Gets the baskets of a customer. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type BasketsResult otherwise.
         *
         */
        getCustomerBaskets<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : BasketsResult$0>
        /**
         * Returns a pageable list of all customer's orders. The default page size is 10. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other getCustomerOrders function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param crossSites -
         * @param from -
         * @param until -
         * @param status -
         * @param siteId -
         * @param offset -
         * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 10.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CustomerOrderResult.
         *
         */
        getCustomerOrders(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        crossSites?: boolean
                        from?: string
                        until?: string
                        status?: string
                        siteId: string
                        offset?: unknown
                        limit?: number
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<CustomerOrderResult>
        /**
         * Returns a pageable list of all customer's orders. The default page size is 10. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param crossSites -
         * @param from -
         * @param until -
         * @param status -
         * @param siteId -
         * @param offset -
         * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 10.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerOrderResult otherwise.
         *
         */
        getCustomerOrders<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        crossSites?: boolean
                        from?: string
                        until?: string
                        status?: string
                        siteId: string
                        offset?: unknown
                        limit?: number
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : CustomerOrderResult>
        /**
         * Updates the customer's password. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other updateCustomerPassword function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        updateCustomerPassword(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: PasswordChangeRequest
            }>
        ): Promise<void>
        /**
         * Updates the customer's password. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        updateCustomerPassword<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: PasswordChangeRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
        /**
         * Adds a payment instrument to the customer information. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other createCustomerPaymentInstrument function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type CustomerPaymentInstrument.
         *
         */
        createCustomerPaymentInstrument(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerPaymentInstrumentRequest
            }>
        ): Promise<CustomerPaymentInstrument>
        /**
         * Adds a payment instrument to the customer information. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerPaymentInstrument otherwise.
         *
         */
        createCustomerPaymentInstrument<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerPaymentInstrumentRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : CustomerPaymentInstrument>
        /**
         * Deletes a customer's payment instrument. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other deleteCustomerPaymentInstrument function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        deleteCustomerPaymentInstrument(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        paymentInstrumentId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<void>
        /**
         * Deletes a customer's payment instrument. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        deleteCustomerPaymentInstrument<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        paymentInstrumentId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
        /**
         * Retrieves a customer's payment instrument by its ID. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * If you would like to get a raw Response object use the other getCustomerPaymentInstrument function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CustomerPaymentInstrument.
         *
         */
        getCustomerPaymentInstrument(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        paymentInstrumentId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<CustomerPaymentInstrument>
        /**
         * Retrieves a customer's payment instrument by its ID. This endpoint accepts a registered customer ShopperToken (JWT) only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerPaymentInstrument otherwise.
         *
         */
        getCustomerPaymentInstrument<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        paymentInstrumentId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : CustomerPaymentInstrument>
        /**
         * Returns all customer product lists. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other getCustomerProductLists function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CustomerProductListResult.
         *
         */
        getCustomerProductLists(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<CustomerProductListResult>
        /**
         * Returns all customer product lists. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListResult otherwise.
         *
         */
        getCustomerProductLists<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : CustomerProductListResult>
        /**
         * Creates a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other createCustomerProductList function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type CustomerProductList.
         *
         */
        createCustomerProductList(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerProductList
            }>
        ): Promise<CustomerProductList>
        /**
         * Creates a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductList otherwise.
         *
         */
        createCustomerProductList<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerProductList
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : CustomerProductList>
        /**
         * Deletes a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer  ShopperToken.
         *
         * If you would like to get a raw Response object use the other deleteCustomerProductList function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        deleteCustomerProductList(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        listId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<void>
        /**
         * Deletes a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer  ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        deleteCustomerProductList<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        listId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
        /**
         * Returns a customer product list of the given customer and the items in the list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other getCustomerProductList function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CustomerProductList.
         *
         */
        getCustomerProductList(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        listId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<CustomerProductList>
        /**
         * Returns a customer product list of the given customer and the items in the list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductList otherwise.
         *
         */
        getCustomerProductList<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        listId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : CustomerProductList>
        /**
         * Changes a product list. Changeable properties are the name, description, and if the list is public. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other updateCustomerProductList function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type CustomerProductList.
         *
         */
        updateCustomerProductList(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        listId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerProductList
            }>
        ): Promise<CustomerProductList>
        /**
         * Changes a product list. Changeable properties are the name, description, and if the list is public. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductList otherwise.
         *
         */
        updateCustomerProductList<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        listId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerProductList
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : CustomerProductList>
        /**
         * Adds an item to the customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         
         Considered values from the request body are:
         
         - `type` → The type of the item to be added to the customer's product. Must be a valid type. Mandatory.
         list.
         - `priority` → The priority of the item to be added to the customer's product list.
         - `public` → The flag that determines whether the item to be added to the customer's product list is public.
         - `product_id` → The ID (SKU) of the product related to the item to be added to the customer's product list. A valid product ID, used for product item type only. Must be a valid product ID; otherwise, a `ProductListProductIdMissingException` or `ProductListProductNotFoundException` is thrown. Mandatory when item type is `product`.
         - `quantity` → Used for product item type only. This is the quantity of the item to be added to the customer's product list.
         
         You can also use a custom property of the form `c_\<CUSTOM_NAME\>`. The custom property must correspond to a custom attribute (`\<CUSTOM_NAME\>`) that is defined for `ProductListItem`. The value of this property must be valid for the type of custom attribute defined for `ProductListItem`.
         *
         * If you would like to get a raw Response object use the other createCustomerProductListItem function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type CustomerProductListItem.
         *
         */
        createCustomerProductListItem(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        listId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerProductListItem
            }>
        ): Promise<CustomerProductListItem>
        /**
         * Adds an item to the customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         
         Considered values from the request body are:
         
         - `type` → The type of the item to be added to the customer's product. Must be a valid type. Mandatory.
         list.
         - `priority` → The priority of the item to be added to the customer's product list.
         - `public` → The flag that determines whether the item to be added to the customer's product list is public.
         - `product_id` → The ID (SKU) of the product related to the item to be added to the customer's product list. A valid product ID, used for product item type only. Must be a valid product ID; otherwise, a `ProductListProductIdMissingException` or `ProductListProductNotFoundException` is thrown. Mandatory when item type is `product`.
         - `quantity` → Used for product item type only. This is the quantity of the item to be added to the customer's product list.
         
         You can also use a custom property of the form `c_\<CUSTOM_NAME\>`. The custom property must correspond to a custom attribute (`\<CUSTOM_NAME\>`) that is defined for `ProductListItem`. The value of this property must be valid for the type of custom attribute defined for `ProductListItem`.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListItem otherwise.
         *
         */
        createCustomerProductListItem<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        listId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerProductListItem
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : CustomerProductListItem>
        /**
         * Removes an item from a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other deleteCustomerProductListItem function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param itemId - The ID of the product list item to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
        deleteCustomerProductListItem(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        listId: string
                        itemId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<void>
        /**
         * Removes an item from a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param itemId - The ID of the product list item to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        deleteCustomerProductListItem<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        listId: string
                        itemId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
        /**
         * Returns an item of a customer product list and the actual product details like image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other getCustomerProductListItem function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param itemId - The ID of the product list item to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CustomerProductListItem.
         *
         */
        getCustomerProductListItem(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        listId: string
                        itemId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<CustomerProductListItem>
        /**
         * Returns an item of a customer product list and the actual product details like image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param itemId - The ID of the product list item to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListItem otherwise.
         *
         */
        getCustomerProductListItem<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        listId: string
                        itemId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : CustomerProductListItem>
        /**
         * Updates an item of a customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         Considered values from the request body are:
         
         priority: This is the priority of the customer's product list item.
         public: This is the flag whether the customer's product list item is public.
         quantity: This is the quantity of
         the customer's product list item. Used for product item type only.
         custom properties in the form c_\<CUSTOM_NAME\>: The custom property
         must correspond to a custom attribute (\<CUSTOM_NAME\>) defined for ProductListItem.
         The value of this property must be valid for the type of custom attribute defined for ProductListItem.
         *
         * If you would like to get a raw Response object use the other updateCustomerProductListItem function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param itemId - The ID of the product list item to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type CustomerProductListItem.
         *
         */
        updateCustomerProductListItem(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        listId: string
                        itemId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerProductListItem
            }>
        ): Promise<CustomerProductListItem>
        /**
         * Updates an item of a customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         Considered values from the request body are:
         
         priority: This is the priority of the customer's product list item.
         public: This is the flag whether the customer's product list item is public.
         quantity: This is the quantity of
         the customer's product list item. Used for product item type only.
         custom properties in the form c_\<CUSTOM_NAME\>: The custom property
         must correspond to a custom attribute (\<CUSTOM_NAME\>) defined for ProductListItem.
         The value of this property must be valid for the type of custom attribute defined for ProductListItem.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param customerId - The customer ID.
         * @param listId - The product list ID.
         * @param itemId - The ID of the product list item to update.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListItem otherwise.
         *
         */
        updateCustomerProductListItem<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        customerId: string
                        listId: string
                        itemId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: CustomerProductListItem
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : CustomerProductListItem>
        /**
         * Retrieves all public product lists as defined by the given search term (for example, email OR first name and last name). This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other getPublicProductListsBySearchTerm function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param email - The email address of the customer the product lists belong to.
         * @param firstName - The first name of the customer the product lists belong to.
         * @param lastName - The last name of the customer the product lists belong to.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PublicProductListResult.
         *
         */
        getPublicProductListsBySearchTerm(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        email?: string
                        firstName?: string
                        lastName?: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<PublicProductListResult>
        /**
         * Retrieves all public product lists as defined by the given search term (for example, email OR first name and last name). This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param email - The email address of the customer the product lists belong to.
         * @param firstName - The first name of the customer the product lists belong to.
         * @param lastName - The last name of the customer the product lists belong to.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PublicProductListResult otherwise.
         *
         */
        getPublicProductListsBySearchTerm<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        email?: string
                        firstName?: string
                        lastName?: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : PublicProductListResult>
        /**
         * Retrieves a public product list by ID and the items under that product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other getPublicProductList function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param listId - The ID of the list.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PublicProductList.
         *
         */
        getPublicProductList(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        listId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<PublicProductList>
        /**
         * Retrieves a public product list by ID and the items under that product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param listId - The ID of the list.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PublicProductList otherwise.
         *
         */
        getPublicProductList<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        listId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : PublicProductList>
        /**
         * Retrieves an item from a public product list and the actual product details like product, image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * If you would like to get a raw Response object use the other getProductListItem function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param listId - The ID of the list.
         * @param itemId - The ID of the item.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PublicProductListItem.
         *
         */
        getProductListItem(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        listId: string
                        itemId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<PublicProductListItem>
        /**
         * Retrieves an item from a public product list and the actual product details like product, image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param listId - The ID of the list.
         * @param itemId - The ID of the item.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PublicProductListItem otherwise.
         *
         */
        getProductListItem<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        listId: string
                        itemId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : PublicProductListItem>
    }
    declare namespace ShopperCustomersTypes {
        /*
         * Copyright (c) 2023, Salesforce, Inc.
         * All rights reserved.
         * SPDX-License-Identifier: BSD-3-Clause
         * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
         */
        /**
         * Makes a type easier to read.
         */
        type Prettify<T> = NonNullable<{
            [K in keyof T]: T[K]
        }>
        /**
         * Generates the types required on a method, based on those provided in the config.
         */
        type CompositeParameters<
            MethodParameters extends Record<string, unknown>,
            ConfigParameters extends Record<string, unknown>
        > = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>
        /**
         * If an object has a `parameters` property, and the `parameters` object has required properties,
         * then the `parameters` property on the root object is marked as required.
         */
        type RequireParametersUnlessAllAreOptional<
            T extends {
                parameters?: Record<string, unknown>
            }
        > = Record<string, never> extends NonNullable<T['parameters']>
            ? T
            : Prettify<T & Required<Pick<T, 'parameters'>>>
        /**
         * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
         * if not specified.
         */
        interface BaseUriParameters {
            shortCode: string
            version?: string // Optional, will default to "v1" if not provided.
        }
        /**
         * Generic interface for path parameters.
         */
        interface PathParameters {
            [key: string]: string | number | boolean
        }
        /**
         * Generic interface for query parameters.
         */
        interface QueryParameters {
            [key: string]: string | number | boolean | string[] | number[]
        }
        /**
         * Generic interface for all parameter types.
         */
        type UrlParameters = PathParameters | QueryParameters
        /**
         * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
         * it from the `RequestInit` provided by node-fetch.
         */
        type BrowserRequestInit = RequestInit
        /**
         * Any properties supported in either the browser or node are accepted.
         * Using the right properties in the right context is left to the user.
         */
        type FetchOptions = NodeRequestInit & BrowserRequestInit
        /**
         * Base options that can be passed to the `ClientConfig` class.
         */
        interface ClientConfigInit<Params extends BaseUriParameters> {
            baseUri?: string
            proxy?: string
            headers?: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions?: FetchOptions
            transformRequest?: (
                data: unknown,
                headers: {
                    [key: string]: string
                }
            ) => Required<FetchOptions>['body']
            throwOnBadResponse?: boolean
        }
        type FetchFunction = (
            input: RequestInfo,
            init?: FetchOptions | undefined
        ) => Promise<Response>
        /**
         * Configuration parameters common to Commerce SDK clients
         */
        class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
            baseUri?: string
            proxy?: string
            headers: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions: FetchOptions
            transformRequest: NonNullable<ClientConfigInit<Params>['transformRequest']>
            throwOnBadResponse: boolean
            constructor(config: ClientConfigInit<Params>)
            static readonly defaults: Pick<Required<ClientConfigInit<never>>, 'transformRequest'>
        }
        type CustomerAddress = {
            address1?: string
            address2?: string
            addressId: string
            city?: string
            companyName?: string
            countryCode: string
            creationDate?: unknown
            firstName?: string
            fullName?: string
            jobTitle?: string
            lastModified?: unknown
            lastName: string
            phone?: string
            postBox?: string
            postalCode?: string
            preferred?: boolean
            salutation?: string
            secondName?: string
            stateCode?: string
            suffix?: string
            suite?: string
            title?: string
        } & {
            [key: string]: unknown
        }
        type CustomerProductListResult = {
            limit: number
            data: Array<CustomerProductList>
            total: number
        } & {
            [key: string]: unknown
        }
        type CustomerProductListItemPurchase = {
            id: string
            orderNo: string
            productListItemId: string
            purchaserName: string
            quantity: number
        } & {
            [key: string]: unknown
        }
        type OptionValue = {
            default?: boolean
            id: string
            name?: string
            price?: number
        } & {
            [key: string]: unknown
        }
        type Master = {
            masterId: string
            orderable?: boolean
            price?: number
            priceMax?: number
            prices?: Record<string, unknown>
        } & {
            [key: string]: unknown
        }
        type OrderAddress = {
            address1: string
            address2?: string
            city: string
            companyName?: string
            countryCode: string
            firstName: string
            fullName?: string
            id?: string
            jobTitle?: string
            lastName: string
            phone?: string
            postBox?: string
            postalCode: string
            salutation?: string
            secondName?: string
            stateCode?: string
            suffix?: string
            suite?: string
            title?: string
        } & {
            [key: string]: unknown
        }
        type PublicProductListResult = {
            limit: number
            data: Array<PublicProductListInfo>
            total: number
        } & {
            [key: string]: unknown
        }
        type BasketsResult = {
            baskets?: Array<Basket$0>
            total: number
        } & {
            [key: string]: unknown
        }
        type TrustedSystemAuthRequest = {
            clientId: string
            login: string
        } & {
            [key: string]: unknown
        }
        type ResetPasswordRequest = {
            resetToken: string
            login: string
            newPassword: string
        } & {
            [key: string]: unknown
        }
        type PaymentCard = {
            cardType: string
            creditCardExpired?: boolean
            creditCardToken?: string
            expirationMonth?: number
            expirationYear?: number
            holder?: string
            issueNumber?: string
            maskedNumber?: string
            numberLastDigits?: string
            validFromMonth?: number
            validFromYear?: number
        } & {
            [key: string]: unknown
        }
        type ShippingItem = {
            adjustedTax: number
            basePrice: number
            itemId: string
            itemText: string
            price: number
            priceAdjustments: Array<PriceAdjustment$0>
            priceAfterItemDiscount: number
            shipmentId: string
            tax: number
            taxBasis: number
            taxClassId: string
            taxRate: number
        } & {
            [key: string]: unknown
        }
        type Discount = {
            amount?: number
            percentage?: number
            priceBookId?: string
            type: string
        } & {
            [key: string]: unknown
        }
        type ResetPasswordToken = {
            login: string
            email: string
            resetToken: string
            expiresInMinutes: number
        } & {
            [key: string]: unknown
        }
        type CouponItem = {
            code: string
            couponItemId?: string
            statusCode?: string
            valid?: boolean
        } & {
            [key: string]: unknown
        }
        type ShippingPromotion = {
            calloutMsg: string
            promotionId: string
            promotionName: string
        } & {
            [key: string]: unknown
        }
        type VariationAttribute = {
            id: string
            name?: string
            values?: Array<VariationAttributeValue>
        } & {
            [key: string]: unknown
        }
        type ProductListShippingAddress = {
            addressId: string
            city?: string
            firstName?: string
            lastName?: string
        } & {
            [key: string]: unknown
        }
        type ProductItem = {
            adjustedTax?: number
            basePrice?: number
            bonusDiscountLineItemId?: string
            bonusProductLineItem?: boolean
            bundledProductItems?: Array<ProductItem>
            gift?: boolean
            giftMessage?: string
            inventoryId?: string
            itemId?: string
            itemText?: string
            optionItems?: Array<OptionItem$0>
            price?: number
            priceAdjustments?: Array<PriceAdjustment$0>
            priceAfterItemDiscount?: number
            priceAfterOrderDiscount?: number
            productId?: string
            productListItem?: ProductListItemReference$0
            productName?: string
            quantity: number
            shipmentId?: string
            shippingItemId?: string
            tax?: number
            taxBasis?: number
            taxClassId?: string
            taxRate?: number
        } & {
            [key: string]: unknown
        }
        type CustomerProductListRegistrant = {
            email: string
            firstName: string
            lastName: string
            role: string
        } & {
            [key: string]: unknown
        }
        type PublicProductListInfo = {
            description?: string
            id: string
            name?: string
            title: string
            type: string
        } & {
            [key: string]: unknown
        }
        type CustomerPaymentCardRequest = {
            cardType: string
            creditCardToken?: string
            expirationMonth: number
            expirationYear: number
            holder: string
            issueNumber: string
            number: string
            validFromMonth: number
            validFromYear: number
        } & {
            [key: string]: unknown
        }
        type RecommendationType = {
            displayValue: string
            value: number
        } & {
            [key: string]: unknown
        }
        type OrderPaymentInstrument = {
            amount: number
            authorizationStatus: Status$0
            bankRoutingNumber: string
            maskedGiftCertificateCode: string
            paymentBankAccount: PaymentBankAccount
            paymentCard: PaymentCard
            paymentInstrumentId: string
            paymentMethodId: string
        } & {
            [key: string]: unknown
        }
        type ProductType = {
            bundle: boolean
            item: boolean
            master: boolean
            option: boolean
            set: boolean
            variant: boolean
            variationGroup: boolean
        } & {
            [key: string]: unknown
        }
        type PaymentBankAccount = {
            driversLicenseLastDigits?: string
            driversLicenseStateCode?: string
            holder?: string
            maskedDriversLicense?: string
            maskedNumber?: string
            numberLastDigits?: string
        } & {
            [key: string]: unknown
        }
        type Recommendation = {
            calloutMsg?: string
            image?: Image
            longDescription?: string
            name?: string
            recommendationType: RecommendationType
            recommendedItemId?: string
            recommendedItemLink?: string
            shortDescription?: string
        } & {
            [key: string]: unknown
        }
        type Variant = {
            orderable?: boolean
            price?: number
            productId: string
            variationValues?: Record<string, unknown>
        } & {
            [key: string]: unknown
        }
        type BonusDiscountLineItem = {
            bonusProducts: Array<ProductDetailsLink$0>
            couponCode: string
            id: string
            maxBonusItems: number
            promotionId: string
        } & {
            [key: string]: unknown
        }
        type CustomerPaymentInstrument = {
            bankRoutingNumber?: string
            creationDate?: unknown
            lastModified?: unknown
            maskedGiftCertificateCode?: string
            paymentBankAccount: PaymentBankAccount
            paymentCard: PaymentCard
            paymentInstrumentId: string
            paymentMethodId: string
        } & {
            [key: string]: unknown
        }
        type Shipment = {
            adjustedMerchandizeTotalTax?: number
            adjustedShippingTotalTax?: number
            gift?: boolean
            giftMessage?: string
            merchandizeTotalTax?: number
            productSubTotal?: number
            productTotal?: number
            shipmentId?: string
            shipmentNo?: string
            shipmentTotal?: number
            shippingAddress?: OrderAddress
            shippingMethod?: ShippingMethod$0
            shippingStatus: string
            shippingTotal?: number
            shippingTotalTax?: number
            taxTotal?: number
            trackingNumber?: string
        } & {
            [key: string]: unknown
        }
        type CustomerInfo = {
            customerId?: string
            customerName?: string
            customerNo: string
            email: string
        } & {
            [key: string]: unknown
        }
        type VariationGroup = {
            orderable: boolean
            price: number
            productId: string
            variationValues: Record<string, unknown>
        } & {
            [key: string]: unknown
        }
        type SimpleLink = {
            link: string
        } & {
            [key: string]: unknown
        }
        type PaymentBankAccountRequest = {
            driversLicense: string
            driversLicenseStateCode: string
            holder: string
            number: string
        } & {
            [key: string]: unknown
        }
        type PriceAdjustment = {
            appliedDiscount: Discount
            couponCode: string
            createdBy: string
            creationDate: unknown
            custom: boolean
            itemText: string
            lastModified: unknown
            manual: boolean
            price: number
            priceAdjustmentId: string
            promotionId: string
            promotionLink: string
            reasonCode: string
        } & {
            [key: string]: unknown
        }
        type PublicProductListItem = {
            id: string
            priority: number
            product?: Product
            type: string
        } & {
            [key: string]: unknown
        }
        type ProductDetailsLink = {
            productDescription?: string
            productId: string
            productName?: string
            title?: string
        } & {
            [key: string]: unknown
        }
        type ProductLink = {
            sourceProductId: string
            sourceProductLink: string
            targetProductId: string
            targetProductLink: string
            type: string
        } & {
            [key: string]: unknown
        }
        type OptionItem = {
            adjustedTax?: number
            basePrice?: number
            bonusDiscountLineItemId?: string
            bonusProductLineItem?: boolean
            bundledProductItems?: Array<ProductItem>
            gift?: boolean
            giftMessage?: string
            inventoryId?: string
            itemId?: string
            itemText?: string
            optionId: string
            optionItems?: Array<OptionItem>
            optionValueId: string
            price?: number
            priceAdjustments?: Array<PriceAdjustment>
            priceAfterItemDiscount?: number
            priceAfterOrderDiscount?: number
            productId?: string
            productListItem?: ProductListItemReference$0
            productName?: string
            quantity?: number
            shipmentId?: string
            shippingItemId?: string
            tax?: number
            taxBasis?: number
            taxClassId?: string
            taxRate?: number
        } & {
            [key: string]: unknown
        }
        type ShippingMethod = {
            description?: string
            externalShippingMethod?: string
            id: string
            name?: string
            price?: number
            shippingPromotions?: Array<ShippingPromotion>
        } & {
            [key: string]: unknown
        }
        type ProductListEvent = {
            city?: string
            country?: string
            date?: unknown
            state?: string
            type: string
        } & {
            [key: string]: unknown
        }
        type PasswordChangeRequest = {
            currentPassword: string
            password: string
        } & {
            [key: string]: unknown
        }
        type AuthRequest = {
            type?: string
        } & {
            [key: string]: unknown
        }
        type Inventory = {
            ats?: number
            backorderable?: boolean
            id: string
            inStockDate?: unknown
            orderable?: boolean
            preorderable?: boolean
            stockLevel?: number
        } & {
            [key: string]: unknown
        }
        type CustomerProductList = {
            coRegistrant?: CustomerProductListRegistrant
            creationDate?: unknown
            currentShippingAddressInfo?: CustomerAddressInfo
            customerProductListItems?: Array<CustomerProductListItem>
            description?: string
            event?: ProductListEvent
            id?: string
            lastModified?: unknown
            name?: string
            postEventShippingAddressInfo?: CustomerAddressInfo
            productListShippingAddress?: ProductListShippingAddress
            public?: boolean
            registrant?: CustomerProductListRegistrant
            shippingAddressInfo?: CustomerAddressInfo
            type?: string
        } & {
            [key: string]: unknown
        }
        type Basket = {
            adjustedMerchandizeTotalTax: number
            adjustedShippingTotalTax: number
            agentBasket: boolean
            basketId: string
            billingAddress?: OrderAddress
            bonusDiscountLineItems?: Array<BonusDiscountLineItem>
            channelType: string
            couponItems?: Array<CouponItem>
            creationDate: unknown
            currency: string
            customerInfo: CustomerInfo
            giftCertificateItems?: Array<GiftCertificateItem$0>
            inventoryReservationExpiry?: unknown
            lastModified: unknown
            merchandizeTotalTax: number
            notes: SimpleLink
            orderPriceAdjustments?: Array<PriceAdjustment>
            orderTotal: number
            paymentInstruments?: Array<OrderPaymentInstrument>
            productItems?: Array<ProductItem>
            productSubTotal: number
            productTotal: number
            shipments: Array<Shipment>
            shippingItems: Array<ShippingItem>
            shippingTotal: number
            shippingTotalTax: number
            sourceCode?: string
            taxTotal: number
            taxation: string
        } & {
            [key: string]: unknown
        }
        type CustomerPaymentInstrumentRequest = {
            bankRoutingNumber: string
            giftCertificateCode: string
            paymentBankAccount?: PaymentBankAccountRequest
            paymentCard: CustomerPaymentCardRequest
            paymentMethodId: string
        } & {
            [key: string]: unknown
        }
        type ImageGroup = {
            images: Array<Image>
            variationAttributes?: Array<VariationAttribute>
            viewType: string
        } & {
            [key: string]: unknown
        }
        type CustomerRegistration = {
            customer: Customer
            password: string
        } & {
            [key: string]: unknown
        }
        type Customer = {
            addresses?: Array<CustomerAddress>
            authType?: string
            birthday?: unknown
            companyName?: string
            creationDate?: unknown
            customerId?: string
            customerNo?: string
            email?: string
            enabled?: boolean
            fax?: string
            firstName?: string
            gender?: number
            jobTitle?: string
            lastLoginTime?: unknown
            lastModified?: unknown
            lastName?: string
            lastVisitTime?: unknown
            login?: string
            note?: string
            paymentInstruments?: Array<CustomerPaymentInstrument>
            phoneBusiness?: string
            phoneHome?: string
            phoneMobile?: string
            preferredLocale?: string
            previousLoginTime?: unknown
            previousVisitTime?: unknown
            salutation?: string
            secondName?: string
            suffix?: string
            title?: string
        } & {
            [key: string]: unknown
        }
        type PublicProductList = {
            coRegistrant?: ProductListRegistrant
            creationDate?: unknown
            description?: string
            event?: ProductListEvent
            id: string
            lastModified?: unknown
            name?: string
            productListItems?: Array<PublicProductListItem>
            productListShippingAddress?: ProductListShippingAddress
            public: boolean
            registrant?: ProductListRegistrant
            type: string
        } & {
            [key: string]: unknown
        }
        type Option = {
            description?: string
            id: string
            image?: string
            name?: string
            values?: Array<OptionValue>
        } & {
            [key: string]: unknown
        }
        type CustomerOrderResult = {
            limit: number
            data: Array<Order$0>
            offset: number
            total: number
        } & {
            [key: string]: unknown
        }
        type CustomerExtProfileRequest = {
            authenticationProviderId: string
            email?: string
            externalId: string
            firstName?: string
            lastName?: string
        } & {
            [key: string]: unknown
        }
        type GiftCertificateItem = {
            amount: number
            giftCertificateItemId?: string
            message?: string
            recipientEmail: string
            recipientName?: string
            senderName?: string
            shipmentId?: string
        } & {
            [key: string]: unknown
        }
        type CustomerExternalProfile = {
            customerId: string
            authenticationProviderId: string
            email?: string
            externalId: string
            firstName?: string
            lastName?: string
        } & {
            [key: string]: unknown
        }
        type CustomerAddressInfo = {
            addressId: string
            title: string
        } & {
            [key: string]: unknown
        }
        type ResetPasswordTokenRequest = {
            login: string
        } & {
            [key: string]: unknown
        }
        type ProductListLink = {
            description: string
            link: string
            name: string
            public: boolean
            title: string
            type: string
        } & {
            [key: string]: unknown
        }
        type ProductListRegistrant = {
            firstName: string
            lastName: string
            role: string
        } & {
            [key: string]: unknown
        }
        type Order = {
            adjustedMerchandizeTotalTax?: number
            adjustedShippingTotalTax?: number
            billingAddress?: OrderAddress
            bonusDiscountLineItems?: Array<BonusDiscountLineItem>
            channelType?: string
            confirmationStatus: string
            couponItems?: Array<CouponItem>
            createdBy?: string
            creationDate?: unknown
            currency?: string
            customerInfo?: CustomerInfo
            customerName?: string
            exportStatus: string
            externalOrderStatus?: string
            giftCertificateItems?: Array<GiftCertificateItem>
            globalPartyId?: string
            lastModified?: unknown
            merchandizeTotalTax?: number
            notes?: SimpleLink
            orderNo?: string
            orderPriceAdjustments?: Array<PriceAdjustment>
            orderToken?: string
            orderTotal?: number
            paymentInstruments?: Array<OrderPaymentInstrument>
            paymentStatus: string
            productItems?: Array<ProductItem>
            productSubTotal?: number
            productTotal?: number
            shipments?: Array<Shipment>
            shippingItems?: Array<ShippingItem>
            shippingStatus: string
            shippingTotal?: number
            shippingTotalTax?: number
            siteId?: string
            sourceCode?: string
            status: string
            taxTotal?: number
            taxation?: string
        } & {
            [key: string]: unknown
        }
        type Product = {
            brand?: string
            bundledProducts?: Array<BundledProduct>
            currency?: string
            ean?: string
            fetchDate?: number
            id: string
            imageGroups?: Array<ImageGroup>
            inventories?: Array<Inventory>
            inventory?: Inventory
            longDescription?: string
            manufacturerName?: string
            manufacturerSku?: string
            master?: Master
            minOrderQuantity?: number
            name?: string
            options?: Array<Option>
            pageDescription?: string
            pageKeywords?: string
            pageTitle?: string
            price?: number
            priceMax?: number
            prices?: Record<string, unknown>
            primaryCategoryId?: string
            productLinks?: Array<ProductLink>
            productPromotions?: Array<ProductPromotion>
            recommendations?: Array<Recommendation>
            setProducts?: Array<Product>
            shortDescription?: string
            stepQuantity?: number
            type?: ProductType
            unit?: string
            upc?: string
            validFrom?: unknown
            validTo?: unknown
            variants?: Array<Variant>
            variationAttributes?: Array<VariationAttribute>
            variationGroups?: Array<VariationGroup>
            variationValues?: Record<string, unknown>
        } & {
            [key: string]: unknown
        }
        type Image = {
            alt?: string
            disBaseLink?: string
            link: string
            title?: string
        } & {
            [key: string]: unknown
        }
        type VariationAttributeValue = {
            description?: string
            image?: Image
            imageSwatch?: Image
            name?: string
            orderable?: boolean
            value: string
        } & {
            [key: string]: unknown
        }
        type ProductPromotion = {
            calloutMsg: string
            promotionId: string
            promotionalPrice: number
        } & {
            [key: string]: unknown
        }
        type BundledProduct = {
            id: string
            product: Product
            quantity: number
        } & {
            [key: string]: unknown
        }
        type Status = {
            code: string
            message: string
            status: number
        } & {
            [key: string]: unknown
        }
        type CustomerProductListItem = {
            id?: string
            priority: number
            product?: Product
            productId?: string
            public: boolean
            purchasedQuantity?: number
            quantity: number
            type?: string
        } & {
            [key: string]: unknown
        }
        type ProductListItemReference = {
            id: string
            priority?: number
            productList?: ProductListLink
            public?: boolean
            purchasedQuantity?: number
            quantity?: number
            type?: string
        } & {
            [key: string]: unknown
        }
        type ErrorResponse = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type ChangeControlled = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type RangeFilter = {
            [key: string]: unknown
        }
        type ChangeControlledDataType = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type Error = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type Money = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResult = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type SearchRequest = {
            limit?: number
            query: Query$1
            sorts?: Array<Sort$1>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type PropertyDefinition = {
            defaultValue?: PropertyValueDefinition$1
            id?: string
            name: L10nString$1
            description: L10nString$1
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString$1
            possibleValues?: Array<PropertyValueDefinition$1>
            type: string
            visible?: boolean
        } & {
            [key: string]: unknown
        }
        type LocalizedString = Record<string, unknown>
        type PaginatedSearchResult = {
            query: Query$1
            sorts?: Array<Sort$1>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type ClosedObject = Record<string, unknown>
        type OpenObject = Record<string, unknown>
        type NoPropertiesAllowed = Record<string, unknown>
        type SpecifiedPropertiesAllowed = Record<string, unknown>
        type BoolFilter = {
            filters?: Array<Filter$1>
            operator: string
        } & {
            [key: string]: unknown
        }
        type PaginatedSearchResultBase = {
            query: Query$1
            sorts?: Array<Sort$1>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type MatchAllQuery = Record<string, unknown>
        type FilteredQuery = {
            filter: Filter$1
            query: Query$1
        } & {
            [key: string]: unknown
        }
        type QueryFilter = {
            query: Query$1
        } & {
            [key: string]: unknown
        }
        type Query = {
            boolQuery?: BoolQuery$1
            filteredQuery?: FilteredQuery
            matchAllQuery?: MatchAllQuery
            nestedQuery?: NestedQuery$1
            termQuery?: TermQuery$1
            textQuery?: TextQuery$1
        } & {
            [key: string]: unknown
        }
        type TermQuery = {
            fields: Array<string>
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TermFilter = {
            field: string
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TextQuery = {
            fields: Array<string>
            searchPhrase: string
        } & {
            [key: string]: unknown
        }
        type Range2Filter = {
            filterMode?: string
            fromField: string
            fromInclusive?: boolean
            fromValue?: unknown
            toField: string
            toInclusive?: boolean
            toValue?: unknown
        } & {
            [key: string]: unknown
        }
        type BoolQuery = {
            must?: Array<Query>
            mustNot?: Array<Query>
            should?: Array<Query>
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResultBase = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type NestedQuery = {
            path: string
            query: Query
            scoreMode?: string
        } & {
            [key: string]: unknown
        }
        type Filter = {
            boolFilter?: BoolFilter
            queryFilter?: QueryFilter
            range2Filter?: Range2Filter
            rangeFilter?: RangeFilter
            termFilter?: TermFilter
        } & {
            [key: string]: unknown
        }
        type Sort = {
            field: string
            sortOrder?: string
        } & {
            [key: string]: unknown
        }
        type SearchRequestBase = {
            limit?: number
            query: Query
            sorts?: Array<Sort>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type MoneyMnemonic = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type L10nString = Record<string, unknown>
        type AttributeDefinition = {
            defaultValue?: PropertyValueDefinition$1
            id?: string
            name: L10nString
            description: L10nString
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString
            possibleValues?: Array<PropertyValueDefinition$1>
            type: string
            visible?: boolean
        }
        type PropertyValueDefinition = {
            description: L10nString
            displayValue: L10nString
            id: string
            position?: number
            value: string
        }
        /**
         * All path parameters that are used by at least one ShopperCustomers method.
         */
        type ShopperCustomersPathParameters = {
            organizationId?: string
            customerId?: string
            addressName?: string
            paymentInstrumentId?: string
            listId?: string
            itemId?: string
        }
        /**
         * All query parameters that are used by at least one ShopperCustomers method.
         */
        type ShopperCustomersQueryParameters = {
            siteId?: string
            clientId?: string
            externalId?: string
            authenticationProviderId?: string
            crossSites?: boolean
            from?: string
            until?: string
            status?: string
            offset?: unknown
            limit?: number
            email?: string
            firstName?: string
            lastName?: string
        }
        /**
         * All parameters that are used by ShopperCustomers.
         */
        type ShopperCustomersParameters = ShopperCustomersPathParameters &
            BaseUriParameters &
            ShopperCustomersQueryParameters
        /**
         * [Shopper Customers](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-customers:Summary)
         * ==================================
         *
         * *Allow customers to manage their own profiles and product lists.*<br />
         *
         * Simple example:
         *
         * ```typescript
         *   import { ShopperCustomers } from "commerce-sdk-isomorphic";
         *
         *   const clientConfig = {
         *     parameters: {
         *       clientId: "XXXXXX",
         *       organizationId: "XXXX",
         *       shortCode: "XXX",
         *       siteId: "XX"
         *     }
         *   };
         *   const shopperCustomersClient = new ShopperCustomers(clientConfig);
         * ```
         *
         * <span style="font-size:.7em; display:block; text-align: right">
         * API Version: 0.0.43<br />
         * Last Updated: <br />
         * </span>
         
         *
         
         */
        class ShopperCustomers<
            ConfigParameters extends ShopperCustomersParameters & Record<string, unknown>
        > {
            // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
            clientConfig: ClientConfig<ConfigParameters> & {
                baseUri: string
            }
            static readonly defaultBaseUri =
                'https://{shortCode}.api.commercecloud.salesforce.com/customer/shopper-customers/{version}'
            constructor(config: ClientConfigInit<ConfigParameters>)
            /**
             * Registers a new customer. The mandatory data are the credentials, profile last name, and email. This requires a JSON Web Token (JWT) which needs to be obtained using the POST /customers/auth API with type \"guest\", or from the Shopper Login (SLAS) API.
             *
             * If you would like to get a raw Response object use the other registerCustomer function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type Customer.
             *
             */
            registerCustomer(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerRegistration
                }>
            ): Promise<Customer>
            /**
             * Registers a new customer. The mandatory data are the credentials, profile last name, and email. This requires a JSON Web Token (JWT) which needs to be obtained using the POST /customers/auth API with type \"guest\", or from the Shopper Login (SLAS) API.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
             *
             */
            registerCustomer<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerRegistration
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Customer>
            /**
             * 🚨 **DEPRECATION NOTICE**
             
             To enhance the security and availability of Salesforce services, this endpoint is now **deprecated**, and **we plan to remove it in mid-2022**. This endpoint is not available to new customers, and we discourage existing customers from using it. Instead, we strongly recommend using the endpoints of the [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary) (SLAS) because they meet our rigorous standards for security and availability.
             
             ---
             
             Log the user out.
             *
             * If you would like to get a raw Response object use the other invalidateCustomerAuth function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type void.
             *
             */
            invalidateCustomerAuth(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<void>
            /**
             * 🚨 **DEPRECATION NOTICE**
             
             To enhance the security and availability of Salesforce services, this endpoint is now **deprecated**, and **we plan to remove it in mid-2022**. This endpoint is not available to new customers, and we discourage existing customers from using it. Instead, we strongly recommend using the endpoints of the [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary) (SLAS) because they meet our rigorous standards for security and availability.
             
             ---
             
             Log the user out.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            invalidateCustomerAuth<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
             * 🚨 **DEPRECATION NOTICE**
             
             To enhance the security and availability of Salesforce services, this endpoint is now **deprecated**, and **we plan to remove it in mid-2022**. This endpoint is not available to new customers, and we discourage existing customers from using it. Instead, we strongly recommend using the endpoints of the [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary) (SLAS) because they meet our rigorous standards for security and availability.
             
             ---
             
             Obtains a new JSON Web Token (JWT) for a guest or registered
             customer. Tokens are returned as an HTTP `Authorization: Bearer` response
             header entry. The following kinds of request are supported, as specified by the
             `type`:
             
             - `\{\"type\": \"guest\"\}` → Creates a guest (non-authenticated) customer and returns a token for the customer.
             - `\{\"type\": \"credentials\"\}` → Authenticates credentials passed in the `HTTP Authorization: Basic` request header and returns a token for a successfully authenticated customer (otherwise, it throws an `AuthenticationFailedException`). This type of request also updates profile attributes for the customer (for example, `last-visited`) and handles the maximum number of failed login attempts.
             - `\{\"type\": \"refresh\"\}` → Examines the token passed in the `HTTP Authorization: Bearer` request header. If valid, a new token is returned with an updated expiry time.
             
             The JWT contains 3 sections:
             
             1. Header: Specifies token type and algorithm used.
             2. Payload: Contains customer information, client ID, issue, and expiration time.
             3. Signature: Records the token signature.
             
             A token is created and returned to the client whenever a registered customer logs in (`credentials` type) or a guest customer requests it (`guest` type). The token is returned in the response header as `Authorization: Bearer --token--`.
             
             The client has to include the token in the request header as `Authorization: Bearer --token--` in any follow-up request. The server declines any follow-up requests without a token. The server declines any requests that cannot be verified based on the token signature or expiration time. A token nearing its expiration time should be exchanged for a new one (`refresh` type).
             *
             * If you would like to get a raw Response object use the other authorizeCustomer function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param clientId - Client ID for application identification
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type Customer.
             *
             */
            authorizeCustomer(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            clientId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: AuthRequest
                }>
            ): Promise<Customer>
            /**
             * 🚨 **DEPRECATION NOTICE**
             
             To enhance the security and availability of Salesforce services, this endpoint is now **deprecated**, and **we plan to remove it in mid-2022**. This endpoint is not available to new customers, and we discourage existing customers from using it. Instead, we strongly recommend using the endpoints of the [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary) (SLAS) because they meet our rigorous standards for security and availability.
             
             ---
             
             Obtains a new JSON Web Token (JWT) for a guest or registered
             customer. Tokens are returned as an HTTP `Authorization: Bearer` response
             header entry. The following kinds of request are supported, as specified by the
             `type`:
             
             - `\{\"type\": \"guest\"\}` → Creates a guest (non-authenticated) customer and returns a token for the customer.
             - `\{\"type\": \"credentials\"\}` → Authenticates credentials passed in the `HTTP Authorization: Basic` request header and returns a token for a successfully authenticated customer (otherwise, it throws an `AuthenticationFailedException`). This type of request also updates profile attributes for the customer (for example, `last-visited`) and handles the maximum number of failed login attempts.
             - `\{\"type\": \"refresh\"\}` → Examines the token passed in the `HTTP Authorization: Bearer` request header. If valid, a new token is returned with an updated expiry time.
             
             The JWT contains 3 sections:
             
             1. Header: Specifies token type and algorithm used.
             2. Payload: Contains customer information, client ID, issue, and expiration time.
             3. Signature: Records the token signature.
             
             A token is created and returned to the client whenever a registered customer logs in (`credentials` type) or a guest customer requests it (`guest` type). The token is returned in the response header as `Authorization: Bearer --token--`.
             
             The client has to include the token in the request header as `Authorization: Bearer --token--` in any follow-up request. The server declines any follow-up requests without a token. The server declines any requests that cannot be verified based on the token signature or expiration time. A token nearing its expiration time should be exchanged for a new one (`refresh` type).
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param clientId - Client ID for application identification
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
             *
             */
            authorizeCustomer<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            clientId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: AuthRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Customer>
            /**
             * 🚨 **DEPRECATION NOTICE**
             
             To enhance the security and availability of Salesforce services, this endpoint is now **deprecated**, and **we plan to remove it in mid-2022**. This endpoint is not available to new customers, and we discourage existing customers from using it. Instead, we strongly recommend using the endpoints of the [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary) (SLAS) because they meet our rigorous standards for security and availability.
             
             ---
             
             Obtain the JSON Web Token (JWT) for registered customers whose credentials are stored using a third party system. Accepts `loginId` and
             `clientId`, returns a customer object in the response body and the JWT generated against the `clientId` in the response header.
             *
             * If you would like to get a raw Response object use the other authorizeTrustedSystem function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type Customer.
             *
             */
            authorizeTrustedSystem(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TrustedSystemAuthRequest
                }>
            ): Promise<Customer>
            /**
             * 🚨 **DEPRECATION NOTICE**
             
             To enhance the security and availability of Salesforce services, this endpoint is now **deprecated**, and **we plan to remove it in mid-2022**. This endpoint is not available to new customers, and we discourage existing customers from using it. Instead, we strongly recommend using the endpoints of the [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary) (SLAS) because they meet our rigorous standards for security and availability.
             
             ---
             
             Obtain the JSON Web Token (JWT) for registered customers whose credentials are stored using a third party system. Accepts `loginId` and
             `clientId`, returns a customer object in the response body and the JWT generated against the `clientId` in the response header.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
             *
             */
            authorizeTrustedSystem<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TrustedSystemAuthRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Customer>
            /**
             * Reset customer password, after obtaining a reset token. This is the second step in the reset customer password flow, where a customer password is reset by providing the new credentials along with a reset token. This call should be preceded by a call to the /create-reset-token endpoint.
             *
             * If you would like to get a raw Response object use the other resetPassword function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type void.
             *
             */
            resetPassword(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: ResetPasswordRequest
                }>
            ): Promise<void>
            /**
             * Reset customer password, after obtaining a reset token. This is the second step in the reset customer password flow, where a customer password is reset by providing the new credentials along with a reset token. This call should be preceded by a call to the /create-reset-token endpoint.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            resetPassword<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: ResetPasswordRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
             * Get reset password token. This is the first step in the reset customer password flow, where a password reset token is requested for future use to reset a customer password. This call should be followed by a call to the /reset endpoint.
             *
             * If you would like to get a raw Response object use the other getResetPasswordToken function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type ResetPasswordToken.
             *
             */
            getResetPasswordToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: ResetPasswordTokenRequest
                }>
            ): Promise<ResetPasswordToken>
            /**
             * Get reset password token. This is the first step in the reset customer password flow, where a password reset token is requested for future use to reset a customer password. This call should be followed by a call to the /reset endpoint.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type ResetPasswordToken otherwise.
             *
             */
            getResetPasswordToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: ResetPasswordTokenRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : ResetPasswordToken>
            /**
             * Registers a new external profile for a customer. This endpoint accepts a guest customer ShopperToken (JWT) only.
             *
             * If you would like to get a raw Response object use the other registerExternalProfile function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type CustomerExternalProfile.
             *
             */
            registerExternalProfile(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerExtProfileRequest
                }>
            ): Promise<CustomerExternalProfile>
            /**
             * Registers a new external profile for a customer. This endpoint accepts a guest customer ShopperToken (JWT) only.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type CustomerExternalProfile otherwise.
             *
             */
            registerExternalProfile<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerExtProfileRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : CustomerExternalProfile>
            /**
             * Gets the new external profile for a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * If you would like to get a raw Response object use the other getExternalProfile function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param externalId - The External ID of the customer.
             * @param authenticationProviderId - The authentication Provider Id.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type CustomerExternalProfile.
             *
             */
            getExternalProfile(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            externalId: string
                            authenticationProviderId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<CustomerExternalProfile>
            /**
             * Gets the new external profile for a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param externalId - The External ID of the customer.
             * @param authenticationProviderId - The authentication Provider Id.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type CustomerExternalProfile otherwise.
             *
             */
            getExternalProfile<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            externalId: string
                            authenticationProviderId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : CustomerExternalProfile>
            /**
             * Gets a customer with all existing addresses and payment instruments associated with the requested customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * If you would like to get a raw Response object use the other getCustomer function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type Customer.
             *
             */
            getCustomer(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Customer>
            /**
             * Gets a customer with all existing addresses and payment instruments associated with the requested customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
             *
             */
            getCustomer<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Customer>
            /**
             * Updates a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * If you would like to get a raw Response object use the other updateCustomer function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type Customer.
             *
             */
            updateCustomer(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: Customer
                }>
            ): Promise<Customer>
            /**
             * Updates a customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Customer otherwise.
             *
             */
            updateCustomer<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: Customer
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Customer>
            /**
             * Creates a new address with the given name for the given customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * If you would like to get a raw Response object use the other createCustomerAddress function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type CustomerAddress.
             *
             */
            createCustomerAddress(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerAddress
                }>
            ): Promise<CustomerAddress>
            /**
             * Creates a new address with the given name for the given customer. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type CustomerAddress otherwise.
             *
             */
            createCustomerAddress<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerAddress
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : CustomerAddress>
            /**
             * Retrieves a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * If you would like to get a raw Response object use the other getCustomerAddress function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param addressName - The name of the address to update.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type CustomerAddress.
             *
             */
            getCustomerAddress(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            addressName: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<CustomerAddress>
            /**
             * Retrieves a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param addressName - The name of the address to update.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type CustomerAddress otherwise.
             *
             */
            getCustomerAddress<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            addressName: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : CustomerAddress>
            /**
             * Deletes a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * If you would like to get a raw Response object use the other removeCustomerAddress function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param addressName - The name of the address to update.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type void.
             *
             */
            removeCustomerAddress(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            addressName: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<void>
            /**
             * Deletes a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param addressName - The name of the address to update.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            removeCustomerAddress<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            addressName: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
             * Updates a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * If you would like to get a raw Response object use the other updateCustomerAddress function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param addressName - The name of the address to update.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type CustomerAddress.
             *
             */
            updateCustomerAddress(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            addressName: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerAddress
                }>
            ): Promise<CustomerAddress>
            /**
             * Updates a customer's address by address name. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param addressName - The name of the address to update.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type CustomerAddress otherwise.
             *
             */
            updateCustomerAddress<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            addressName: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerAddress
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : CustomerAddress>
            /**
             * Gets the baskets of a customer. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * If you would like to get a raw Response object use the other getCustomerBaskets function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type BasketsResult.
             *
             */
            getCustomerBaskets(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<BasketsResult>
            /**
             * Gets the baskets of a customer. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type BasketsResult otherwise.
             *
             */
            getCustomerBaskets<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : BasketsResult>
            /**
             * Returns a pageable list of all customer's orders. The default page size is 10. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * If you would like to get a raw Response object use the other getCustomerOrders function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param crossSites -
             * @param from -
             * @param until -
             * @param status -
             * @param siteId -
             * @param offset -
             * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 10.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type CustomerOrderResult.
             *
             */
            getCustomerOrders(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            crossSites?: boolean
                            from?: string
                            until?: string
                            status?: string
                            siteId: string
                            offset?: unknown
                            limit?: number
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<CustomerOrderResult>
            /**
             * Returns a pageable list of all customer's orders. The default page size is 10. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param crossSites -
             * @param from -
             * @param until -
             * @param status -
             * @param siteId -
             * @param offset -
             * @param limit - Maximum records to retrieve per request, not to exceed 50. Defaults to 10.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type CustomerOrderResult otherwise.
             *
             */
            getCustomerOrders<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            crossSites?: boolean
                            from?: string
                            until?: string
                            status?: string
                            siteId: string
                            offset?: unknown
                            limit?: number
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : CustomerOrderResult>
            /**
             * Updates the customer's password. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * If you would like to get a raw Response object use the other updateCustomerPassword function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type void.
             *
             */
            updateCustomerPassword(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordChangeRequest
                }>
            ): Promise<void>
            /**
             * Updates the customer's password. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            updateCustomerPassword<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordChangeRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
             * Adds a payment instrument to the customer information. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * If you would like to get a raw Response object use the other createCustomerPaymentInstrument function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type CustomerPaymentInstrument.
             *
             */
            createCustomerPaymentInstrument(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerPaymentInstrumentRequest
                }>
            ): Promise<CustomerPaymentInstrument>
            /**
             * Adds a payment instrument to the customer information. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type CustomerPaymentInstrument otherwise.
             *
             */
            createCustomerPaymentInstrument<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerPaymentInstrumentRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : CustomerPaymentInstrument>
            /**
             * Deletes a customer's payment instrument. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * If you would like to get a raw Response object use the other deleteCustomerPaymentInstrument function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type void.
             *
             */
            deleteCustomerPaymentInstrument(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            paymentInstrumentId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<void>
            /**
             * Deletes a customer's payment instrument. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            deleteCustomerPaymentInstrument<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            paymentInstrumentId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
             * Retrieves a customer's payment instrument by its ID. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * If you would like to get a raw Response object use the other getCustomerPaymentInstrument function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type CustomerPaymentInstrument.
             *
             */
            getCustomerPaymentInstrument(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            paymentInstrumentId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<CustomerPaymentInstrument>
            /**
             * Retrieves a customer's payment instrument by its ID. This endpoint accepts a registered customer ShopperToken (JWT) only.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param paymentInstrumentId - The ID of the payment instrument to be retrievedCustomer.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type CustomerPaymentInstrument otherwise.
             *
             */
            getCustomerPaymentInstrument<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            paymentInstrumentId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : CustomerPaymentInstrument>
            /**
             * Returns all customer product lists. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * If you would like to get a raw Response object use the other getCustomerProductLists function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type CustomerProductListResult.
             *
             */
            getCustomerProductLists(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<CustomerProductListResult>
            /**
             * Returns all customer product lists. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListResult otherwise.
             *
             */
            getCustomerProductLists<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : CustomerProductListResult>
            /**
             * Creates a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * If you would like to get a raw Response object use the other createCustomerProductList function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type CustomerProductList.
             *
             */
            createCustomerProductList(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerProductList
                }>
            ): Promise<CustomerProductList>
            /**
             * Creates a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductList otherwise.
             *
             */
            createCustomerProductList<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerProductList
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : CustomerProductList>
            /**
             * Deletes a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer  ShopperToken.
             *
             * If you would like to get a raw Response object use the other deleteCustomerProductList function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param listId - The product list ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type void.
             *
             */
            deleteCustomerProductList(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            listId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<void>
            /**
             * Deletes a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer  ShopperToken.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param listId - The product list ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            deleteCustomerProductList<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            listId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
             * Returns a customer product list of the given customer and the items in the list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * If you would like to get a raw Response object use the other getCustomerProductList function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param listId - The product list ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type CustomerProductList.
             *
             */
            getCustomerProductList(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            listId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<CustomerProductList>
            /**
             * Returns a customer product list of the given customer and the items in the list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param listId - The product list ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductList otherwise.
             *
             */
            getCustomerProductList<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            listId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : CustomerProductList>
            /**
             * Changes a product list. Changeable properties are the name, description, and if the list is public. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * If you would like to get a raw Response object use the other updateCustomerProductList function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param listId - The product list ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type CustomerProductList.
             *
             */
            updateCustomerProductList(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            listId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerProductList
                }>
            ): Promise<CustomerProductList>
            /**
             * Changes a product list. Changeable properties are the name, description, and if the list is public. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param listId - The product list ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductList otherwise.
             *
             */
            updateCustomerProductList<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            listId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerProductList
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : CustomerProductList>
            /**
             * Adds an item to the customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             
             Considered values from the request body are:
             
             - `type` → The type of the item to be added to the customer's product. Must be a valid type. Mandatory.
             list.
             - `priority` → The priority of the item to be added to the customer's product list.
             - `public` → The flag that determines whether the item to be added to the customer's product list is public.
             - `product_id` → The ID (SKU) of the product related to the item to be added to the customer's product list. A valid product ID, used for product item type only. Must be a valid product ID; otherwise, a `ProductListProductIdMissingException` or `ProductListProductNotFoundException` is thrown. Mandatory when item type is `product`.
             - `quantity` → Used for product item type only. This is the quantity of the item to be added to the customer's product list.
             
             You can also use a custom property of the form `c_\<CUSTOM_NAME\>`. The custom property must correspond to a custom attribute (`\<CUSTOM_NAME\>`) that is defined for `ProductListItem`. The value of this property must be valid for the type of custom attribute defined for `ProductListItem`.
             *
             * If you would like to get a raw Response object use the other createCustomerProductListItem function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param listId - The product list ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type CustomerProductListItem.
             *
             */
            createCustomerProductListItem(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            listId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerProductListItem
                }>
            ): Promise<CustomerProductListItem>
            /**
             * Adds an item to the customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             
             Considered values from the request body are:
             
             - `type` → The type of the item to be added to the customer's product. Must be a valid type. Mandatory.
             list.
             - `priority` → The priority of the item to be added to the customer's product list.
             - `public` → The flag that determines whether the item to be added to the customer's product list is public.
             - `product_id` → The ID (SKU) of the product related to the item to be added to the customer's product list. A valid product ID, used for product item type only. Must be a valid product ID; otherwise, a `ProductListProductIdMissingException` or `ProductListProductNotFoundException` is thrown. Mandatory when item type is `product`.
             - `quantity` → Used for product item type only. This is the quantity of the item to be added to the customer's product list.
             
             You can also use a custom property of the form `c_\<CUSTOM_NAME\>`. The custom property must correspond to a custom attribute (`\<CUSTOM_NAME\>`) that is defined for `ProductListItem`. The value of this property must be valid for the type of custom attribute defined for `ProductListItem`.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param listId - The product list ID.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListItem otherwise.
             *
             */
            createCustomerProductListItem<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            listId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerProductListItem
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : CustomerProductListItem>
            /**
             * Removes an item from a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * If you would like to get a raw Response object use the other deleteCustomerProductListItem function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param listId - The product list ID.
             * @param itemId - The ID of the product list item to update.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type void.
             *
             */
            deleteCustomerProductListItem(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            listId: string
                            itemId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<void>
            /**
             * Removes an item from a customer product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param listId - The product list ID.
             * @param itemId - The ID of the product list item to update.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            deleteCustomerProductListItem<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            listId: string
                            itemId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
             * Returns an item of a customer product list and the actual product details like image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * If you would like to get a raw Response object use the other getCustomerProductListItem function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param listId - The product list ID.
             * @param itemId - The ID of the product list item to update.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type CustomerProductListItem.
             *
             */
            getCustomerProductListItem(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            listId: string
                            itemId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<CustomerProductListItem>
            /**
             * Returns an item of a customer product list and the actual product details like image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param listId - The product list ID.
             * @param itemId - The ID of the product list item to update.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListItem otherwise.
             *
             */
            getCustomerProductListItem<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            listId: string
                            itemId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : CustomerProductListItem>
            /**
             * Updates an item of a customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             Considered values from the request body are:
             
             priority: This is the priority of the customer's product list item.
             public: This is the flag whether the customer's product list item is public.
             quantity: This is the quantity of
             the customer's product list item. Used for product item type only.
             custom properties in the form c_\<CUSTOM_NAME\>: The custom property
             must correspond to a custom attribute (\<CUSTOM_NAME\>) defined for ProductListItem.
             The value of this property must be valid for the type of custom attribute defined for ProductListItem.
             *
             * If you would like to get a raw Response object use the other updateCustomerProductListItem function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param listId - The product list ID.
             * @param itemId - The ID of the product list item to update.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type CustomerProductListItem.
             *
             */
            updateCustomerProductListItem(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            listId: string
                            itemId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerProductListItem
                }>
            ): Promise<CustomerProductListItem>
            /**
             * Updates an item of a customer's product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             Considered values from the request body are:
             
             priority: This is the priority of the customer's product list item.
             public: This is the flag whether the customer's product list item is public.
             quantity: This is the quantity of
             the customer's product list item. Used for product item type only.
             custom properties in the form c_\<CUSTOM_NAME\>: The custom property
             must correspond to a custom attribute (\<CUSTOM_NAME\>) defined for ProductListItem.
             The value of this property must be valid for the type of custom attribute defined for ProductListItem.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param customerId - The customer ID.
             * @param listId - The product list ID.
             * @param itemId - The ID of the product list item to update.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type CustomerProductListItem otherwise.
             *
             */
            updateCustomerProductListItem<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            customerId: string
                            listId: string
                            itemId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: CustomerProductListItem
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : CustomerProductListItem>
            /**
             * Retrieves all public product lists as defined by the given search term (for example, email OR first name and last name). This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * If you would like to get a raw Response object use the other getPublicProductListsBySearchTerm function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param email - The email address of the customer the product lists belong to.
             * @param firstName - The first name of the customer the product lists belong to.
             * @param lastName - The last name of the customer the product lists belong to.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type PublicProductListResult.
             *
             */
            getPublicProductListsBySearchTerm(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            email?: string
                            firstName?: string
                            lastName?: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<PublicProductListResult>
            /**
             * Retrieves all public product lists as defined by the given search term (for example, email OR first name and last name). This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param email - The email address of the customer the product lists belong to.
             * @param firstName - The first name of the customer the product lists belong to.
             * @param lastName - The last name of the customer the product lists belong to.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type PublicProductListResult otherwise.
             *
             */
            getPublicProductListsBySearchTerm<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            email?: string
                            firstName?: string
                            lastName?: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : PublicProductListResult>
            /**
             * Retrieves a public product list by ID and the items under that product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * If you would like to get a raw Response object use the other getPublicProductList function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param listId - The ID of the list.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type PublicProductList.
             *
             */
            getPublicProductList(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            listId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<PublicProductList>
            /**
             * Retrieves a public product list by ID and the items under that product list. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param listId - The ID of the list.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type PublicProductList otherwise.
             *
             */
            getPublicProductList<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            listId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : PublicProductList>
            /**
             * Retrieves an item from a public product list and the actual product details like product, image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * If you would like to get a raw Response object use the other getProductListItem function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param listId - The ID of the list.
             * @param itemId - The ID of the item.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type PublicProductListItem.
             *
             */
            getProductListItem(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            listId: string
                            itemId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<PublicProductListItem>
            /**
             * Retrieves an item from a public product list and the actual product details like product, image, availability and price. This endpoint accepts a registered customer ShopperToken (JWT) or a guest customer ShopperToken.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param listId - The ID of the list.
             * @param itemId - The ID of the item.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type PublicProductListItem otherwise.
             *
             */
            getProductListItem<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            listId: string
                            itemId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : PublicProductListItem>
        }
    }
    type BoolFilter$2 = {
        filters?: Array<any>
        operator: string
    } & {
        [key: string]: unknown
    }
    type MatchAllQuery$2 = Record<string, unknown>
    type FilteredQuery$2 = {
        filter: unknown
        query: unknown
    } & {
        [key: string]: unknown
    }
    type QueryFilter$2 = {
        query: unknown
    } & {
        [key: string]: unknown
    }
    type Query$2 = {
        boolQuery?: BoolQuery$1
        filteredQuery?: FilteredQuery$2
        matchAllQuery?: MatchAllQuery$2
        nestedQuery?: NestedQuery$1
        termQuery?: TermQuery$1
        textQuery?: TextQuery$1
    } & {
        [key: string]: unknown
    }
    type TermQuery$2 = {
        fields: Array<string>
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TermFilter$2 = {
        field: string
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TextQuery$2 = {
        fields: Array<string>
        searchPhrase: string
    } & {
        [key: string]: unknown
    }
    type Range2Filter$2 = {
        filterMode?: string
        fromField: string
        fromInclusive?: boolean
        fromValue?: unknown
        toField: string
        toInclusive?: boolean
        toValue?: unknown
    } & {
        [key: string]: unknown
    }
    type BoolQuery$2 = {
        must?: Array<any>
        mustNot?: Array<any>
        should?: Array<any>
    } & {
        [key: string]: unknown
    }
    type NestedQuery$2 = {
        path: string
        query: unknown
        scoreMode?: string
    } & {
        [key: string]: unknown
    }
    type Filter$2 = {
        boolFilter?: BoolFilter$2
        queryFilter?: QueryFilter$2
        range2Filter?: Range2Filter$2
        rangeFilter?: RangeFilter$1
        termFilter?: TermFilter$2
    } & {
        [key: string]: unknown
    }
    type Sort$2 = {
        field: string
        sortOrder?: string
    } & {
        [key: string]: unknown
    }
    type RangeFilter$2 = {
        field: string
        from?: unknown
        fromInclusive?: boolean
        to?: unknown
        toInclusive?: boolean
    } & {
        [key: string]: unknown
    }
    type ExpansionAttribute = {
        attributeId: string
        path: string
        value: unknown
    } & {
        [key: string]: unknown
    }
    type PaginationLinks = {
        prev?: Self
        self: Self
        next?: Self
    } & {
        [key: string]: unknown
    }
    type Self = {
        href: string
    }
    type Highlighting = {
        attributes: Array<string>
    } & {
        [key: string]: unknown
    }
    type QueryOutput = {
        hits: Array<Result>
        facets?: Array<FacetOutput>
        links: PaginationLinks
        limit: number
        offset: unknown
        total: unknown
    }
    type QueryInput = {
        query?: Query$2
        refinements?: Array<Refinement>
        returnedAttributes?: Array<string>
        grouping?: Grouping
        facets?: Array<FacetInput>
        facetRequest?: FacetRequest
        sorting: Sorting
    }
    type CorrectableAttributes = {
        attributes: Array<string>
    } & {
        [key: string]: unknown
    }
    type Refinement = {
        attributeId: string
        refinementType: string
    } & {
        [key: string]: unknown
    }
    type FacetInput = {
        attributeId: string
        facetType: string
    } & {
        [key: string]: unknown
    }
    type FacetRequest = {
        facetLimit?: unknown
        facets?: Array<FacetInput>
    } & {
        [key: string]: unknown
    }
    type ValueFacetOutputEntity = {
        value: string
        count: unknown
    } & {
        [key: string]: unknown
    }
    type FacetOutput = {
        attributeId: string
        facetType: string
    } & {
        [key: string]: unknown
    }
    type Sorting = {
        sortType: string
    } & {
        [key: string]: unknown
    }
    type Grouping = {
        groupType: string
    } & {
        [key: string]: unknown
    }
    type ItemReference = {
        itemId: string
        attributes?: Array<ExpansionAttribute>
    } & {
        [key: string]: unknown
    }
    type Highlight = {
        attributeId: string
        value: string
    } & {
        [key: string]: unknown
    }
    type Result = {
        matchedItem: ItemReference
        highlights?: Array<Highlight>
        groupId?: string
        totalGroupedItems?: unknown
        groupedItems?: Array<ItemReference>
    }
    type Suggestion = {
        phrase: string
    }
    type Suggestions = {
        recentSearchPhrases?: Array<Suggestion>
        suggestedSearchPhrases?: Array<Suggestion>
        popularSearchPhrases?: Array<Suggestion>
    }
    /**
     * All path parameters that are used by at least one ShopperDiscoverySearch method.
     */
    type ShopperDiscoverySearchPathParameters = {
        organizationId?: string
        channelId?: string
    }
    /**
     * All query parameters that are used by at least one ShopperDiscoverySearch method.
     */
    type ShopperDiscoverySearchQueryParameters = {
        locale?: string
        offset?: unknown
        limit?: number
        suggestionTypes?: Array<string>
        searchText?: string
    }
    /**
     * All parameters that are used by ShopperDiscoverySearch.
     */
    type ShopperDiscoverySearchParameters = ShopperDiscoverySearchPathParameters &
        BaseUriParameters &
        ShopperDiscoverySearchQueryParameters
    /**
 * [Shopper Discovery Search](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-discovery-search:Summary)
 * ==================================
 *
 * *Einstein-powered product search and search suggestions.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperDiscoverySearch } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperDiscoverySearchClient = new ShopperDiscoverySearch(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 1.1.6<br />
 * Last Updated: <br />
 * </span>
 * @beta
 *
 *
 
 */
    declare class ShopperDiscoverySearch<
        ConfigParameters extends ShopperDiscoverySearchParameters & Record<string, unknown>
    > {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string
        }
        static readonly defaultBaseUri =
            'https://{shortCode}.api.commercecloud.salesforce.com/discovery/query/{version}'
        constructor(config: ClientConfigInit<ConfigParameters>)
        /**
         * This method retrieves search results for a Channel.
         *
         * If you would like to get a raw Response object use the other retrieveResults function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param channelId - The unique identifier of a Channel.
         * @param locale -
         * @param offset -
         * @param limit - Maximum records to retrieve per request, not to exceed 240. Defaults to 30.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type QueryOutput.
         *
         * @beta
         *
         */
        retrieveResults(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        channelId: string
                        locale: string
                        offset?: unknown
                        limit?: number
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: QueryInput
            }>
        ): Promise<QueryOutput>
        /**
         * This method retrieves search results for a Channel.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param channelId - The unique identifier of a Channel.
         * @param locale -
         * @param offset -
         * @param limit - Maximum records to retrieve per request, not to exceed 240. Defaults to 30.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type QueryOutput otherwise.
         *
         * @beta
         *
         */
        retrieveResults<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        channelId: string
                        locale: string
                        offset?: unknown
                        limit?: number
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: QueryInput
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : QueryOutput>
        /**
         * This method gets suggestions for the user's search activity for a channel.
         *
         * If you would like to get a raw Response object use the other getSuggestions function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param channelId - The unique identifier of a Channel.
         * @param suggestionTypes - The types of suggestions to return.
         * @param searchText - The optional text to retrieve suggestions for.
         * @param locale -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Suggestions.
         *
         * @beta
         *
         */
        getSuggestions(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        channelId: string
                        suggestionTypes: Array<string>
                        searchText?: string
                        locale: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Suggestions>
        /**
         * This method gets suggestions for the user's search activity for a channel.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param channelId - The unique identifier of a Channel.
         * @param suggestionTypes - The types of suggestions to return.
         * @param searchText - The optional text to retrieve suggestions for.
         * @param locale -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Suggestions otherwise.
         *
         * @beta
         *
         */
        getSuggestions<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        channelId: string
                        suggestionTypes: Array<string>
                        searchText?: string
                        locale: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Suggestions>
    }
    declare namespace ShopperDiscoverySearchTypes {
        /*
         * Copyright (c) 2023, Salesforce, Inc.
         * All rights reserved.
         * SPDX-License-Identifier: BSD-3-Clause
         * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
         */
        /**
         * Makes a type easier to read.
         */
        type Prettify<T> = NonNullable<{
            [K in keyof T]: T[K]
        }>
        /**
         * Generates the types required on a method, based on those provided in the config.
         */
        type CompositeParameters<
            MethodParameters extends Record<string, unknown>,
            ConfigParameters extends Record<string, unknown>
        > = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>
        /**
         * If an object has a `parameters` property, and the `parameters` object has required properties,
         * then the `parameters` property on the root object is marked as required.
         */
        type RequireParametersUnlessAllAreOptional<
            T extends {
                parameters?: Record<string, unknown>
            }
        > = Record<string, never> extends NonNullable<T['parameters']>
            ? T
            : Prettify<T & Required<Pick<T, 'parameters'>>>
        /**
         * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
         * if not specified.
         */
        interface BaseUriParameters {
            shortCode: string
            version?: string // Optional, will default to "v1" if not provided.
        }
        /**
         * Generic interface for path parameters.
         */
        interface PathParameters {
            [key: string]: string | number | boolean
        }
        /**
         * Generic interface for query parameters.
         */
        interface QueryParameters {
            [key: string]: string | number | boolean | string[] | number[]
        }
        /**
         * Generic interface for all parameter types.
         */
        type UrlParameters = PathParameters | QueryParameters
        /**
         * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
         * it from the `RequestInit` provided by node-fetch.
         */
        type BrowserRequestInit = RequestInit
        /**
         * Any properties supported in either the browser or node are accepted.
         * Using the right properties in the right context is left to the user.
         */
        type FetchOptions = NodeRequestInit & BrowserRequestInit
        /**
         * Base options that can be passed to the `ClientConfig` class.
         */
        interface ClientConfigInit<Params extends BaseUriParameters> {
            baseUri?: string
            proxy?: string
            headers?: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions?: FetchOptions
            transformRequest?: (
                data: unknown,
                headers: {
                    [key: string]: string
                }
            ) => Required<FetchOptions>['body']
            throwOnBadResponse?: boolean
        }
        type FetchFunction = (
            input: RequestInfo,
            init?: FetchOptions | undefined
        ) => Promise<Response>
        /**
         * Configuration parameters common to Commerce SDK clients
         */
        class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
            baseUri?: string
            proxy?: string
            headers: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions: FetchOptions
            transformRequest: NonNullable<ClientConfigInit<Params>['transformRequest']>
            throwOnBadResponse: boolean
            constructor(config: ClientConfigInit<Params>)
            static readonly defaults: Pick<Required<ClientConfigInit<never>>, 'transformRequest'>
        }
        type ErrorResponse = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type Money = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResult = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type SearchRequest = {
            limit?: number
            query: unknown
            sorts?: Array<Sort$2>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type PaginatedSearchResult = {
            query: unknown
            sorts?: Array<Sort$2>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type ClosedObject = Record<string, unknown>
        type OpenObject = Record<string, unknown>
        type NoPropertiesAllowed = Record<string, unknown>
        type SpecifiedPropertiesAllowed = Record<string, unknown>
        type BoolFilter = {
            filters?: Array<any>
            operator: string
        } & {
            [key: string]: unknown
        }
        type PaginatedSearchResultBase = {
            query: unknown
            sorts?: Array<Sort$2>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type MatchAllQuery = Record<string, unknown>
        type FilteredQuery = {
            filter: unknown
            query: unknown
        } & {
            [key: string]: unknown
        }
        type QueryFilter = {
            query: unknown
        } & {
            [key: string]: unknown
        }
        type Query = {
            boolQuery?: BoolQuery$2
            filteredQuery?: FilteredQuery
            matchAllQuery?: MatchAllQuery
            nestedQuery?: NestedQuery$2
            termQuery?: TermQuery$2
            textQuery?: TextQuery$2
        } & {
            [key: string]: unknown
        }
        type TermQuery = {
            fields: Array<string>
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TermFilter = {
            field: string
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TextQuery = {
            fields: Array<string>
            searchPhrase: string
        } & {
            [key: string]: unknown
        }
        type Range2Filter = {
            filterMode?: string
            fromField: string
            fromInclusive?: boolean
            fromValue?: unknown
            toField: string
            toInclusive?: boolean
            toValue?: unknown
        } & {
            [key: string]: unknown
        }
        type BoolQuery = {
            must?: Array<any>
            mustNot?: Array<any>
            should?: Array<any>
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResultBase = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type NestedQuery = {
            path: string
            query: unknown
            scoreMode?: string
        } & {
            [key: string]: unknown
        }
        type Filter = {
            boolFilter?: BoolFilter
            queryFilter?: QueryFilter
            range2Filter?: Range2Filter
            rangeFilter?: RangeFilter$2
            termFilter?: TermFilter
        } & {
            [key: string]: unknown
        }
        type Sort = {
            field: string
            sortOrder?: string
        } & {
            [key: string]: unknown
        }
        type RangeFilter = {
            field: string
            from?: unknown
            fromInclusive?: boolean
            to?: unknown
            toInclusive?: boolean
        } & {
            [key: string]: unknown
        }
        type SearchRequestBase = {
            limit?: number
            query: unknown
            sorts?: Array<Sort>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type MoneyMnemonic = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type ExpansionAttribute = {
            attributeId: string
            path: string
            value: unknown
        } & {
            [key: string]: unknown
        }
        type PaginationLinks = {
            prev?: Self
            self: Self
            next?: Self
        } & {
            [key: string]: unknown
        }
        type ResourceLink = {
            self: Self
        } & {
            [key: string]: unknown
        }
        type Self = {
            href: string
        }
        type SelfResourceLink = {
            self: Self
        }
        type Pagination = {
            prev?: Self
            self: Self
            next?: Self
        }
        // This is a known deviation from the RAML definition, required due to limitations in
        // the SDK generation. The full definition will be included in the next major release.
        type ResourceBadRequest = {
            [key: string]: unknown
        }
        type ResourceNonReadableHttpMessage = Record<string, unknown>
        type ResourceInvalidRequest = Record<string, unknown>
        type AuthenticationFailure = Record<string, unknown>
        type BaseError = {
            type: string
            title?: string
            detail?: string
            instance?: string
        }
        type NotFound = Record<string, unknown>
        type InvalidRequest = Record<string, unknown>
        type AuthorizationFailure = Record<string, unknown>
        type BadRequest = Record<string, unknown>
        type ServiceUnavailable = Record<string, unknown>
        type InternalServerError = Record<string, unknown>
        type RateLimitExceeded = {
            requestLimit: unknown
            type: string
            title?: string
            detail?: string
            instance?: string
        }
        type NonReadableHttpMessage = Record<string, unknown>
        type AttributesQuery = {
            value: {
                attributes: Array<string>
                phrase: string
            } & {
                [key: string]: unknown
            }
            queryType: string
            correctableAttributes?: CorrectableAttributes
            highlighting?: Highlighting
        }
        type Highlighting = {
            attributes: Array<string>
        } & {
            [key: string]: unknown
        }
        type PhraseQuery = {
            value: string
            queryType: string
            correctableAttributes?: CorrectableAttributes
            highlighting?: Highlighting
        }
        type QueryOutput = {
            hits: Array<Result>
            facets?: Array<FacetOutput>
            links: PaginationLinks
            limit: number
            offset: unknown
            total: unknown
        }
        type QueryInput = {
            query?: Query
            refinements?: Array<Refinement>
            returnedAttributes?: Array<string>
            grouping?: Grouping
            facets?: Array<FacetInput>
            facetRequest?: FacetRequest
            sorting: Sorting
        }
        type CorrectableAttributes = {
            attributes: Array<string>
        } & {
            [key: string]: unknown
        }
        type Refinement = {
            attributeId: string
            refinementType: string
        } & {
            [key: string]: unknown
        }
        type ValueRefinement = {
            values: Array<any>
            attributeId: string
            refinementType: string
        }
        type RangeRefinement = {
            min: unknown
            max: unknown
            attributeId: string
            refinementType: string
        }
        type ValueFacetOutput = {
            values?: Array<ValueFacetOutputEntity>
            attributeId: string
            facetType: string
        }
        type FacetInput = {
            attributeId: string
            facetType: string
        } & {
            [key: string]: unknown
        }
        type RangeFacetInput = Record<string, unknown>
        type RangeFacetOutput = {
            min: unknown
            max: unknown
            attributeId: string
            facetType: string
        }
        type ValueFacetInput = {
            mask?: Array<string>
            attributeId: string
            facetType: string
        }
        type FacetRequest = {
            facetLimit?: unknown
            facets?: Array<FacetInput>
        } & {
            [key: string]: unknown
        }
        type ValueFacetOutputEntity = {
            value: string
            count: unknown
        } & {
            [key: string]: unknown
        }
        type FacetOutput = {
            attributeId: string
            facetType: string
        } & {
            [key: string]: unknown
        }
        type Sorting = {
            sortType: string
        } & {
            [key: string]: unknown
        }
        type AttributeSorting = {
            attributeId: string
            direction: string
            sortType: string
        }
        type RelevanceSorting = Record<string, unknown>
        type Grouping = {
            groupType: string
        } & {
            [key: string]: unknown
        }
        type AttributeGrouping = {
            attributeId: string
            returnedAttributes?: Array<string>
            groupType: string
        }
        type ItemReference = {
            itemId: string
            attributes?: Array<ExpansionAttribute>
        } & {
            [key: string]: unknown
        }
        type Highlight = {
            attributeId: string
            value: string
        } & {
            [key: string]: unknown
        }
        type Result = {
            matchedItem: ItemReference
            highlights?: Array<Highlight>
            groupId?: string
            totalGroupedItems?: unknown
            groupedItems?: Array<ItemReference>
        }
        type Suggestion = {
            phrase: string
        }
        type Suggestions = {
            recentSearchPhrases?: Array<Suggestion>
            suggestedSearchPhrases?: Array<Suggestion>
            popularSearchPhrases?: Array<Suggestion>
        }
        /**
         * All path parameters that are used by at least one ShopperDiscoverySearch method.
         */
        type ShopperDiscoverySearchPathParameters = {
            organizationId?: string
            channelId?: string
        }
        /**
         * All query parameters that are used by at least one ShopperDiscoverySearch method.
         */
        type ShopperDiscoverySearchQueryParameters = {
            locale?: string
            offset?: unknown
            limit?: number
            suggestionTypes?: Array<string>
            searchText?: string
        }
        /**
         * All parameters that are used by ShopperDiscoverySearch.
         */
        type ShopperDiscoverySearchParameters = ShopperDiscoverySearchPathParameters &
            BaseUriParameters &
            ShopperDiscoverySearchQueryParameters
        /**
     * [Shopper Discovery Search](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-discovery-search:Summary)
     * ==================================
     *
     * *Einstein-powered product search and search suggestions.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperDiscoverySearch } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperDiscoverySearchClient = new ShopperDiscoverySearch(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 1.1.6<br />
     * Last Updated: <br />
     * </span>
     * @beta
     *
     *
     
     */
        class ShopperDiscoverySearch<
            ConfigParameters extends ShopperDiscoverySearchParameters & Record<string, unknown>
        > {
            // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
            clientConfig: ClientConfig<ConfigParameters> & {
                baseUri: string
            }
            static readonly defaultBaseUri =
                'https://{shortCode}.api.commercecloud.salesforce.com/discovery/query/{version}'
            constructor(config: ClientConfigInit<ConfigParameters>)
            /**
             * This method retrieves search results for a Channel.
             *
             * If you would like to get a raw Response object use the other retrieveResults function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param channelId - The unique identifier of a Channel.
             * @param locale -
             * @param offset -
             * @param limit - Maximum records to retrieve per request, not to exceed 240. Defaults to 30.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type QueryOutput.
             *
             * @beta
             *
             */
            retrieveResults(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            channelId: string
                            locale: string
                            offset?: unknown
                            limit?: number
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: QueryInput
                }>
            ): Promise<QueryOutput>
            /**
             * This method retrieves search results for a Channel.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param channelId - The unique identifier of a Channel.
             * @param locale -
             * @param offset -
             * @param limit - Maximum records to retrieve per request, not to exceed 240. Defaults to 30.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type QueryOutput otherwise.
             *
             * @beta
             *
             */
            retrieveResults<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            channelId: string
                            locale: string
                            offset?: unknown
                            limit?: number
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: QueryInput
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : QueryOutput>
            /**
             * This method gets suggestions for the user's search activity for a channel.
             *
             * If you would like to get a raw Response object use the other getSuggestions function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param channelId - The unique identifier of a Channel.
             * @param suggestionTypes - The types of suggestions to return.
             * @param searchText - The optional text to retrieve suggestions for.
             * @param locale -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type Suggestions.
             *
             * @beta
             *
             */
            getSuggestions(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            channelId: string
                            suggestionTypes: Array<string>
                            searchText?: string
                            locale: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Suggestions>
            /**
             * This method gets suggestions for the user's search activity for a channel.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param channelId - The unique identifier of a Channel.
             * @param suggestionTypes - The types of suggestions to return.
             * @param searchText - The optional text to retrieve suggestions for.
             * @param locale -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Suggestions otherwise.
             *
             * @beta
             *
             */
            getSuggestions<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            channelId: string
                            suggestionTypes: Array<string>
                            searchText?: string
                            locale: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Suggestions>
        }
    }
    type PageResult = {
        data: Array<Page>
    } & {
        [key: string]: unknown
    }
    type Page = {
        id: string
        typeId: string
        aspectTypeId?: string
        name?: string
        description?: string
        pageTitle?: string
        pageDescription?: string
        pageKeywords?: string
        data?: Record<string, unknown>
        custom?: Record<string, unknown>
        regions?: Array<Region>
    } & {
        [key: string]: unknown
    }
    type Region = {
        id: string
        components?: Array<Component>
    } & {
        [key: string]: unknown
    }
    type Component = {
        id: string
        typeId: string
        data?: Record<string, unknown>
        custom?: Record<string, unknown>
        regions?: Array<Region>
    } & {
        [key: string]: unknown
    }
    type RangeFilter$3 = {
        [key: string]: unknown
    }
    type BoolFilter$3 = {
        filters?: Array<Filter$2>
        operator: string
    } & {
        [key: string]: unknown
    }
    type MatchAllQuery$3 = Record<string, unknown>
    type FilteredQuery$3 = {
        filter: Filter$2
        query: Query$2
    } & {
        [key: string]: unknown
    }
    type QueryFilter$3 = {
        query: Query$2
    } & {
        [key: string]: unknown
    }
    type Query$3 = {
        boolQuery?: BoolQuery$2
        filteredQuery?: FilteredQuery$3
        matchAllQuery?: MatchAllQuery$3
        nestedQuery?: NestedQuery$2
        termQuery?: TermQuery$2
        textQuery?: TextQuery$2
    } & {
        [key: string]: unknown
    }
    type TermQuery$3 = {
        fields: Array<string>
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TermFilter$3 = {
        field: string
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TextQuery$3 = {
        fields: Array<string>
        searchPhrase: string
    } & {
        [key: string]: unknown
    }
    type Range2Filter$3 = {
        filterMode?: string
        fromField: string
        fromInclusive?: boolean
        fromValue?: unknown
        toField: string
        toInclusive?: boolean
        toValue?: unknown
    } & {
        [key: string]: unknown
    }
    type BoolQuery$3 = {
        must?: Array<Query$3>
        mustNot?: Array<Query$3>
        should?: Array<Query$3>
    } & {
        [key: string]: unknown
    }
    type NestedQuery$3 = {
        path: string
        query: Query$3
        scoreMode?: string
    } & {
        [key: string]: unknown
    }
    type Filter$3 = {
        boolFilter?: BoolFilter$3
        queryFilter?: QueryFilter$3
        range2Filter?: Range2Filter$3
        rangeFilter?: RangeFilter$3
        termFilter?: TermFilter$3
    } & {
        [key: string]: unknown
    }
    type Sort$3 = {
        field: string
        sortOrder?: string
    } & {
        [key: string]: unknown
    }
    type L10nString$2 = Record<string, unknown>
    type PropertyValueDefinition$2 = {
        description: L10nString$2
        displayValue: L10nString$2
        id: string
        position?: number
        value: string
    }
    /**
     * All path parameters that are used by at least one ShopperExperience method.
     */
    type ShopperExperiencePathParameters = {
        organizationId?: string
        pageId?: string
    }
    /**
     * All query parameters that are used by at least one ShopperExperience method.
     */
    type ShopperExperienceQueryParameters = {
        categoryId?: string
        productId?: string
        aspectTypeId?: string
        aspectAttributes?: string
        parameters?: string
        siteId?: string
        locale?: string
    }
    /**
     * All parameters that are used by ShopperExperience.
     */
    type ShopperExperienceParameters = ShopperExperiencePathParameters &
        BaseUriParameters &
        ShopperExperienceQueryParameters
    /**
 * [Shopper Experience](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-experience:Summary)
 * ==================================
 *
 * **<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperExperience } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperExperienceClient = new ShopperExperience(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 1.0.4<br />
 * Last Updated: <br />
 * </span>
 
 *
 
 */
    declare class ShopperExperience<
        ConfigParameters extends ShopperExperienceParameters & Record<string, unknown>
    > {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string
        }
        static readonly defaultBaseUri =
            'https://{shortCode}.api.commercecloud.salesforce.com/experience/shopper-experience/{version}'
        constructor(config: ClientConfigInit<ConfigParameters>)
        /**
     * Get Page Designer pages. The results will apply the visibility rules for each page's components, such as personalization or scheduled visibility.
     
     Either `categoryId` or `productId` must be given in addition to `aspectTypeId`. Because only a single page-to-product and page-to-category assignment per aspect type can be authored today, the returned result contains one element at most.
     
     **Important**: Currently, the Shopper Experience API can’t be used when the [storefront password protection](https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fpermissions%2Fb2c_storefront_password_protection.html&resultof=%22%73%74%6f%72%65%66%72%6f%6e%74%22%20%22%70%72%6f%74%65%63%74%69%6f%6e%22%20%22%70%72%6f%74%65%63%74%22%20) feature is enabled.
     
     **Important**: Because this resource uses the GET method, you must not pass sensitive data (payment card information, for example) and must not perform any transactional processes within the server-side scripts that are run for the page and components.
     *
     * If you would like to get a raw Response object use the other getPages function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param categoryId - Category identifier that is used for searching the page assignment. Must be provided if no `productId` is provided.
     * @param productId - Product identifier that is used for searching the page assignment. Must be provided if no `categoryId` is provided.
     * @param aspectTypeId - Aspect type identifier that is used for searching the page assignment in conjunction with either the `productId` or `categoryId`.
     * @param aspectAttributes - A JSON respresentation of aspect attributes. Each aspect attribute is a key/value pair. Aspect attributes serve as a runtime parameter contract between caller (for example, this API or the DWScript API) and callee (the page). This parameter must not contain more than 256 characters after URL decoding.
     * @param parameters - A free-form definition of parameters that influences the page rendering according to its implementation. This parameter must not contain more than 256 characters after URL decoding.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PageResult.
     *
     */
        getPages(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        categoryId?: string
                        productId?: string
                        aspectTypeId: string
                        aspectAttributes?: string
                        parameters?: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<PageResult>
        /**
     * Get Page Designer pages. The results will apply the visibility rules for each page's components, such as personalization or scheduled visibility.
     
     Either `categoryId` or `productId` must be given in addition to `aspectTypeId`. Because only a single page-to-product and page-to-category assignment per aspect type can be authored today, the returned result contains one element at most.
     
     **Important**: Currently, the Shopper Experience API can’t be used when the [storefront password protection](https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fpermissions%2Fb2c_storefront_password_protection.html&resultof=%22%73%74%6f%72%65%66%72%6f%6e%74%22%20%22%70%72%6f%74%65%63%74%69%6f%6e%22%20%22%70%72%6f%74%65%63%74%22%20) feature is enabled.
     
     **Important**: Because this resource uses the GET method, you must not pass sensitive data (payment card information, for example) and must not perform any transactional processes within the server-side scripts that are run for the page and components.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param categoryId - Category identifier that is used for searching the page assignment. Must be provided if no `productId` is provided.
     * @param productId - Product identifier that is used for searching the page assignment. Must be provided if no `categoryId` is provided.
     * @param aspectTypeId - Aspect type identifier that is used for searching the page assignment in conjunction with either the `productId` or `categoryId`.
     * @param aspectAttributes - A JSON respresentation of aspect attributes. Each aspect attribute is a key/value pair. Aspect attributes serve as a runtime parameter contract between caller (for example, this API or the DWScript API) and callee (the page). This parameter must not contain more than 256 characters after URL decoding.
     * @param parameters - A free-form definition of parameters that influences the page rendering according to its implementation. This parameter must not contain more than 256 characters after URL decoding.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PageResult otherwise.
     *
     */
        getPages<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        categoryId?: string
                        productId?: string
                        aspectTypeId: string
                        aspectAttributes?: string
                        parameters?: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : PageResult>
        /**
     * Get a Page Designer page based on a single page ID. The results will apply the visibility rules for the page's components, such as personalization or scheduled visibility.
     
     **Important**: Currently, the Shopper Experience API can’t be used when the [storefront password protection](https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fpermissions%2Fb2c_storefront_password_protection.html&resultof=%22%73%74%6f%72%65%66%72%6f%6e%74%22%20%22%70%72%6f%74%65%63%74%69%6f%6e%22%20%22%70%72%6f%74%65%63%74%22%20) feature is enabled.
     
     **Important**: Because this resource uses the GET method, you must not pass sensitive data (payment card information, for example) and must not perform any transactional processes within the server-side scripts that are run for the page and components.
     *
     * If you would like to get a raw Response object use the other getPage function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param pageId - Identifier for the requested page.
     * @param aspectAttributes - A JSON respresentation of aspect attributes. Each aspect attribute is a key/value pair. Aspect attributes serve as a runtime parameter contract between caller (for example, this API or the DWScript API) and callee (the page). This parameter must not contain more than 256 characters after URL decoding.
     * @param parameters - A free-form definition of parameters that influences the page rendering according to its implementation. This parameter must not contain more than 256 characters after URL decoding.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Page.
     *
     */
        getPage(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        pageId: string
                        aspectAttributes?: string
                        parameters?: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Page>
        /**
     * Get a Page Designer page based on a single page ID. The results will apply the visibility rules for the page's components, such as personalization or scheduled visibility.
     
     **Important**: Currently, the Shopper Experience API can’t be used when the [storefront password protection](https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fpermissions%2Fb2c_storefront_password_protection.html&resultof=%22%73%74%6f%72%65%66%72%6f%6e%74%22%20%22%70%72%6f%74%65%63%74%69%6f%6e%22%20%22%70%72%6f%74%65%63%74%22%20) feature is enabled.
     
     **Important**: Because this resource uses the GET method, you must not pass sensitive data (payment card information, for example) and must not perform any transactional processes within the server-side scripts that are run for the page and components.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param pageId - Identifier for the requested page.
     * @param aspectAttributes - A JSON respresentation of aspect attributes. Each aspect attribute is a key/value pair. Aspect attributes serve as a runtime parameter contract between caller (for example, this API or the DWScript API) and callee (the page). This parameter must not contain more than 256 characters after URL decoding.
     * @param parameters - A free-form definition of parameters that influences the page rendering according to its implementation. This parameter must not contain more than 256 characters after URL decoding.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Page otherwise.
     *
     */
        getPage<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        pageId: string
                        aspectAttributes?: string
                        parameters?: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Page>
    }
    declare namespace ShopperExperienceTypes {
        /*
         * Copyright (c) 2023, Salesforce, Inc.
         * All rights reserved.
         * SPDX-License-Identifier: BSD-3-Clause
         * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
         */
        /**
         * Makes a type easier to read.
         */
        type Prettify<T> = NonNullable<{
            [K in keyof T]: T[K]
        }>
        /**
         * Generates the types required on a method, based on those provided in the config.
         */
        type CompositeParameters<
            MethodParameters extends Record<string, unknown>,
            ConfigParameters extends Record<string, unknown>
        > = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>
        /**
         * If an object has a `parameters` property, and the `parameters` object has required properties,
         * then the `parameters` property on the root object is marked as required.
         */
        type RequireParametersUnlessAllAreOptional<
            T extends {
                parameters?: Record<string, unknown>
            }
        > = Record<string, never> extends NonNullable<T['parameters']>
            ? T
            : Prettify<T & Required<Pick<T, 'parameters'>>>
        /**
         * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
         * if not specified.
         */
        interface BaseUriParameters {
            shortCode: string
            version?: string // Optional, will default to "v1" if not provided.
        }
        /**
         * Generic interface for path parameters.
         */
        interface PathParameters {
            [key: string]: string | number | boolean
        }
        /**
         * Generic interface for query parameters.
         */
        interface QueryParameters {
            [key: string]: string | number | boolean | string[] | number[]
        }
        /**
         * Generic interface for all parameter types.
         */
        type UrlParameters = PathParameters | QueryParameters
        /**
         * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
         * it from the `RequestInit` provided by node-fetch.
         */
        type BrowserRequestInit = RequestInit
        /**
         * Any properties supported in either the browser or node are accepted.
         * Using the right properties in the right context is left to the user.
         */
        type FetchOptions = NodeRequestInit & BrowserRequestInit
        /**
         * Base options that can be passed to the `ClientConfig` class.
         */
        interface ClientConfigInit<Params extends BaseUriParameters> {
            baseUri?: string
            proxy?: string
            headers?: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions?: FetchOptions
            transformRequest?: (
                data: unknown,
                headers: {
                    [key: string]: string
                }
            ) => Required<FetchOptions>['body']
            throwOnBadResponse?: boolean
        }
        type FetchFunction = (
            input: RequestInfo,
            init?: FetchOptions | undefined
        ) => Promise<Response>
        /**
         * Configuration parameters common to Commerce SDK clients
         */
        class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
            baseUri?: string
            proxy?: string
            headers: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions: FetchOptions
            transformRequest: NonNullable<ClientConfigInit<Params>['transformRequest']>
            throwOnBadResponse: boolean
            constructor(config: ClientConfigInit<Params>)
            static readonly defaults: Pick<Required<ClientConfigInit<never>>, 'transformRequest'>
        }
        type PageResult = {
            data: Array<Page>
        } & {
            [key: string]: unknown
        }
        type Page = {
            id: string
            typeId: string
            aspectTypeId?: string
            name?: string
            description?: string
            pageTitle?: string
            pageDescription?: string
            pageKeywords?: string
            data?: Record<string, unknown>
            custom?: Record<string, unknown>
            regions?: Array<Region>
        } & {
            [key: string]: unknown
        }
        type Region = {
            id: string
            components?: Array<Component>
        } & {
            [key: string]: unknown
        }
        type Component = {
            id: string
            typeId: string
            data?: Record<string, unknown>
            custom?: Record<string, unknown>
            regions?: Array<Region>
        } & {
            [key: string]: unknown
        }
        type ErrorResponse = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type ChangeControlled = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type RangeFilter = {
            [key: string]: unknown
        }
        type ChangeControlledDataType = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type Error = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type Money = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResult = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type SearchRequest = {
            limit?: number
            query: Query$3
            sorts?: Array<Sort$3>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type PropertyDefinition = {
            defaultValue?: PropertyValueDefinition$2
            id?: string
            name: L10nString$2
            description: L10nString$2
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString$2
            possibleValues?: Array<PropertyValueDefinition$2>
            type: string
            visible?: boolean
        } & {
            [key: string]: unknown
        }
        type LocalizedString = Record<string, unknown>
        type PaginatedSearchResult = {
            query: Query$3
            sorts?: Array<Sort$3>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type ClosedObject = Record<string, unknown>
        type OpenObject = Record<string, unknown>
        type NoPropertiesAllowed = Record<string, unknown>
        type SpecifiedPropertiesAllowed = Record<string, unknown>
        type BoolFilter = {
            filters?: Array<Filter$3>
            operator: string
        } & {
            [key: string]: unknown
        }
        type PaginatedSearchResultBase = {
            query: Query$3
            sorts?: Array<Sort$3>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type MatchAllQuery = Record<string, unknown>
        type FilteredQuery = {
            filter: Filter$3
            query: Query$3
        } & {
            [key: string]: unknown
        }
        type QueryFilter = {
            query: Query$3
        } & {
            [key: string]: unknown
        }
        type Query = {
            boolQuery?: BoolQuery$3
            filteredQuery?: FilteredQuery
            matchAllQuery?: MatchAllQuery
            nestedQuery?: NestedQuery$3
            termQuery?: TermQuery$3
            textQuery?: TextQuery$3
        } & {
            [key: string]: unknown
        }
        type TermQuery = {
            fields: Array<string>
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TermFilter = {
            field: string
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TextQuery = {
            fields: Array<string>
            searchPhrase: string
        } & {
            [key: string]: unknown
        }
        type Range2Filter = {
            filterMode?: string
            fromField: string
            fromInclusive?: boolean
            fromValue?: unknown
            toField: string
            toInclusive?: boolean
            toValue?: unknown
        } & {
            [key: string]: unknown
        }
        type BoolQuery = {
            must?: Array<Query>
            mustNot?: Array<Query>
            should?: Array<Query>
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResultBase = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type NestedQuery = {
            path: string
            query: Query
            scoreMode?: string
        } & {
            [key: string]: unknown
        }
        type Filter = {
            boolFilter?: BoolFilter
            queryFilter?: QueryFilter
            range2Filter?: Range2Filter
            rangeFilter?: RangeFilter
            termFilter?: TermFilter
        } & {
            [key: string]: unknown
        }
        type Sort = {
            field: string
            sortOrder?: string
        } & {
            [key: string]: unknown
        }
        type SearchRequestBase = {
            limit?: number
            query: Query
            sorts?: Array<Sort>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type MoneyMnemonic = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type L10nString = Record<string, unknown>
        type AttributeDefinition = {
            defaultValue?: PropertyValueDefinition$2
            id?: string
            name: L10nString
            description: L10nString
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString
            possibleValues?: Array<PropertyValueDefinition$2>
            type: string
            visible?: boolean
        }
        type PropertyValueDefinition = {
            description: L10nString
            displayValue: L10nString
            id: string
            position?: number
            value: string
        }
        /**
         * All path parameters that are used by at least one ShopperExperience method.
         */
        type ShopperExperiencePathParameters = {
            organizationId?: string
            pageId?: string
        }
        /**
         * All query parameters that are used by at least one ShopperExperience method.
         */
        type ShopperExperienceQueryParameters = {
            categoryId?: string
            productId?: string
            aspectTypeId?: string
            aspectAttributes?: string
            parameters?: string
            siteId?: string
            locale?: string
        }
        /**
         * All parameters that are used by ShopperExperience.
         */
        type ShopperExperienceParameters = ShopperExperiencePathParameters &
            BaseUriParameters &
            ShopperExperienceQueryParameters
        /**
     * [Shopper Experience](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-experience:Summary)
     * ==================================
     *
     * **<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperExperience } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperExperienceClient = new ShopperExperience(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 1.0.4<br />
     * Last Updated: <br />
     * </span>
     
     *
     
     */
        class ShopperExperience<
            ConfigParameters extends ShopperExperienceParameters & Record<string, unknown>
        > {
            // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
            clientConfig: ClientConfig<ConfigParameters> & {
                baseUri: string
            }
            static readonly defaultBaseUri =
                'https://{shortCode}.api.commercecloud.salesforce.com/experience/shopper-experience/{version}'
            constructor(config: ClientConfigInit<ConfigParameters>)
            /**
         * Get Page Designer pages. The results will apply the visibility rules for each page's components, such as personalization or scheduled visibility.
         
         Either `categoryId` or `productId` must be given in addition to `aspectTypeId`. Because only a single page-to-product and page-to-category assignment per aspect type can be authored today, the returned result contains one element at most.
         
         **Important**: Currently, the Shopper Experience API can’t be used when the [storefront password protection](https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fpermissions%2Fb2c_storefront_password_protection.html&resultof=%22%73%74%6f%72%65%66%72%6f%6e%74%22%20%22%70%72%6f%74%65%63%74%69%6f%6e%22%20%22%70%72%6f%74%65%63%74%22%20) feature is enabled.
         
         **Important**: Because this resource uses the GET method, you must not pass sensitive data (payment card information, for example) and must not perform any transactional processes within the server-side scripts that are run for the page and components.
         *
         * If you would like to get a raw Response object use the other getPages function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param categoryId - Category identifier that is used for searching the page assignment. Must be provided if no `productId` is provided.
         * @param productId - Product identifier that is used for searching the page assignment. Must be provided if no `categoryId` is provided.
         * @param aspectTypeId - Aspect type identifier that is used for searching the page assignment in conjunction with either the `productId` or `categoryId`.
         * @param aspectAttributes - A JSON respresentation of aspect attributes. Each aspect attribute is a key/value pair. Aspect attributes serve as a runtime parameter contract between caller (for example, this API or the DWScript API) and callee (the page). This parameter must not contain more than 256 characters after URL decoding.
         * @param parameters - A free-form definition of parameters that influences the page rendering according to its implementation. This parameter must not contain more than 256 characters after URL decoding.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PageResult.
         *
         */
            getPages(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            categoryId?: string
                            productId?: string
                            aspectTypeId: string
                            aspectAttributes?: string
                            parameters?: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<PageResult>
            /**
         * Get Page Designer pages. The results will apply the visibility rules for each page's components, such as personalization or scheduled visibility.
         
         Either `categoryId` or `productId` must be given in addition to `aspectTypeId`. Because only a single page-to-product and page-to-category assignment per aspect type can be authored today, the returned result contains one element at most.
         
         **Important**: Currently, the Shopper Experience API can’t be used when the [storefront password protection](https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fpermissions%2Fb2c_storefront_password_protection.html&resultof=%22%73%74%6f%72%65%66%72%6f%6e%74%22%20%22%70%72%6f%74%65%63%74%69%6f%6e%22%20%22%70%72%6f%74%65%63%74%22%20) feature is enabled.
         
         **Important**: Because this resource uses the GET method, you must not pass sensitive data (payment card information, for example) and must not perform any transactional processes within the server-side scripts that are run for the page and components.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param categoryId - Category identifier that is used for searching the page assignment. Must be provided if no `productId` is provided.
         * @param productId - Product identifier that is used for searching the page assignment. Must be provided if no `categoryId` is provided.
         * @param aspectTypeId - Aspect type identifier that is used for searching the page assignment in conjunction with either the `productId` or `categoryId`.
         * @param aspectAttributes - A JSON respresentation of aspect attributes. Each aspect attribute is a key/value pair. Aspect attributes serve as a runtime parameter contract between caller (for example, this API or the DWScript API) and callee (the page). This parameter must not contain more than 256 characters after URL decoding.
         * @param parameters - A free-form definition of parameters that influences the page rendering according to its implementation. This parameter must not contain more than 256 characters after URL decoding.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PageResult otherwise.
         *
         */
            getPages<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            categoryId?: string
                            productId?: string
                            aspectTypeId: string
                            aspectAttributes?: string
                            parameters?: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : PageResult>
            /**
         * Get a Page Designer page based on a single page ID. The results will apply the visibility rules for the page's components, such as personalization or scheduled visibility.
         
         **Important**: Currently, the Shopper Experience API can’t be used when the [storefront password protection](https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fpermissions%2Fb2c_storefront_password_protection.html&resultof=%22%73%74%6f%72%65%66%72%6f%6e%74%22%20%22%70%72%6f%74%65%63%74%69%6f%6e%22%20%22%70%72%6f%74%65%63%74%22%20) feature is enabled.
         
         **Important**: Because this resource uses the GET method, you must not pass sensitive data (payment card information, for example) and must not perform any transactional processes within the server-side scripts that are run for the page and components.
         *
         * If you would like to get a raw Response object use the other getPage function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param pageId - Identifier for the requested page.
         * @param aspectAttributes - A JSON respresentation of aspect attributes. Each aspect attribute is a key/value pair. Aspect attributes serve as a runtime parameter contract between caller (for example, this API or the DWScript API) and callee (the page). This parameter must not contain more than 256 characters after URL decoding.
         * @param parameters - A free-form definition of parameters that influences the page rendering according to its implementation. This parameter must not contain more than 256 characters after URL decoding.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Page.
         *
         */
            getPage(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            pageId: string
                            aspectAttributes?: string
                            parameters?: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Page>
            /**
         * Get a Page Designer page based on a single page ID. The results will apply the visibility rules for the page's components, such as personalization or scheduled visibility.
         
         **Important**: Currently, the Shopper Experience API can’t be used when the [storefront password protection](https://documentation.b2c.commercecloud.salesforce.com/DOC1/index.jsp?topic=%2Fcom.demandware.dochelp%2Fcontent%2Fb2c_commerce%2Ftopics%2Fpermissions%2Fb2c_storefront_password_protection.html&resultof=%22%73%74%6f%72%65%66%72%6f%6e%74%22%20%22%70%72%6f%74%65%63%74%69%6f%6e%22%20%22%70%72%6f%74%65%63%74%22%20) feature is enabled.
         
         **Important**: Because this resource uses the GET method, you must not pass sensitive data (payment card information, for example) and must not perform any transactional processes within the server-side scripts that are run for the page and components.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param pageId - Identifier for the requested page.
         * @param aspectAttributes - A JSON respresentation of aspect attributes. Each aspect attribute is a key/value pair. Aspect attributes serve as a runtime parameter contract between caller (for example, this API or the DWScript API) and callee (the page). This parameter must not contain more than 256 characters after URL decoding.
         * @param parameters - A free-form definition of parameters that influences the page rendering according to its implementation. This parameter must not contain more than 256 characters after URL decoding.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Page otherwise.
         *
         */
            getPage<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            pageId: string
                            aspectAttributes?: string
                            parameters?: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Page>
        }
    }
    type GiftCertificate = {
        amount: number
        balance: number
        description?: string
        enabled: boolean
        maskedGiftCertificateCode: string
        merchantId: string
        message?: string
        recipientEmail: string
        recipientName: string
        senderName: string
        status: string
    } & {
        [key: string]: unknown
    }
    type GiftCertificateRequest = {
        giftCertificateCode: string
    } & {
        [key: string]: unknown
    }
    type RangeFilter$4 = {
        [key: string]: unknown
    }
    type BoolFilter$4 = {
        filters?: Array<any>
        operator: string
    } & {
        [key: string]: unknown
    }
    type MatchAllQuery$4 = Record<string, unknown>
    type FilteredQuery$4 = {
        filter: unknown
        query: unknown
    } & {
        [key: string]: unknown
    }
    type QueryFilter$4 = {
        query: unknown
    } & {
        [key: string]: unknown
    }
    type Query$4 = {
        boolQuery?: BoolQuery$3
        filteredQuery?: FilteredQuery$4
        matchAllQuery?: MatchAllQuery$4
        nestedQuery?: NestedQuery$3
        termQuery?: TermQuery$3
        textQuery?: TextQuery$3
    } & {
        [key: string]: unknown
    }
    type TermQuery$4 = {
        fields: Array<string>
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TermFilter$4 = {
        field: string
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TextQuery$4 = {
        fields: Array<string>
        searchPhrase: string
    } & {
        [key: string]: unknown
    }
    type Range2Filter$4 = {
        filterMode?: string
        fromField: string
        fromInclusive?: boolean
        fromValue?: unknown
        toField: string
        toInclusive?: boolean
        toValue?: unknown
    } & {
        [key: string]: unknown
    }
    type BoolQuery$4 = {
        must?: Array<any>
        mustNot?: Array<any>
        should?: Array<any>
    } & {
        [key: string]: unknown
    }
    type NestedQuery$4 = {
        path: string
        query: unknown
        scoreMode?: string
    } & {
        [key: string]: unknown
    }
    type Filter$4 = {
        boolFilter?: BoolFilter$4
        queryFilter?: QueryFilter$4
        range2Filter?: Range2Filter$4
        rangeFilter?: RangeFilter$4
        termFilter?: TermFilter$4
    } & {
        [key: string]: unknown
    }
    type Sort$4 = {
        field: string
        sortOrder?: string
    } & {
        [key: string]: unknown
    }
    type L10nString$3 = Record<string, unknown>
    type PropertyValueDefinition$3 = {
        description: L10nString$3
        displayValue: L10nString$3
        id: string
        position?: number
        value: string
    }
    /**
     * All path parameters that are used by at least one ShopperGiftCertificates method.
     */
    type ShopperGiftCertificatesPathParameters = {
        organizationId?: string
    }
    /**
     * All query parameters that are used by at least one ShopperGiftCertificates method.
     */
    type ShopperGiftCertificatesQueryParameters = {
        siteId?: string
    }
    /**
     * All parameters that are used by ShopperGiftCertificates.
     */
    type ShopperGiftCertificatesParameters = ShopperGiftCertificatesPathParameters &
        BaseUriParameters &
        ShopperGiftCertificatesQueryParameters
    /**
 * [Shopper Gift Certificates](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-gift-certificates:Summary)
 * ==================================
 *
 * *Obtain details about a gift certificate.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperGiftCertificates } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperGiftCertificatesClient = new ShopperGiftCertificates(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 1.0.12<br />
 * Last Updated: <br />
 * </span>
 
 *
 
 */
    declare class ShopperGiftCertificates<
        ConfigParameters extends ShopperGiftCertificatesParameters & Record<string, unknown>
    > {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string
        }
        static readonly defaultBaseUri =
            'https://{shortCode}.api.commercecloud.salesforce.com/pricing/shopper-gift-certificates/{version}'
        constructor(config: ClientConfigInit<ConfigParameters>)
        /**
         * Action to retrieve an existing gift certificate.
         *
         * If you would like to get a raw Response object use the other getGiftCertificate function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type GiftCertificate.
         *
         */
        getGiftCertificate(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: GiftCertificateRequest
            }>
        ): Promise<GiftCertificate>
        /**
         * Action to retrieve an existing gift certificate.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type GiftCertificate otherwise.
         *
         */
        getGiftCertificate<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: GiftCertificateRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : GiftCertificate>
    }
    declare namespace ShopperGiftCertificatesTypes {
        /*
         * Copyright (c) 2023, Salesforce, Inc.
         * All rights reserved.
         * SPDX-License-Identifier: BSD-3-Clause
         * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
         */
        /**
         * Makes a type easier to read.
         */
        type Prettify<T> = NonNullable<{
            [K in keyof T]: T[K]
        }>
        /**
         * Generates the types required on a method, based on those provided in the config.
         */
        type CompositeParameters<
            MethodParameters extends Record<string, unknown>,
            ConfigParameters extends Record<string, unknown>
        > = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>
        /**
         * If an object has a `parameters` property, and the `parameters` object has required properties,
         * then the `parameters` property on the root object is marked as required.
         */
        type RequireParametersUnlessAllAreOptional<
            T extends {
                parameters?: Record<string, unknown>
            }
        > = Record<string, never> extends NonNullable<T['parameters']>
            ? T
            : Prettify<T & Required<Pick<T, 'parameters'>>>
        /**
         * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
         * if not specified.
         */
        interface BaseUriParameters {
            shortCode: string
            version?: string // Optional, will default to "v1" if not provided.
        }
        /**
         * Generic interface for path parameters.
         */
        interface PathParameters {
            [key: string]: string | number | boolean
        }
        /**
         * Generic interface for query parameters.
         */
        interface QueryParameters {
            [key: string]: string | number | boolean | string[] | number[]
        }
        /**
         * Generic interface for all parameter types.
         */
        type UrlParameters = PathParameters | QueryParameters
        /**
         * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
         * it from the `RequestInit` provided by node-fetch.
         */
        type BrowserRequestInit = RequestInit
        /**
         * Any properties supported in either the browser or node are accepted.
         * Using the right properties in the right context is left to the user.
         */
        type FetchOptions = NodeRequestInit & BrowserRequestInit
        /**
         * Base options that can be passed to the `ClientConfig` class.
         */
        interface ClientConfigInit<Params extends BaseUriParameters> {
            baseUri?: string
            proxy?: string
            headers?: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions?: FetchOptions
            transformRequest?: (
                data: unknown,
                headers: {
                    [key: string]: string
                }
            ) => Required<FetchOptions>['body']
            throwOnBadResponse?: boolean
        }
        type FetchFunction = (
            input: RequestInfo,
            init?: FetchOptions | undefined
        ) => Promise<Response>
        /**
         * Configuration parameters common to Commerce SDK clients
         */
        class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
            baseUri?: string
            proxy?: string
            headers: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions: FetchOptions
            transformRequest: NonNullable<ClientConfigInit<Params>['transformRequest']>
            throwOnBadResponse: boolean
            constructor(config: ClientConfigInit<Params>)
            static readonly defaults: Pick<Required<ClientConfigInit<never>>, 'transformRequest'>
        }
        type GiftCertificate = {
            amount: number
            balance: number
            description?: string
            enabled: boolean
            maskedGiftCertificateCode: string
            merchantId: string
            message?: string
            recipientEmail: string
            recipientName: string
            senderName: string
            status: string
        } & {
            [key: string]: unknown
        }
        type GiftCertificateRequest = {
            giftCertificateCode: string
        } & {
            [key: string]: unknown
        }
        type ErrorResponse = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type ChangeControlled = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type RangeFilter = {
            [key: string]: unknown
        }
        type ChangeControlledDataType = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type Error = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type Money = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResult = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type SearchRequest = {
            limit?: number
            query: unknown
            sorts?: Array<Sort$4>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type PropertyDefinition = {
            defaultValue?: PropertyValueDefinition$3
            id?: string
            name: L10nString$3
            description: L10nString$3
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString$3
            possibleValues?: Array<PropertyValueDefinition$3>
            type: string
            visible?: boolean
        } & {
            [key: string]: unknown
        }
        type LocalizedString = Record<string, unknown>
        type PaginatedSearchResult = {
            query: unknown
            sorts?: Array<Sort$4>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type ClosedObject = Record<string, unknown>
        type OpenObject = Record<string, unknown>
        type NoPropertiesAllowed = Record<string, unknown>
        type SpecifiedPropertiesAllowed = Record<string, unknown>
        type BoolFilter = {
            filters?: Array<any>
            operator: string
        } & {
            [key: string]: unknown
        }
        type PaginatedSearchResultBase = {
            query: unknown
            sorts?: Array<Sort$4>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type MatchAllQuery = Record<string, unknown>
        type FilteredQuery = {
            filter: unknown
            query: unknown
        } & {
            [key: string]: unknown
        }
        type QueryFilter = {
            query: unknown
        } & {
            [key: string]: unknown
        }
        type Query = {
            boolQuery?: BoolQuery$4
            filteredQuery?: FilteredQuery
            matchAllQuery?: MatchAllQuery
            nestedQuery?: NestedQuery$4
            termQuery?: TermQuery$4
            textQuery?: TextQuery$4
        } & {
            [key: string]: unknown
        }
        type TermQuery = {
            fields: Array<string>
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TermFilter = {
            field: string
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TextQuery = {
            fields: Array<string>
            searchPhrase: string
        } & {
            [key: string]: unknown
        }
        type Range2Filter = {
            filterMode?: string
            fromField: string
            fromInclusive?: boolean
            fromValue?: unknown
            toField: string
            toInclusive?: boolean
            toValue?: unknown
        } & {
            [key: string]: unknown
        }
        type BoolQuery = {
            must?: Array<any>
            mustNot?: Array<any>
            should?: Array<any>
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResultBase = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type NestedQuery = {
            path: string
            query: unknown
            scoreMode?: string
        } & {
            [key: string]: unknown
        }
        type Filter = {
            boolFilter?: BoolFilter
            queryFilter?: QueryFilter
            range2Filter?: Range2Filter
            rangeFilter?: RangeFilter
            termFilter?: TermFilter
        } & {
            [key: string]: unknown
        }
        type Sort = {
            field: string
            sortOrder?: string
        } & {
            [key: string]: unknown
        }
        type SearchRequestBase = {
            limit?: number
            query: unknown
            sorts?: Array<Sort>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type MoneyMnemonic = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type L10nString = Record<string, unknown>
        type AttributeDefinition = {
            defaultValue?: PropertyValueDefinition$3
            id?: string
            name: L10nString
            description: L10nString
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString
            possibleValues?: Array<PropertyValueDefinition$3>
            type: string
            visible?: boolean
        }
        type PropertyValueDefinition = {
            description: L10nString
            displayValue: L10nString
            id: string
            position?: number
            value: string
        }
        /**
         * All path parameters that are used by at least one ShopperGiftCertificates method.
         */
        type ShopperGiftCertificatesPathParameters = {
            organizationId?: string
        }
        /**
         * All query parameters that are used by at least one ShopperGiftCertificates method.
         */
        type ShopperGiftCertificatesQueryParameters = {
            siteId?: string
        }
        /**
         * All parameters that are used by ShopperGiftCertificates.
         */
        type ShopperGiftCertificatesParameters = ShopperGiftCertificatesPathParameters &
            BaseUriParameters &
            ShopperGiftCertificatesQueryParameters
        /**
     * [Shopper Gift Certificates](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-gift-certificates:Summary)
     * ==================================
     *
     * *Obtain details about a gift certificate.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperGiftCertificates } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperGiftCertificatesClient = new ShopperGiftCertificates(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 1.0.12<br />
     * Last Updated: <br />
     * </span>
     
     *
     
     */
        class ShopperGiftCertificates<
            ConfigParameters extends ShopperGiftCertificatesParameters & Record<string, unknown>
        > {
            // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
            clientConfig: ClientConfig<ConfigParameters> & {
                baseUri: string
            }
            static readonly defaultBaseUri =
                'https://{shortCode}.api.commercecloud.salesforce.com/pricing/shopper-gift-certificates/{version}'
            constructor(config: ClientConfigInit<ConfigParameters>)
            /**
             * Action to retrieve an existing gift certificate.
             *
             * If you would like to get a raw Response object use the other getGiftCertificate function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type GiftCertificate.
             *
             */
            getGiftCertificate(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: GiftCertificateRequest
                }>
            ): Promise<GiftCertificate>
            /**
             * Action to retrieve an existing gift certificate.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type GiftCertificate otherwise.
             *
             */
            getGiftCertificate<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: GiftCertificateRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : GiftCertificate>
        }
    }
    type LoginRequest = {
        client_id?: string
        response_type?: string
        redirect_uri: string
        state?: string
        scope?: string
        usid?: string
        channel_id: string
        code_challenge?: string
    } & {
        [key: string]: unknown
    }
    type TrustedAgentTokenRequest = {
        agent_id?: string
        client_id: string
        channel_id: string
        code_verifier: string
        grant_type: string
        login_id: string
        idp_origin: string
    } & {
        [key: string]: unknown
    }
    type PasswordlessLoginRequest = {
        user_id: string
        mode: string
        locale?: string
        usid?: string
        channel_id: string
        callback_uri?: string
    } & {
        [key: string]: unknown
    }
    type PasswordLessLoginTokenRequest = {
        grant_type: string
        hint: string
        pwdless_login_token: string
        client_id?: string
        code_verifier?: string
    } & {
        [key: string]: unknown
    }
    type PasswordActionVerifyRequest = {
        client_id: string
        pwd_action_token: string
        code_verifier: string
        new_password: string
        channel_id: string
    } & {
        [key: string]: unknown
    }
    type TrustedSystemTokenRequest = {
        usid?: string
        grant_type: string
        hint: string
        login_id: string
        idp_origin: string
        client_id: string
        channel_id: string
        email_id?: string
    } & {
        [key: string]: unknown
    }
    type PasswordActionRequest = {
        user_id: string
        mode: string
        channel_id: string
        locale?: string
        client_id?: string
        code_challenge?: string
        callback_uri?: string
        idp_name?: string
    } & {
        [key: string]: unknown
    }
    type TokenResponse = {
        access_token: string
        id_token: string
        refresh_token: string
        expires_in: number
        refresh_token_expires_in: unknown
        token_type: string
        usid: string
        customer_id: string
        enc_user_id: string
        idp_access_token: string
    } & {
        [key: string]: unknown
    }
    type TokenRequest = {
        refresh_token?: string
        code?: string
        usid?: string
        grant_type: string
        redirect_uri?: string
        code_verifier?: string
        client_id?: string
        channel_id?: string
    } & {
        [key: string]: unknown
    }
    type TokenActionRequest = {
        token: string
        token_type_hint?: string
    } & {
        [key: string]: unknown
    }
    type SessionBridgeTokenRequest = {
        code: string
        client_id: string
        channel_id: string
        code_verifier: string
        dwsid: string
        grant_type: string
        login_id: string
        dwsgst?: string
        usid?: string
    } & {
        [key: string]: unknown
    }
    type RangeFilter$5 = {
        [key: string]: unknown
    }
    type BoolFilter$5 = {
        filters?: Array<Filter$4>
        operator: string
    } & {
        [key: string]: unknown
    }
    type MatchAllQuery$5 = Record<string, unknown>
    type FilteredQuery$5 = {
        filter: Filter$4
        query: Query$4
    } & {
        [key: string]: unknown
    }
    type QueryFilter$5 = {
        query: Query$4
    } & {
        [key: string]: unknown
    }
    type Query$5 = {
        boolQuery?: BoolQuery$4
        filteredQuery?: FilteredQuery$5
        matchAllQuery?: MatchAllQuery$5
        nestedQuery?: NestedQuery$4
        termQuery?: TermQuery$4
        textQuery?: TextQuery$4
    } & {
        [key: string]: unknown
    }
    type TermQuery$5 = {
        fields: Array<string>
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TermFilter$5 = {
        field: string
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TextQuery$5 = {
        fields: Array<string>
        searchPhrase: string
    } & {
        [key: string]: unknown
    }
    type Range2Filter$5 = {
        filterMode?: string
        fromField: string
        fromInclusive?: boolean
        fromValue?: unknown
        toField: string
        toInclusive?: boolean
        toValue?: unknown
    } & {
        [key: string]: unknown
    }
    type BoolQuery$5 = {
        must?: Array<Query$5>
        mustNot?: Array<Query$5>
        should?: Array<Query$5>
    } & {
        [key: string]: unknown
    }
    type NestedQuery$5 = {
        path: string
        query: Query$5
        scoreMode?: string
    } & {
        [key: string]: unknown
    }
    type Filter$5 = {
        boolFilter?: BoolFilter$5
        queryFilter?: QueryFilter$5
        range2Filter?: Range2Filter$5
        rangeFilter?: RangeFilter$5
        termFilter?: TermFilter$5
    } & {
        [key: string]: unknown
    }
    type Sort$5 = {
        field: string
        sortOrder?: string
    } & {
        [key: string]: unknown
    }
    type L10nString$4 = Record<string, unknown>
    type PropertyValueDefinition$4 = {
        description: L10nString$4
        displayValue: L10nString$4
        id: string
        position?: number
        value: string
    }
    /**
     * All path parameters that are used by at least one ShopperLogin method.
     */
    type ShopperLoginPathParameters = {
        organizationId?: string
    }
    /**
     * All query parameters that are used by at least one ShopperLogin method.
     */
    type ShopperLoginQueryParameters = {
        client_id?: string
        refresh_token?: string
        channel_id?: string
        hint?: string
        redirect_uri?: string
        response_type?: string
        scope?: string
        state?: string
        usid?: string
        code_challenge?: string
        login_id?: string
        idp_origin?: string
    }
    /**
     * All parameters that are used by ShopperLogin.
     */
    type ShopperLoginParameters = ShopperLoginPathParameters &
        BaseUriParameters &
        ShopperLoginQueryParameters
    /**
 * [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary)
 * ==================================
 *
 * *Enable shoppers to log in more easily, stay logged in for longer, and get a more fluid and personalized shopping experience powered by Shopper APIs.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperLogin } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperLoginClient = new ShopperLogin(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 1.39.17<br />
 * Last Updated: <br />
 * </span>
 
 *
 
 */
    declare class ShopperLogin<
        ConfigParameters extends ShopperLoginParameters & Record<string, unknown>
    > {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string
        }
        static readonly defaultBaseUri =
            'https://{shortCode}.api.commercecloud.salesforce.com/shopper/auth/{version}'
        constructor(config: ClientConfigInit<ConfigParameters>)
        /**
     * Logs in a shopper with credentials that are managed by a B2C Commerce instance (ECOM). It follows the authorization code grant flow as defined by the OAuth 2.1 standard. It also uses a proof key for code exchange (PKCE).
     
     For PKCE values:
     - The `code_verifier` string is a random string used for the `/token` endpoint request.
     - The `code_challenge` is an encoded version of the `code_verifier` string using an SHA-256 hash.
     
     The request must include a basic authorization header that contains a Base64 encoded version of the following string: `\<shopperUserID\>:\<shopperPassword\>`.
     
     Required parameters: `code_challenge`, `channel_id`, `client_id`, and `redirect_uri`.
     
     Optional parameters: `usid`.
     
     The SLAS `/login` endpoint redirects back to the redirect URI and returns an authorization code.
     
     Calls to `/login` made with the same loginId and tenantId within 1 second will result in a conflict.
     
     *
     * If you would like to get a raw Response object use the other authenticateCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type void.
     *
     */
        authenticateCustomer(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: LoginRequest
            }>
        ): Promise<void>
        /**
     * Logs in a shopper with credentials that are managed by a B2C Commerce instance (ECOM). It follows the authorization code grant flow as defined by the OAuth 2.1 standard. It also uses a proof key for code exchange (PKCE).
     
     For PKCE values:
     - The `code_verifier` string is a random string used for the `/token` endpoint request.
     - The `code_challenge` is an encoded version of the `code_verifier` string using an SHA-256 hash.
     
     The request must include a basic authorization header that contains a Base64 encoded version of the following string: `\<shopperUserID\>:\<shopperPassword\>`.
     
     Required parameters: `code_challenge`, `channel_id`, `client_id`, and `redirect_uri`.
     
     Optional parameters: `usid`.
     
     The SLAS `/login` endpoint redirects back to the redirect URI and returns an authorization code.
     
     Calls to `/login` made with the same loginId and tenantId within 1 second will result in a conflict.
     
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
        authenticateCustomer<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: LoginRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
        /**
         * Allows the customer to authenticate when their identity provider is down.
         *
         * If you would like to get a raw Response object use the other authorizePasswordlessCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Object.
         *
         */
        authorizePasswordlessCustomer(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: PasswordlessLoginRequest
            }>
        ): Promise<Record<string, unknown>>
        /**
         * Allows the customer to authenticate when their identity provider is down.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        authorizePasswordlessCustomer<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: PasswordlessLoginRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Record<string, unknown>>
        /**
     * Log out a shopper. The shopper's access token and refresh token are revoked. If the shopper authenticated with a B2C Commerce (ECOM) instance, the OCAPI JWT is also revoked. This should be called for Registered users that have logged in using SLAS. his should be called for registered users that have logged in using SLAS. This endpoint is not for use with guest users.
     
     Required header: Authorization header bearer token of the Shopper access token to logout.
     
     Required parameters: `refresh token`, `channel_id`, and `client`.
     *
     * If you would like to get a raw Response object use the other logoutCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param client_id - The SLAS client ID.
     * @param refresh_token - Refresh token that was given during the access token request.
     * @param channel_id - The `channel_id` parameter must be provided if the shopper authenticated using the `login` endpoint with ECOM.
     * @param hint - Optional parameter for logging out user sessions. Use `all-sessions` to log out all user sessions. If `hint` is not used, only the current user session will be logged out.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type TokenResponse.
     *
     */
        logoutCustomer(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        client_id: string
                        refresh_token: string
                        channel_id?: string
                        hint?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<TokenResponse>
        /**
     * Log out a shopper. The shopper's access token and refresh token are revoked. If the shopper authenticated with a B2C Commerce (ECOM) instance, the OCAPI JWT is also revoked. This should be called for Registered users that have logged in using SLAS. his should be called for registered users that have logged in using SLAS. This endpoint is not for use with guest users.
     
     Required header: Authorization header bearer token of the Shopper access token to logout.
     
     Required parameters: `refresh token`, `channel_id`, and `client`.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param client_id - The SLAS client ID.
     * @param refresh_token - Refresh token that was given during the access token request.
     * @param channel_id - The `channel_id` parameter must be provided if the shopper authenticated using the `login` endpoint with ECOM.
     * @param hint - Optional parameter for logging out user sessions. Use `all-sessions` to log out all user sessions. If `hint` is not used, only the current user session will be logged out.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
        logoutCustomer<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        client_id: string
                        refresh_token: string
                        channel_id?: string
                        hint?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : TokenResponse>
        /**
     * Get an authorization code after authenticating a user against an identity provider (IDP). This is the first step of the OAuth 2.1 authorization code flow, where a user can log in via federation to the IDP configured for the client. After successfully logging in, the user gets an authorization code via a redirect URI.
     
     This endpoint can be called from the front channel (the browser).
     *
     * If you would like to get a raw Response object use the other authorizeCustomer function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
     - `http://localhost:3000/callback`
     - `https://example.com/callback`
     - `com.example.app:redirect_uri_path`
     - ` *.subdomain.topleveldomain.com`
     
     * @param response_type - Must be `code`. Indicates that the client wants an authorization code (using the `authorization_code` grant type).
     * @param client_id - The client ID obtained during application registration.
     * @param scope -
     * @param state - Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended.
     * @param usid - A unique shopper identifier (USID). If not provided, a new USID is generated.
     * @param hint - Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.
     
     To use a public client, set `hint` to `guest` and use a public client ID to get an authorization code. If no `hint` is provided, the preferred IDP of the tenant is used by default.
     
     For session bridge authorization the `hint` should be set to `sb-user` for a registered customer and to `sb-guest` for a guest.
     * @param channel_id - The channel that this request is for. For an ECOM request, this is angalous to the site ID.
     * @param code_challenge - PKCE code challenge. Created by the client calling the `login` endpoint.
     
     The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
     
     The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
        authorizeCustomer(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        redirect_uri: string
                        response_type: string
                        client_id: string
                        scope?: string
                        state?: string
                        usid?: string
                        hint?: string
                        channel_id?: string
                        code_challenge: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<void>
        /**
     * Get an authorization code after authenticating a user against an identity provider (IDP). This is the first step of the OAuth 2.1 authorization code flow, where a user can log in via federation to the IDP configured for the client. After successfully logging in, the user gets an authorization code via a redirect URI.
     
     This endpoint can be called from the front channel (the browser).
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
     - `http://localhost:3000/callback`
     - `https://example.com/callback`
     - `com.example.app:redirect_uri_path`
     - ` *.subdomain.topleveldomain.com`
     
     * @param response_type - Must be `code`. Indicates that the client wants an authorization code (using the `authorization_code` grant type).
     * @param client_id - The client ID obtained during application registration.
     * @param scope -
     * @param state - Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended.
     * @param usid - A unique shopper identifier (USID). If not provided, a new USID is generated.
     * @param hint - Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.
     
     To use a public client, set `hint` to `guest` and use a public client ID to get an authorization code. If no `hint` is provided, the preferred IDP of the tenant is used by default.
     
     For session bridge authorization the `hint` should be set to `sb-user` for a registered customer and to `sb-guest` for a guest.
     * @param channel_id - The channel that this request is for. For an ECOM request, this is angalous to the site ID.
     * @param code_challenge - PKCE code challenge. Created by the client calling the `login` endpoint.
     
     The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
     
     The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
        authorizeCustomer<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        redirect_uri: string
                        response_type: string
                        client_id: string
                        scope?: string
                        state?: string
                        usid?: string
                        hint?: string
                        channel_id?: string
                        code_challenge: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
        /**
     * Get the shopper or guest JWT access token and a refresh token. This is the second step of the OAuth 2.1 authorization code flow.
     
     For a private client, an application is able to get an access token for the shopper through the back channel (a trusted server) by passing in the client credentials and the authorization code retrieved from the `authorize` endpoint.
     
     For a guest user, get the shopper JWT access token and a refresh token. This is where a client appplication is able to get an access token for the guest user through the back channel (a trusted server) by passing in the client credentials.
     
     For a public client using PKCE, an application will pass a PKCE `code_verifier` that matches the `code_challenge` that was used to `authorize` the customer along with the authorization code.
     
     When refreshing the access token with a private client ID and client secret, the refresh token is _not_ regenerated. However, when refreshing the access token with a public client ID, the refresh token is _always_ regenerated. The old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token.
     
     See the Body section for required parameters, including `grant_type` and others, depending on the value of `grant_type`.
     
     **Important**: We strongly recommended using the `channel_id` query parameter because **it will be required in the future**.
     *
     * If you would like to get a raw Response object use the other getAccessToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type TokenResponse.
     *
     */
        getAccessToken(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: TokenRequest
            }>
        ): Promise<TokenResponse>
        /**
     * Get the shopper or guest JWT access token and a refresh token. This is the second step of the OAuth 2.1 authorization code flow.
     
     For a private client, an application is able to get an access token for the shopper through the back channel (a trusted server) by passing in the client credentials and the authorization code retrieved from the `authorize` endpoint.
     
     For a guest user, get the shopper JWT access token and a refresh token. This is where a client appplication is able to get an access token for the guest user through the back channel (a trusted server) by passing in the client credentials.
     
     For a public client using PKCE, an application will pass a PKCE `code_verifier` that matches the `code_challenge` that was used to `authorize` the customer along with the authorization code.
     
     When refreshing the access token with a private client ID and client secret, the refresh token is _not_ regenerated. However, when refreshing the access token with a public client ID, the refresh token is _always_ regenerated. The old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token.
     
     See the Body section for required parameters, including `grant_type` and others, depending on the value of `grant_type`.
     
     **Important**: We strongly recommended using the `channel_id` query parameter because **it will be required in the future**.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
        getAccessToken<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: TokenRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : TokenResponse>
        /**
     * Get a shopper JWT access token for a registered customer using session bridge.
     
     For public client id requests the grant_type must be set to `session_bridge`.
     
     For  private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.
     *
     * If you would like to get a raw Response object use the other getSessionBridgeAccessToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type TokenResponse.
     *
     */
        getSessionBridgeAccessToken(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: SessionBridgeTokenRequest
            }>
        ): Promise<TokenResponse>
        /**
     * Get a shopper JWT access token for a registered customer using session bridge.
     
     For public client id requests the grant_type must be set to `session_bridge`.
     
     For  private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
        getSessionBridgeAccessToken<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: SessionBridgeTokenRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : TokenResponse>
        /**
     * Get a shopper JWT access token for a registered customer whose credentials are stored using a third party system.
     
     For external trusted-system requests, a basic authorization header that includes a SLAS client ID and SLAS client secret can be used in place of the bearer token.
     
     For internal trusted-system requests, the bearer token must be a C2C JWT.
     *
     * If you would like to get a raw Response object use the other getTrustedSystemAccessToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type TokenResponse.
     *
     */
        getTrustedSystemAccessToken(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: TrustedSystemTokenRequest
            }>
        ): Promise<TokenResponse>
        /**
     * Get a shopper JWT access token for a registered customer whose credentials are stored using a third party system.
     
     For external trusted-system requests, a basic authorization header that includes a SLAS client ID and SLAS client secret can be used in place of the bearer token.
     
     For internal trusted-system requests, the bearer token must be a C2C JWT.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
        getTrustedSystemAccessToken<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: TrustedSystemTokenRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : TokenResponse>
        /**
     * Obtains a new agent on behalf authorization token for a registered customer.
     *
     * If you would like to get a raw Response object use the other getTrustedAgentAuthorizationToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param client_id - The SLAS public client ID or SLAS private client ID for use with internal, trusted-agent requests. When using a private client ID a PKCE code challenge is not required.
     * @param channel_id - The channel (ECOM site) that the user is associated with.
     * @param code_challenge - PKCE code challenge. Created by the caller.
     
     The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
     
     The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
     
     The `code_challenge` is not needed if a using SLAS private `client_id`.
     * @param login_id - The ID of the shopper for trusted agent access.
     * @param idp_origin - The IDP that the shopper is associated with.
     * @param redirect_uri - The redirect for Account Manager to redirect to. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
     - `http://localhost:3000/callback`
     - `https://example.com/callback`
     - `com.example.app:redirect_uri_path`
     - ` *.subdomain.topleveldomain.com`
     
     * @param response_type - Must be `code`. Indicates that the caller wants an authorization code.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type void.
     *
     */
        getTrustedAgentAuthorizationToken(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        client_id: string
                        channel_id: string
                        code_challenge: string
                        login_id: string
                        idp_origin: string
                        redirect_uri: string
                        response_type: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<void>
        /**
     * Obtains a new agent on behalf authorization token for a registered customer.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param client_id - The SLAS public client ID or SLAS private client ID for use with internal, trusted-agent requests. When using a private client ID a PKCE code challenge is not required.
     * @param channel_id - The channel (ECOM site) that the user is associated with.
     * @param code_challenge - PKCE code challenge. Created by the caller.
     
     The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
     
     The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
     
     The `code_challenge` is not needed if a using SLAS private `client_id`.
     * @param login_id - The ID of the shopper for trusted agent access.
     * @param idp_origin - The IDP that the shopper is associated with.
     * @param redirect_uri - The redirect for Account Manager to redirect to. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
     - `http://localhost:3000/callback`
     - `https://example.com/callback`
     - `com.example.app:redirect_uri_path`
     - ` *.subdomain.topleveldomain.com`
     
     * @param response_type - Must be `code`. Indicates that the caller wants an authorization code.
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
     *
     */
        getTrustedAgentAuthorizationToken<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        client_id: string
                        channel_id: string
                        code_challenge: string
                        login_id: string
                        idp_origin: string
                        redirect_uri: string
                        response_type: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
        /**
     * Get a shopper JWT access token for a registered customer using a trusted agent (merchant).
     
     If using a SLAS private client ID, you must also use an `_sfdc_client_auth` header.
     
     The value of the `_sfdc_client_auth` header must be a Base64-encoded string. The string is composed of a SLAS private client ID and client secret, separated by a colon (`:`). For example, `privateClientId:privateClientsecret` becomes `cHJpdmF0ZUNsaWVudElkOnByaXZhdGVDbGllbnRzZWNyZXQ=` after Base64 encoding.
     *
     * If you would like to get a raw Response object use the other getTrustedAgentAccessToken function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type TokenResponse.
     *
     */
        getTrustedAgentAccessToken(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: TrustedAgentTokenRequest
            }>
        ): Promise<TokenResponse>
        /**
     * Get a shopper JWT access token for a registered customer using a trusted agent (merchant).
     
     If using a SLAS private client ID, you must also use an `_sfdc_client_auth` header.
     
     The value of the `_sfdc_client_auth` header must be a Base64-encoded string. The string is composed of a SLAS private client ID and client secret, separated by a colon (`:`). For example, `privateClientId:privateClientsecret` becomes `cHJpdmF0ZUNsaWVudElkOnByaXZhdGVDbGllbnRzZWNyZXQ=` after Base64 encoding.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
     *
     */
        getTrustedAgentAccessToken<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: TrustedAgentTokenRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : TokenResponse>
        /**
         * Request a reset password token
         *
         * If you would like to get a raw Response object use the other getPasswordResetToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        getPasswordResetToken(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: PasswordActionRequest
            }>
        ): Promise<void>
        /**
         * Request a reset password token
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        getPasswordResetToken<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: PasswordActionRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
        /**
         * Creates a new password
         *
         * If you would like to get a raw Response object use the other resetPassword function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
        resetPassword(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: PasswordActionVerifyRequest
            }>
        ): Promise<void>
        /**
         * Creates a new password
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
        resetPassword<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: PasswordActionVerifyRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : void>
        /**
         * Issue a shopper token (JWT).
         *
         * If you would like to get a raw Response object use the other getPasswordLessAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        getPasswordLessAccessToken(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: PasswordLessLoginTokenRequest
            }>
        ): Promise<TokenResponse>
        /**
         * Issue a shopper token (JWT).
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        getPasswordLessAccessToken<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: PasswordLessLoginTokenRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : TokenResponse>
        /**
         * Invalidate the refresh token. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, and the refresh token to be revoked is required in the body.
         *
         * If you would like to get a raw Response object use the other revokeToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
        revokeToken(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: TokenActionRequest
            }>
        ): Promise<TokenResponse>
        /**
         * Invalidate the refresh token. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, and the refresh token to be revoked is required in the body.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
        revokeToken<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: TokenActionRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : TokenResponse>
        /**
         * Returns the token properties. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, as well as an access token or refresh token. Use `token_type_hint` to help identify the token.
         *
         * If you would like to get a raw Response object use the other introspectToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Object.
         *
         */
        introspectToken(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: TokenActionRequest
            }>
        ): Promise<Record<string, unknown>>
        /**
         * Returns the token properties. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, as well as an access token or refresh token. Use `token_type_hint` to help identify the token.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        introspectToken<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: TokenActionRequest
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Record<string, unknown>>
        /**
         * Returns a JSON listing of claims about the currently authenticated user.
         *
         * If you would like to get a raw Response object use the other getUserInfo function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param channel_id - Used when getting user information for a SFCC login. For an ECOM customer, this is angalous to the site ID. Required when getting user information for an ECOM customer.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Object.
         *
         */
        getUserInfo(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        channel_id?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Record<string, unknown>>
        /**
         * Returns a JSON listing of claims about the currently authenticated user.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param channel_id - Used when getting user information for a SFCC login. For an ECOM customer, this is angalous to the site ID. Required when getting user information for an ECOM customer.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
        getUserInfo<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        channel_id?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Record<string, unknown>>
        /**
     * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
     
     For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute.
     
     *
     * If you would like to get a raw Response object use the other getWellknownOpenidConfiguration function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Object.
     *
     */
        getWellknownOpenidConfiguration(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Record<string, unknown>>
        /**
     * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
     
     For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute.
     
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
     *
     */
        getWellknownOpenidConfiguration<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Record<string, unknown>>
        /**
     * Returns a JSON Web Key Set (JWKS) containing the current, past, and future public keys. The key set enables clients to validate the Shopper JSON Web Token (JWT) issued by SLAS.
     
     For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute.
     
     *
     * If you would like to get a raw Response object use the other getJwksUri function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Object.
     *
     */
        getJwksUri(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Record<string, unknown>>
        /**
     * Returns a JSON Web Key Set (JWKS) containing the current, past, and future public keys. The key set enables clients to validate the Shopper JSON Web Token (JWT) issued by SLAS.
     
     For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute.
     
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
     *
     */
        getJwksUri<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Record<string, unknown>>
    }
    declare namespace ShopperLoginTypes {
        /*
         * Copyright (c) 2023, Salesforce, Inc.
         * All rights reserved.
         * SPDX-License-Identifier: BSD-3-Clause
         * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
         */
        /**
         * Makes a type easier to read.
         */
        type Prettify<T> = NonNullable<{
            [K in keyof T]: T[K]
        }>
        /**
         * Generates the types required on a method, based on those provided in the config.
         */
        type CompositeParameters<
            MethodParameters extends Record<string, unknown>,
            ConfigParameters extends Record<string, unknown>
        > = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>
        /**
         * If an object has a `parameters` property, and the `parameters` object has required properties,
         * then the `parameters` property on the root object is marked as required.
         */
        type RequireParametersUnlessAllAreOptional<
            T extends {
                parameters?: Record<string, unknown>
            }
        > = Record<string, never> extends NonNullable<T['parameters']>
            ? T
            : Prettify<T & Required<Pick<T, 'parameters'>>>
        /**
         * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
         * if not specified.
         */
        interface BaseUriParameters {
            shortCode: string
            version?: string // Optional, will default to "v1" if not provided.
        }
        /**
         * Generic interface for path parameters.
         */
        interface PathParameters {
            [key: string]: string | number | boolean
        }
        /**
         * Generic interface for query parameters.
         */
        interface QueryParameters {
            [key: string]: string | number | boolean | string[] | number[]
        }
        /**
         * Generic interface for all parameter types.
         */
        type UrlParameters = PathParameters | QueryParameters
        /**
         * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
         * it from the `RequestInit` provided by node-fetch.
         */
        type BrowserRequestInit = RequestInit
        /**
         * Any properties supported in either the browser or node are accepted.
         * Using the right properties in the right context is left to the user.
         */
        type FetchOptions = NodeRequestInit & BrowserRequestInit
        /**
         * Base options that can be passed to the `ClientConfig` class.
         */
        interface ClientConfigInit<Params extends BaseUriParameters> {
            baseUri?: string
            proxy?: string
            headers?: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions?: FetchOptions
            transformRequest?: (
                data: unknown,
                headers: {
                    [key: string]: string
                }
            ) => Required<FetchOptions>['body']
            throwOnBadResponse?: boolean
        }
        type FetchFunction = (
            input: RequestInfo,
            init?: FetchOptions | undefined
        ) => Promise<Response>
        /**
         * Configuration parameters common to Commerce SDK clients
         */
        class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
            baseUri?: string
            proxy?: string
            headers: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions: FetchOptions
            transformRequest: NonNullable<ClientConfigInit<Params>['transformRequest']>
            throwOnBadResponse: boolean
            constructor(config: ClientConfigInit<Params>)
            static readonly defaults: Pick<Required<ClientConfigInit<never>>, 'transformRequest'>
        }
        type LoginRequest = {
            client_id?: string
            response_type?: string
            redirect_uri: string
            state?: string
            scope?: string
            usid?: string
            channel_id: string
            code_challenge?: string
        } & {
            [key: string]: unknown
        }
        type TrustedAgentTokenRequest = {
            agent_id?: string
            client_id: string
            channel_id: string
            code_verifier: string
            grant_type: string
            login_id: string
            idp_origin: string
        } & {
            [key: string]: unknown
        }
        type IntrospectResponse = {
            active: boolean
            scope: string
            client_id: string
            sub: string
            exp: number
            username: string
            token_type: string
        } & {
            [key: string]: unknown
        }
        type PasswordlessLoginRequest = {
            user_id: string
            mode: string
            locale?: string
            usid?: string
            channel_id: string
            callback_uri?: string
        } & {
            [key: string]: unknown
        }
        type PasswordLessLoginTokenRequest = {
            grant_type: string
            hint: string
            pwdless_login_token: string
            client_id?: string
            code_verifier?: string
        } & {
            [key: string]: unknown
        }
        type Oauth2ErrorResponse = {
            error: string
            error_uri?: string
            error_description?: string
        } & {
            [key: string]: unknown
        }
        type PasswordActionVerifyRequest = {
            client_id: string
            pwd_action_token: string
            code_verifier: string
            new_password: string
            channel_id: string
        } & {
            [key: string]: unknown
        }
        type TrustedSystemTokenRequest = {
            usid?: string
            grant_type: string
            hint: string
            login_id: string
            idp_origin: string
            client_id: string
            channel_id: string
            email_id?: string
        } & {
            [key: string]: unknown
        }
        type PasswordActionRequest = {
            user_id: string
            mode: string
            channel_id: string
            locale?: string
            client_id?: string
            code_challenge?: string
            callback_uri?: string
            idp_name?: string
        } & {
            [key: string]: unknown
        }
        type TokenResponse = {
            access_token: string
            id_token: string
            refresh_token: string
            expires_in: number
            refresh_token_expires_in: unknown
            token_type: string
            usid: string
            customer_id: string
            enc_user_id: string
            idp_access_token: string
        } & {
            [key: string]: unknown
        }
        type TokenRequest = {
            refresh_token?: string
            code?: string
            usid?: string
            grant_type: string
            redirect_uri?: string
            code_verifier?: string
            client_id?: string
            channel_id?: string
        } & {
            [key: string]: unknown
        }
        type TokenActionRequest = {
            token: string
            token_type_hint?: string
        } & {
            [key: string]: unknown
        }
        type SessionBridgeTokenRequest = {
            code: string
            client_id: string
            channel_id: string
            code_verifier: string
            dwsid: string
            grant_type: string
            login_id: string
            dwsgst?: string
            usid?: string
        } & {
            [key: string]: unknown
        }
        type ErrorResponse = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type ChangeControlled = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type RangeFilter = {
            [key: string]: unknown
        }
        type ChangeControlledDataType = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type Error = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type Money = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResult = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type SearchRequest = {
            limit?: number
            query: Query$5
            sorts?: Array<Sort$5>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type PropertyDefinition = {
            defaultValue?: PropertyValueDefinition$4
            id?: string
            name: L10nString$4
            description: L10nString$4
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString$4
            possibleValues?: Array<PropertyValueDefinition$4>
            type: string
            visible?: boolean
        } & {
            [key: string]: unknown
        }
        type LocalizedString = Record<string, unknown>
        type PaginatedSearchResult = {
            query: Query$5
            sorts?: Array<Sort$5>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type ClosedObject = Record<string, unknown>
        type OpenObject = Record<string, unknown>
        type NoPropertiesAllowed = Record<string, unknown>
        type SpecifiedPropertiesAllowed = Record<string, unknown>
        type BoolFilter = {
            filters?: Array<Filter$5>
            operator: string
        } & {
            [key: string]: unknown
        }
        type PaginatedSearchResultBase = {
            query: Query$5
            sorts?: Array<Sort$5>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type MatchAllQuery = Record<string, unknown>
        type FilteredQuery = {
            filter: Filter$5
            query: Query$5
        } & {
            [key: string]: unknown
        }
        type QueryFilter = {
            query: Query$5
        } & {
            [key: string]: unknown
        }
        type Query = {
            boolQuery?: BoolQuery$5
            filteredQuery?: FilteredQuery
            matchAllQuery?: MatchAllQuery
            nestedQuery?: NestedQuery$5
            termQuery?: TermQuery$5
            textQuery?: TextQuery$5
        } & {
            [key: string]: unknown
        }
        type TermQuery = {
            fields: Array<string>
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TermFilter = {
            field: string
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TextQuery = {
            fields: Array<string>
            searchPhrase: string
        } & {
            [key: string]: unknown
        }
        type Range2Filter = {
            filterMode?: string
            fromField: string
            fromInclusive?: boolean
            fromValue?: unknown
            toField: string
            toInclusive?: boolean
            toValue?: unknown
        } & {
            [key: string]: unknown
        }
        type BoolQuery = {
            must?: Array<Query>
            mustNot?: Array<Query>
            should?: Array<Query>
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResultBase = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type NestedQuery = {
            path: string
            query: Query
            scoreMode?: string
        } & {
            [key: string]: unknown
        }
        type Filter = {
            boolFilter?: BoolFilter
            queryFilter?: QueryFilter
            range2Filter?: Range2Filter
            rangeFilter?: RangeFilter
            termFilter?: TermFilter
        } & {
            [key: string]: unknown
        }
        type Sort = {
            field: string
            sortOrder?: string
        } & {
            [key: string]: unknown
        }
        type SearchRequestBase = {
            limit?: number
            query: Query
            sorts?: Array<Sort>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type MoneyMnemonic = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type L10nString = Record<string, unknown>
        type AttributeDefinition = {
            defaultValue?: PropertyValueDefinition$4
            id?: string
            name: L10nString
            description: L10nString
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString
            possibleValues?: Array<PropertyValueDefinition$4>
            type: string
            visible?: boolean
        }
        type PropertyValueDefinition = {
            description: L10nString
            displayValue: L10nString
            id: string
            position?: number
            value: string
        }
        /**
         * All path parameters that are used by at least one ShopperLogin method.
         */
        type ShopperLoginPathParameters = {
            organizationId?: string
        }
        /**
         * All query parameters that are used by at least one ShopperLogin method.
         */
        type ShopperLoginQueryParameters = {
            client_id?: string
            refresh_token?: string
            channel_id?: string
            hint?: string
            redirect_uri?: string
            response_type?: string
            scope?: string
            state?: string
            usid?: string
            code_challenge?: string
            login_id?: string
            idp_origin?: string
        }
        /**
         * All parameters that are used by ShopperLogin.
         */
        type ShopperLoginParameters = ShopperLoginPathParameters &
            BaseUriParameters &
            ShopperLoginQueryParameters
        /**
     * [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary)
     * ==================================
     *
     * *Enable shoppers to log in more easily, stay logged in for longer, and get a more fluid and personalized shopping experience powered by Shopper APIs.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperLogin } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperLoginClient = new ShopperLogin(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 1.39.17<br />
     * Last Updated: <br />
     * </span>
     
     *
     
     */
        class ShopperLogin<
            ConfigParameters extends ShopperLoginParameters & Record<string, unknown>
        > {
            // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
            clientConfig: ClientConfig<ConfigParameters> & {
                baseUri: string
            }
            static readonly defaultBaseUri =
                'https://{shortCode}.api.commercecloud.salesforce.com/shopper/auth/{version}'
            constructor(config: ClientConfigInit<ConfigParameters>)
            /**
         * Logs in a shopper with credentials that are managed by a B2C Commerce instance (ECOM). It follows the authorization code grant flow as defined by the OAuth 2.1 standard. It also uses a proof key for code exchange (PKCE).
         
         For PKCE values:
         - The `code_verifier` string is a random string used for the `/token` endpoint request.
         - The `code_challenge` is an encoded version of the `code_verifier` string using an SHA-256 hash.
         
         The request must include a basic authorization header that contains a Base64 encoded version of the following string: `\<shopperUserID\>:\<shopperPassword\>`.
         
         Required parameters: `code_challenge`, `channel_id`, `client_id`, and `redirect_uri`.
         
         Optional parameters: `usid`.
         
         The SLAS `/login` endpoint redirects back to the redirect URI and returns an authorization code.
         
         Calls to `/login` made with the same loginId and tenantId within 1 second will result in a conflict.
         
         *
         * If you would like to get a raw Response object use the other authenticateCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type void.
         *
         */
            authenticateCustomer(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: LoginRequest
                }>
            ): Promise<void>
            /**
         * Logs in a shopper with credentials that are managed by a B2C Commerce instance (ECOM). It follows the authorization code grant flow as defined by the OAuth 2.1 standard. It also uses a proof key for code exchange (PKCE).
         
         For PKCE values:
         - The `code_verifier` string is a random string used for the `/token` endpoint request.
         - The `code_challenge` is an encoded version of the `code_verifier` string using an SHA-256 hash.
         
         The request must include a basic authorization header that contains a Base64 encoded version of the following string: `\<shopperUserID\>:\<shopperPassword\>`.
         
         Required parameters: `code_challenge`, `channel_id`, `client_id`, and `redirect_uri`.
         
         Optional parameters: `usid`.
         
         The SLAS `/login` endpoint redirects back to the redirect URI and returns an authorization code.
         
         Calls to `/login` made with the same loginId and tenantId within 1 second will result in a conflict.
         
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
            authenticateCustomer<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: LoginRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
             * Allows the customer to authenticate when their identity provider is down.
             *
             * If you would like to get a raw Response object use the other authorizePasswordlessCustomer function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type Object.
             *
             */
            authorizePasswordlessCustomer(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordlessLoginRequest
                }>
            ): Promise<Record<string, unknown>>
            /**
             * Allows the customer to authenticate when their identity provider is down.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
             *
             */
            authorizePasswordlessCustomer<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordlessLoginRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Record<string, unknown>>
            /**
         * Log out a shopper. The shopper's access token and refresh token are revoked. If the shopper authenticated with a B2C Commerce (ECOM) instance, the OCAPI JWT is also revoked. This should be called for Registered users that have logged in using SLAS. his should be called for registered users that have logged in using SLAS. This endpoint is not for use with guest users.
         
         Required header: Authorization header bearer token of the Shopper access token to logout.
         
         Required parameters: `refresh token`, `channel_id`, and `client`.
         *
         * If you would like to get a raw Response object use the other logoutCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param client_id - The SLAS client ID.
         * @param refresh_token - Refresh token that was given during the access token request.
         * @param channel_id - The `channel_id` parameter must be provided if the shopper authenticated using the `login` endpoint with ECOM.
         * @param hint - Optional parameter for logging out user sessions. Use `all-sessions` to log out all user sessions. If `hint` is not used, only the current user session will be logged out.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type TokenResponse.
         *
         */
            logoutCustomer(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            client_id: string
                            refresh_token: string
                            channel_id?: string
                            hint?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<TokenResponse>
            /**
         * Log out a shopper. The shopper's access token and refresh token are revoked. If the shopper authenticated with a B2C Commerce (ECOM) instance, the OCAPI JWT is also revoked. This should be called for Registered users that have logged in using SLAS. his should be called for registered users that have logged in using SLAS. This endpoint is not for use with guest users.
         
         Required header: Authorization header bearer token of the Shopper access token to logout.
         
         Required parameters: `refresh token`, `channel_id`, and `client`.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param client_id - The SLAS client ID.
         * @param refresh_token - Refresh token that was given during the access token request.
         * @param channel_id - The `channel_id` parameter must be provided if the shopper authenticated using the `login` endpoint with ECOM.
         * @param hint - Optional parameter for logging out user sessions. Use `all-sessions` to log out all user sessions. If `hint` is not used, only the current user session will be logged out.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
            logoutCustomer<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            client_id: string
                            refresh_token: string
                            channel_id?: string
                            hint?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : TokenResponse>
            /**
         * Get an authorization code after authenticating a user against an identity provider (IDP). This is the first step of the OAuth 2.1 authorization code flow, where a user can log in via federation to the IDP configured for the client. After successfully logging in, the user gets an authorization code via a redirect URI.
         
         This endpoint can be called from the front channel (the browser).
         *
         * If you would like to get a raw Response object use the other authorizeCustomer function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
         - `http://localhost:3000/callback`
         - `https://example.com/callback`
         - `com.example.app:redirect_uri_path`
         - ` *.subdomain.topleveldomain.com`
         
         * @param response_type - Must be `code`. Indicates that the client wants an authorization code (using the `authorization_code` grant type).
         * @param client_id - The client ID obtained during application registration.
         * @param scope -
         * @param state - Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended.
         * @param usid - A unique shopper identifier (USID). If not provided, a new USID is generated.
         * @param hint - Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.
         
         To use a public client, set `hint` to `guest` and use a public client ID to get an authorization code. If no `hint` is provided, the preferred IDP of the tenant is used by default.
         
         For session bridge authorization the `hint` should be set to `sb-user` for a registered customer and to `sb-guest` for a guest.
         * @param channel_id - The channel that this request is for. For an ECOM request, this is angalous to the site ID.
         * @param code_challenge - PKCE code challenge. Created by the client calling the `login` endpoint.
         
         The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
         
         The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
            authorizeCustomer(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            redirect_uri: string
                            response_type: string
                            client_id: string
                            scope?: string
                            state?: string
                            usid?: string
                            hint?: string
                            channel_id?: string
                            code_challenge: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<void>
            /**
         * Get an authorization code after authenticating a user against an identity provider (IDP). This is the first step of the OAuth 2.1 authorization code flow, where a user can log in via federation to the IDP configured for the client. After successfully logging in, the user gets an authorization code via a redirect URI.
         
         This endpoint can be called from the front channel (the browser).
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
         - `http://localhost:3000/callback`
         - `https://example.com/callback`
         - `com.example.app:redirect_uri_path`
         - ` *.subdomain.topleveldomain.com`
         
         * @param response_type - Must be `code`. Indicates that the client wants an authorization code (using the `authorization_code` grant type).
         * @param client_id - The client ID obtained during application registration.
         * @param scope -
         * @param state - Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended.
         * @param usid - A unique shopper identifier (USID). If not provided, a new USID is generated.
         * @param hint - Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.
         
         To use a public client, set `hint` to `guest` and use a public client ID to get an authorization code. If no `hint` is provided, the preferred IDP of the tenant is used by default.
         
         For session bridge authorization the `hint` should be set to `sb-user` for a registered customer and to `sb-guest` for a guest.
         * @param channel_id - The channel that this request is for. For an ECOM request, this is angalous to the site ID.
         * @param code_challenge - PKCE code challenge. Created by the client calling the `login` endpoint.
         
         The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
         
         The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
            authorizeCustomer<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            redirect_uri: string
                            response_type: string
                            client_id: string
                            scope?: string
                            state?: string
                            usid?: string
                            hint?: string
                            channel_id?: string
                            code_challenge: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
         * Get the shopper or guest JWT access token and a refresh token. This is the second step of the OAuth 2.1 authorization code flow.
         
         For a private client, an application is able to get an access token for the shopper through the back channel (a trusted server) by passing in the client credentials and the authorization code retrieved from the `authorize` endpoint.
         
         For a guest user, get the shopper JWT access token and a refresh token. This is where a client appplication is able to get an access token for the guest user through the back channel (a trusted server) by passing in the client credentials.
         
         For a public client using PKCE, an application will pass a PKCE `code_verifier` that matches the `code_challenge` that was used to `authorize` the customer along with the authorization code.
         
         When refreshing the access token with a private client ID and client secret, the refresh token is _not_ regenerated. However, when refreshing the access token with a public client ID, the refresh token is _always_ regenerated. The old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token.
         
         See the Body section for required parameters, including `grant_type` and others, depending on the value of `grant_type`.
         
         **Important**: We strongly recommended using the `channel_id` query parameter because **it will be required in the future**.
         *
         * If you would like to get a raw Response object use the other getAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
            getAccessToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TokenRequest
                }>
            ): Promise<TokenResponse>
            /**
         * Get the shopper or guest JWT access token and a refresh token. This is the second step of the OAuth 2.1 authorization code flow.
         
         For a private client, an application is able to get an access token for the shopper through the back channel (a trusted server) by passing in the client credentials and the authorization code retrieved from the `authorize` endpoint.
         
         For a guest user, get the shopper JWT access token and a refresh token. This is where a client appplication is able to get an access token for the guest user through the back channel (a trusted server) by passing in the client credentials.
         
         For a public client using PKCE, an application will pass a PKCE `code_verifier` that matches the `code_challenge` that was used to `authorize` the customer along with the authorization code.
         
         When refreshing the access token with a private client ID and client secret, the refresh token is _not_ regenerated. However, when refreshing the access token with a public client ID, the refresh token is _always_ regenerated. The old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token.
         
         See the Body section for required parameters, including `grant_type` and others, depending on the value of `grant_type`.
         
         **Important**: We strongly recommended using the `channel_id` query parameter because **it will be required in the future**.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
            getAccessToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TokenRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : TokenResponse>
            /**
         * Get a shopper JWT access token for a registered customer using session bridge.
         
         For public client id requests the grant_type must be set to `session_bridge`.
         
         For  private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.
         *
         * If you would like to get a raw Response object use the other getSessionBridgeAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
            getSessionBridgeAccessToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: SessionBridgeTokenRequest
                }>
            ): Promise<TokenResponse>
            /**
         * Get a shopper JWT access token for a registered customer using session bridge.
         
         For public client id requests the grant_type must be set to `session_bridge`.
         
         For  private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
            getSessionBridgeAccessToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: SessionBridgeTokenRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : TokenResponse>
            /**
         * Get a shopper JWT access token for a registered customer whose credentials are stored using a third party system.
         
         For external trusted-system requests, a basic authorization header that includes a SLAS client ID and SLAS client secret can be used in place of the bearer token.
         
         For internal trusted-system requests, the bearer token must be a C2C JWT.
         *
         * If you would like to get a raw Response object use the other getTrustedSystemAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
            getTrustedSystemAccessToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TrustedSystemTokenRequest
                }>
            ): Promise<TokenResponse>
            /**
         * Get a shopper JWT access token for a registered customer whose credentials are stored using a third party system.
         
         For external trusted-system requests, a basic authorization header that includes a SLAS client ID and SLAS client secret can be used in place of the bearer token.
         
         For internal trusted-system requests, the bearer token must be a C2C JWT.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
            getTrustedSystemAccessToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TrustedSystemTokenRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : TokenResponse>
            /**
         * Obtains a new agent on behalf authorization token for a registered customer.
         *
         * If you would like to get a raw Response object use the other getTrustedAgentAuthorizationToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param client_id - The SLAS public client ID or SLAS private client ID for use with internal, trusted-agent requests. When using a private client ID a PKCE code challenge is not required.
         * @param channel_id - The channel (ECOM site) that the user is associated with.
         * @param code_challenge - PKCE code challenge. Created by the caller.
         
         The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
         
         The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
         
         The `code_challenge` is not needed if a using SLAS private `client_id`.
         * @param login_id - The ID of the shopper for trusted agent access.
         * @param idp_origin - The IDP that the shopper is associated with.
         * @param redirect_uri - The redirect for Account Manager to redirect to. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
         - `http://localhost:3000/callback`
         - `https://example.com/callback`
         - `com.example.app:redirect_uri_path`
         - ` *.subdomain.topleveldomain.com`
         
         * @param response_type - Must be `code`. Indicates that the caller wants an authorization code.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type void.
         *
         */
            getTrustedAgentAuthorizationToken(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            client_id: string
                            channel_id: string
                            code_challenge: string
                            login_id: string
                            idp_origin: string
                            redirect_uri: string
                            response_type: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<void>
            /**
         * Obtains a new agent on behalf authorization token for a registered customer.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param client_id - The SLAS public client ID or SLAS private client ID for use with internal, trusted-agent requests. When using a private client ID a PKCE code challenge is not required.
         * @param channel_id - The channel (ECOM site) that the user is associated with.
         * @param code_challenge - PKCE code challenge. Created by the caller.
         
         The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
         
         The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
         
         The `code_challenge` is not needed if a using SLAS private `client_id`.
         * @param login_id - The ID of the shopper for trusted agent access.
         * @param idp_origin - The IDP that the shopper is associated with.
         * @param redirect_uri - The redirect for Account Manager to redirect to. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
         - `http://localhost:3000/callback`
         - `https://example.com/callback`
         - `com.example.app:redirect_uri_path`
         - ` *.subdomain.topleveldomain.com`
         
         * @param response_type - Must be `code`. Indicates that the caller wants an authorization code.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
         *
         */
            getTrustedAgentAuthorizationToken<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            client_id: string
                            channel_id: string
                            code_challenge: string
                            login_id: string
                            idp_origin: string
                            redirect_uri: string
                            response_type: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
         * Get a shopper JWT access token for a registered customer using a trusted agent (merchant).
         
         If using a SLAS private client ID, you must also use an `_sfdc_client_auth` header.
         
         The value of the `_sfdc_client_auth` header must be a Base64-encoded string. The string is composed of a SLAS private client ID and client secret, separated by a colon (`:`). For example, `privateClientId:privateClientsecret` becomes `cHJpdmF0ZUNsaWVudElkOnByaXZhdGVDbGllbnRzZWNyZXQ=` after Base64 encoding.
         *
         * If you would like to get a raw Response object use the other getTrustedAgentAccessToken function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type TokenResponse.
         *
         */
            getTrustedAgentAccessToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TrustedAgentTokenRequest
                }>
            ): Promise<TokenResponse>
            /**
         * Get a shopper JWT access token for a registered customer using a trusted agent (merchant).
         
         If using a SLAS private client ID, you must also use an `_sfdc_client_auth` header.
         
         The value of the `_sfdc_client_auth` header must be a Base64-encoded string. The string is composed of a SLAS private client ID and client secret, separated by a colon (`:`). For example, `privateClientId:privateClientsecret` becomes `cHJpdmF0ZUNsaWVudElkOnByaXZhdGVDbGllbnRzZWNyZXQ=` after Base64 encoding.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
         *
         */
            getTrustedAgentAccessToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TrustedAgentTokenRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : TokenResponse>
            /**
             * Request a reset password token
             *
             * If you would like to get a raw Response object use the other getPasswordResetToken function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type void.
             *
             */
            getPasswordResetToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordActionRequest
                }>
            ): Promise<void>
            /**
             * Request a reset password token
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            getPasswordResetToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordActionRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
             * Creates a new password
             *
             * If you would like to get a raw Response object use the other resetPassword function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type void.
             *
             */
            resetPassword(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordActionVerifyRequest
                }>
            ): Promise<void>
            /**
             * Creates a new password
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            resetPassword<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordActionVerifyRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
             * Issue a shopper token (JWT).
             *
             * If you would like to get a raw Response object use the other getPasswordLessAccessToken function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type TokenResponse.
             *
             */
            getPasswordLessAccessToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordLessLoginTokenRequest
                }>
            ): Promise<TokenResponse>
            /**
             * Issue a shopper token (JWT).
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
             *
             */
            getPasswordLessAccessToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordLessLoginTokenRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : TokenResponse>
            /**
             * Invalidate the refresh token. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, and the refresh token to be revoked is required in the body.
             *
             * If you would like to get a raw Response object use the other revokeToken function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type TokenResponse.
             *
             */
            revokeToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TokenActionRequest
                }>
            ): Promise<TokenResponse>
            /**
             * Invalidate the refresh token. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, and the refresh token to be revoked is required in the body.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
             *
             */
            revokeToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TokenActionRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : TokenResponse>
            /**
             * Returns the token properties. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, as well as an access token or refresh token. Use `token_type_hint` to help identify the token.
             *
             * If you would like to get a raw Response object use the other introspectToken function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type Object.
             *
             */
            introspectToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TokenActionRequest
                }>
            ): Promise<Record<string, unknown>>
            /**
             * Returns the token properties. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, as well as an access token or refresh token. Use `token_type_hint` to help identify the token.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
             *
             */
            introspectToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TokenActionRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Record<string, unknown>>
            /**
             * Returns a JSON listing of claims about the currently authenticated user.
             *
             * If you would like to get a raw Response object use the other getUserInfo function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param channel_id - Used when getting user information for a SFCC login. For an ECOM customer, this is angalous to the site ID. Required when getting user information for an ECOM customer.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type Object.
             *
             */
            getUserInfo(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            channel_id?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Record<string, unknown>>
            /**
             * Returns a JSON listing of claims about the currently authenticated user.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param channel_id - Used when getting user information for a SFCC login. For an ECOM customer, this is angalous to the site ID. Required when getting user information for an ECOM customer.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
             *
             */
            getUserInfo<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            channel_id?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Record<string, unknown>>
            /**
         * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
         
         For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute.
         
         *
         * If you would like to get a raw Response object use the other getWellknownOpenidConfiguration function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Object.
         *
         */
            getWellknownOpenidConfiguration(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Record<string, unknown>>
            /**
         * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
         
         For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute.
         
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
            getWellknownOpenidConfiguration<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Record<string, unknown>>
            /**
         * Returns a JSON Web Key Set (JWKS) containing the current, past, and future public keys. The key set enables clients to validate the Shopper JSON Web Token (JWT) issued by SLAS.
         
         For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute.
         
         *
         * If you would like to get a raw Response object use the other getJwksUri function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Object.
         *
         */
            getJwksUri(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Record<string, unknown>>
            /**
         * Returns a JSON Web Key Set (JWKS) containing the current, past, and future public keys. The key set enables clients to validate the Shopper JSON Web Token (JWT) issued by SLAS.
         
         For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute.
         
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
         *
         */
            getJwksUri<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Record<string, unknown>>
        }
    }
    type BoolFilter$6 = {
        filters?: Array<Filter$5>
        operator: string
    } & {
        [key: string]: unknown
    }
    type MatchAllQuery$6 = Record<string, unknown>
    type FilteredQuery$6 = {
        filter: Filter$5
        query: Query$5
    } & {
        [key: string]: unknown
    }
    type QueryFilter$6 = {
        query: Query$5
    } & {
        [key: string]: unknown
    }
    type Query$6 = {
        boolQuery?: BoolQuery$5
        filteredQuery?: FilteredQuery$6
        matchAllQuery?: MatchAllQuery$6
        nestedQuery?: NestedQuery$5
        termQuery?: TermQuery$5
        textQuery?: TextQuery$5
    } & {
        [key: string]: unknown
    }
    type TermQuery$6 = {
        fields: Array<string>
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TermFilter$6 = {
        field: string
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TextQuery$6 = {
        fields: Array<string>
        searchPhrase: string
    } & {
        [key: string]: unknown
    }
    type Range2Filter$6 = {
        filterMode?: string
        fromField: string
        fromInclusive?: boolean
        fromValue?: unknown
        toField: string
        toInclusive?: boolean
        toValue?: unknown
    } & {
        [key: string]: unknown
    }
    type BoolQuery$6 = {
        must?: Array<Query$6>
        mustNot?: Array<Query$6>
        should?: Array<Query$6>
    } & {
        [key: string]: unknown
    }
    type NestedQuery$6 = {
        path: string
        query: Query$6
        scoreMode?: string
    } & {
        [key: string]: unknown
    }
    type Filter$6 = {
        boolFilter?: BoolFilter$6
        queryFilter?: QueryFilter$6
        range2Filter?: Range2Filter$6
        rangeFilter?: RangeFilter$5
        termFilter?: TermFilter$6
    } & {
        [key: string]: unknown
    }
    type Sort$6 = {
        field: string
        sortOrder?: string
    } & {
        [key: string]: unknown
    }
    type RangeFilter$6 = {
        field: string
        from?: unknown
        fromInclusive?: boolean
        to?: unknown
        toInclusive?: boolean
    } & {
        [key: string]: unknown
    }
    type L10nString$5 = Record<string, unknown>
    type PropertyValueDefinition$5 = {
        description: L10nString$5
        displayValue: L10nString$5
        id: string
        position?: number
        value: string
    }
    type PaymentCardSpec$0 = {
        cardType?: string
        checksumVerificationEnabled?: boolean
        description?: string
        image?: string
        name?: string
        numberLengths?: Array<string>
        numberPrefixes?: Array<string>
    } & {
        [key: string]: unknown
    }
    type OrderAddress$1 = {
        address1?: string
        address2?: string
        city?: string
        companyName?: string
        countryCode?: string
        firstName?: string
        fullName?: string
        id?: string
        jobTitle?: string
        lastName?: string
        phone?: string
        postBox?: string
        postalCode?: string
        salutation?: string
        secondName?: string
        stateCode?: string
        suffix?: string
        suite?: string
        title?: string
    } & {
        [key: string]: unknown
    }
    type PaymentCard$1 = {
        cardType?: string
        creditCardExpired?: boolean
        creditCardToken?: string
        expirationMonth?: number
        expirationYear?: number
        holder?: string
        issueNumber?: string
        maskedNumber?: string
        numberLastDigits?: string
        validFromMonth?: number
        validFromYear?: number
    }
    type ShippingItem$1 = {
        adjustedTax?: number
        basePrice?: number
        itemId?: string
        itemText?: string
        price?: number
        priceAdjustments?: Array<PriceAdjustment$0>
        priceAfterItemDiscount?: number
        shipmentId?: string
        tax?: number
        taxBasis?: number
        taxClassId?: string
        taxRate?: number
    } & {
        [key: string]: unknown
    }
    type Discount$1 = {
        amount?: number
        percentage?: number
        priceBookId?: string
        type: string
    } & {
        [key: string]: unknown
    }
    type Note$0 = {
        createdBy?: string
        creationDate?: unknown
        id?: string
        subject?: string
        text?: string
    }
    type CouponItem$1 = {
        code: string
        couponItemId?: string
        statusCode?: string
        valid?: boolean
    } & {
        [key: string]: unknown
    }
    type ShippingPromotion$1 = {
        calloutMsg?: string
        promotionId?: string
        promotionName?: string
    } & {
        [key: string]: unknown
    }
    type ProductItem$1 = {
        adjustedTax?: number
        basePrice?: number
        bonusDiscountLineItemId?: string
        bonusProductLineItem?: boolean
        bundledProductItems?: Array<ProductItem$1>
        gift?: boolean
        giftMessage?: string
        inventoryId?: string
        itemId?: string
        itemText?: string
        optionItems?: Array<OptionItem$0>
        price?: number
        priceAdjustments?: Array<PriceAdjustment$0>
        priceAfterItemDiscount?: number
        priceAfterOrderDiscount?: number
        productId?: string
        productListItem?: ProductListItemReference$0
        productName?: string
        quantity?: number
        shipmentId?: string
        shippingItemId?: string
        tax?: number
        taxBasis?: number
        taxClassId?: string
        taxRate?: number
    } & {
        [key: string]: unknown
    }
    type Taxes$0 = {
        taxes: Record<string, unknown>
    }
    type OrderPaymentInstrument$1 = {
        amount?: number
        authorizationStatus?: Status$0
        bankRoutingNumber?: string
        maskedGiftCertificateCode?: string
        paymentCard?: PaymentCard$1
        paymentInstrumentId?: string
        paymentMethodId?: string
    } & {
        [key: string]: unknown
    }
    type BonusDiscountLineItem$1 = {
        bonusProducts?: Array<ProductDetailsLink$0>
        couponCode?: string
        id?: string
        maxBonusItems?: number
        promotionId?: string
    } & {
        [key: string]: unknown
    }
    type PaymentMethodResult$0 = {
        applicablePaymentMethods?: Array<PaymentMethod>
    } & {
        [key: string]: unknown
    }
    type Shipment$1 = {
        adjustedMerchandizeTotalTax?: number
        adjustedShippingTotalTax?: number
        gift?: boolean
        giftMessage?: string
        merchandizeTotalTax?: number
        productSubTotal?: number
        productTotal?: number
        shipmentId?: string
        shipmentNo?: string
        shipmentTotal?: number
        shippingAddress?: OrderAddress$1
        shippingMethod?: ShippingMethod$0
        shippingStatus?: string
        shippingTotal?: number
        shippingTotalTax?: number
        taxTotal?: number
        trackingNumber?: string
    } & {
        [key: string]: unknown
    }
    type CustomerInfo$1 = {
        customerId?: string
        customerName?: string
        customerNo?: string
        email: string
    } & {
        [key: string]: unknown
    }
    type SimpleLink$1 = Record<string, unknown>
    type PriceAdjustment$1 = {
        appliedDiscount?: Discount$1
        couponCode?: string
        createdBy?: string
        creationDate?: unknown
        custom?: boolean
        itemText?: string
        lastModified?: unknown
        manual?: boolean
        price?: number
        priceAdjustmentId?: string
        promotionId?: string
        promotionLink?: string
        reasonCode?: string
    } & {
        [key: string]: unknown
    }
    type ProductDetailsLink$1 = {
        productDescription?: string
        productId: string
        productName?: string
        title?: string
    }
    type OptionItem$1 = {
        adjustedTax?: number
        basePrice?: number
        bonusDiscountLineItemId?: string
        bonusProductLineItem?: boolean
        bundledProductItems?: Array<ProductItem$1>
        gift?: boolean
        giftMessage?: string
        inventoryId?: string
        itemId?: string
        itemText?: string
        optionId: string
        optionItems?: Array<OptionItem$1>
        optionValueId: string
        price?: number
        priceAdjustments?: Array<PriceAdjustment$1>
        priceAfterItemDiscount?: number
        priceAfterOrderDiscount?: number
        productId?: string
        productListItem?: ProductListItemReference$0
        productName?: string
        quantity?: number
        shipmentId?: string
        shippingItemId?: string
        tax?: number
        taxBasis?: number
        taxClassId?: string
        taxRate?: number
    } & {
        [key: string]: unknown
    }
    type ShippingMethod$1 = {
        description?: string
        externalShippingMethod?: string
        id: string
        name?: string
        price?: number
        shippingPromotions?: Array<ShippingPromotion$1>
    } & {
        [key: string]: unknown
    }
    type DiscountRequest$0 = {
        type: string
        value: number
    }
    type Basket$1 = {
        adjustedMerchandizeTotalTax?: number
        adjustedShippingTotalTax?: number
        agentBasket?: boolean
        basketId?: string
        billingAddress?: OrderAddress$1
        bonusDiscountLineItems?: Array<BonusDiscountLineItem$1>
        channelType?: string
        couponItems?: Array<CouponItem$1>
        creationDate?: unknown
        currency?: string
        customerInfo?: CustomerInfo$1
        giftCertificateItems?: Array<GiftCertificateItem$0>
        inventoryReservationExpiry?: unknown
        lastModified?: unknown
        merchandizeTotalTax?: number
        notes?: SimpleLink$1
        orderPriceAdjustments?: Array<PriceAdjustment$1>
        orderTotal?: number
        paymentInstruments?: Array<OrderPaymentInstrument$1>
        productItems?: Array<ProductItem$1>
        productSubTotal?: number
        productTotal?: number
        shipments?: Array<Shipment$1>
        shippingItems?: Array<ShippingItem$1>
        shippingTotal?: number
        shippingTotalTax?: number
        sourceCode?: string
        taxTotal?: number
        taxation?: string
    } & {
        [key: string]: unknown
    }
    type OrderPaymentInstrumentRequest$0 = {
        amount?: number
        bankRoutingNumber?: string
        giftCertificateCode?: string
        paymentCard?: OrderPaymentCardRequest
        paymentMethodId?: string
    } & {
        [key: string]: unknown
    }
    type GiftCertificateItem$1 = {
        amount: number
        giftCertificateItemId?: string
        message?: string
        recipientEmail: string
        recipientName?: string
        senderName?: string
        shipmentId?: string
    } & {
        [key: string]: unknown
    }
    type ProductListLink$1 = {
        description?: string
        name?: string
        public?: boolean
        title?: string
        type?: string
    } & {
        [key: string]: unknown
    }
    type Order$1 = {
        adjustedMerchandizeTotalTax?: number
        adjustedShippingTotalTax?: number
        billingAddress?: OrderAddress$1
        bonusDiscountLineItems?: Array<BonusDiscountLineItem$1>
        channelType?: string
        confirmationStatus?: string
        couponItems?: Array<CouponItem$1>
        createdBy?: string
        creationDate?: unknown
        currency?: string
        customerInfo?: CustomerInfo$1
        customerName?: string
        exportStatus?: string
        externalOrderStatus?: string
        giftCertificateItems?: Array<GiftCertificateItem$1>
        globalPartyId?: string
        lastModified?: unknown
        merchandizeTotalTax?: number
        notes?: SimpleLink$1
        orderNo?: string
        orderPriceAdjustments?: Array<PriceAdjustment$1>
        orderToken?: string
        orderTotal?: number
        paymentInstruments?: Array<OrderPaymentInstrument$1>
        paymentStatus?: string
        productItems?: Array<ProductItem$1>
        productSubTotal?: number
        productTotal?: number
        shipments?: Array<Shipment$1>
        shippingItems?: Array<ShippingItem$1>
        shippingStatus?: string
        shippingTotal?: number
        shippingTotalTax?: number
        siteId?: string
        sourceCode?: string
        status?: string
        taxTotal?: number
        taxation?: string
    } & {
        [key: string]: unknown
    }
    type OrderPaymentCardRequest$0 = {
        cardType?: string
        creditCardToken?: string
        expirationMonth?: number
        expirationYear?: number
        holder?: string
        issueNumber?: string
        maskedNumber?: string
        validFromMonth?: number
        validFromYear?: number
    }
    type PaymentMethod$0 = {
        cards?: Array<PaymentCardSpec$0>
        description?: string
        id: string
        image?: string
        name?: string
        paymentProcessorId?: string
    } & {
        [key: string]: unknown
    }
    type TaxItem$0 = {
        id: string
        rate: number
        value?: number
    }
    type Status$1 = {
        code?: string
        message?: string
        status?: number
    }
    type ProductListItemReference$1 = {
        id: string
        priority?: number
        productDetailsLink?: ProductDetailsLink$1
        productList?: ProductListLink$1
        public?: boolean
        purchasedQuantity?: number
        quantity?: number
        type?: string
    }
    /**
     * All path parameters that are used by at least one ShopperOrders method.
     */
    type ShopperOrdersPathParameters = {
        organizationId?: string
        orderNo?: string
        paymentInstrumentId?: string
    }
    /**
     * All query parameters that are used by at least one ShopperOrders method.
     */
    type ShopperOrdersQueryParameters = {
        siteId?: string
        locale?: string
    }
    /**
     * All parameters that are used by ShopperOrders.
     */
    type ShopperOrdersParameters = ShopperOrdersPathParameters &
        BaseUriParameters &
        ShopperOrdersQueryParameters
    /**
 * [Shopper Orders](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-orders:Summary)
 * ==================================
 *
 * *Finish the shopper checkout experience resulting in an order.*<br />
 *
 * Simple example:
 *
 * ```typescript
 *   import { ShopperOrders } from "commerce-sdk-isomorphic";
 *
 *   const clientConfig = {
 *     parameters: {
 *       clientId: "XXXXXX",
 *       organizationId: "XXXX",
 *       shortCode: "XXX",
 *       siteId: "XX"
 *     }
 *   };
 *   const shopperOrdersClient = new ShopperOrders(clientConfig);
 * ```
 *
 * <span style="font-size:.7em; display:block; text-align: right">
 * API Version: 0.3.5<br />
 * Last Updated: <br />
 * </span>
 
 *
 
 */
    declare class ShopperOrders<
        ConfigParameters extends ShopperOrdersParameters & Record<string, unknown>
    > {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string
        }
        static readonly defaultBaseUri =
            'https://{shortCode}.api.commercecloud.salesforce.com/checkout/shopper-orders/{version}'
        constructor(config: ClientConfigInit<ConfigParameters>)
        /**
     * Submits an order based on a prepared basket. The only considered value from the request body is basketId.
     *
     * If you would like to get a raw Response object use the other createOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Order.
     *
     */
        createOrder(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: Basket$1
            }>
        ): Promise<Order$1>
        /**
     * Submits an order based on a prepared basket. The only considered value from the request body is basketId.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
     *
     */
        createOrder<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: Basket$1
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Order$1>
        /**
     * Gets information for an order.
     *
     * If you would like to get a raw Response object use the other getOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Order.
     *
     */
        getOrder(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        orderNo: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Order$1>
        /**
     * Gets information for an order.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
     *
     */
        getOrder<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        orderNo: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Order$1>
        /**
     * Adds a payment instrument to an order.
     
     Details:
     
     The payment instrument is added with the provided details. The payment method must be applicable for the order see GET
     /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.
     *
     * If you would like to get a raw Response object use the other createPaymentInstrumentForOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Order.
     *
     */
        createPaymentInstrumentForOrder(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        orderNo: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: OrderPaymentInstrumentRequest$0
            }>
        ): Promise<Order$1>
        /**
     * Adds a payment instrument to an order.
     
     Details:
     
     The payment instrument is added with the provided details. The payment method must be applicable for the order see GET
     /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
     *
     */
        createPaymentInstrumentForOrder<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        orderNo: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: OrderPaymentInstrumentRequest$0
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Order$1>
        /**
     * Removes a payment instrument of an order.
     *
     * If you would like to get a raw Response object use the other removePaymentInstrumentFromOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param paymentInstrumentId - The ID of the payment instrument to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Order.
     *
     */
        removePaymentInstrumentFromOrder(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        orderNo: string
                        paymentInstrumentId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Order$1>
        /**
     * Removes a payment instrument of an order.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param paymentInstrumentId - The ID of the payment instrument to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
     *
     */
        removePaymentInstrumentFromOrder<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        orderNo: string
                        paymentInstrumentId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Order$1>
        /**
     * Updates a payment instrument of an order.
     
     Details:
     
     The payment instrument is updated with the provided details. The payment method must be applicable for the
     order see GET /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a
     paymentCard must be specified in the request.
     *
     * If you would like to get a raw Response object use the other updatePaymentInstrumentForOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param paymentInstrumentId - The ID of the payment instrument to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     *
     * @returns A promise of type Order.
     *
     */
        updatePaymentInstrumentForOrder(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        orderNo: string
                        paymentInstrumentId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: OrderPaymentInstrumentRequest$0
            }>
        ): Promise<Order$1>
        /**
     * Updates a payment instrument of an order.
     
     Details:
     
     The payment instrument is updated with the provided details. The payment method must be applicable for the
     order see GET /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a
     paymentCard must be specified in the request.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param paymentInstrumentId - The ID of the payment instrument to be updated.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param body - The data to send as the request body.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
     *
     */
        updatePaymentInstrumentForOrder<T extends boolean>(
            options: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        orderNo: string
                        paymentInstrumentId: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
                body: OrderPaymentInstrumentRequest$0
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Order$1>
        /**
     * Gets the applicable payment methods for an existing order considering the open payment amount only.
     *
     * If you would like to get a raw Response object use the other getPaymentMethodsForOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type PaymentMethodResult.
     *
     */
        getPaymentMethodsForOrder(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        orderNo: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<PaymentMethodResult$0>
        /**
     * Gets the applicable payment methods for an existing order considering the open payment amount only.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
     Below are some valid examples:
     - en-US
     - de-AT
     - de
     - default
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type PaymentMethodResult otherwise.
     *
     */
        getPaymentMethodsForOrder<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        orderNo: string
                        siteId: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : PaymentMethodResult$0>
        /**
     * This method gives you the external taxation data of the order transferred from the basket during
     order creation. This endpoint can be called only if external taxation was used. See POST /baskets
     for more information.
     *
     * If you would like to get a raw Response object use the other getTaxesFromOrder function.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     *
     * @returns A promise of type Taxes.
     *
     */
        getTaxesFromOrder(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        orderNo: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Taxes$0>
        /**
     * This method gives you the external taxation data of the order transferred from the basket during
     order creation. This endpoint can be called only if external taxation was used. See POST /baskets
     for more information.
     *
     * @param options - An object containing the options for this method.
     * @param parameters - An object containing the parameters for this method.
     * @param organizationId - An identifier for the organization the request is being made by.
     * @param orderNo - The order number of the order to be modified.
     * @param siteId -
     * @param headers - An object literal of key value pairs of the headers to be
     * sent with this request.
     * @param rawResponse - Set to true to return entire Response object instead of DTO.
     * @returns A promise of type Response if rawResponse is true, a promise of type Taxes otherwise.
     *
     */
        getTaxesFromOrder<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        orderNo: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Taxes$0>
    }
    declare namespace ShopperOrdersTypes {
        /*
         * Copyright (c) 2023, Salesforce, Inc.
         * All rights reserved.
         * SPDX-License-Identifier: BSD-3-Clause
         * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
         */
        /**
         * Makes a type easier to read.
         */
        type Prettify<T> = NonNullable<{
            [K in keyof T]: T[K]
        }>
        /**
         * Generates the types required on a method, based on those provided in the config.
         */
        type CompositeParameters<
            MethodParameters extends Record<string, unknown>,
            ConfigParameters extends Record<string, unknown>
        > = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>
        /**
         * If an object has a `parameters` property, and the `parameters` object has required properties,
         * then the `parameters` property on the root object is marked as required.
         */
        type RequireParametersUnlessAllAreOptional<
            T extends {
                parameters?: Record<string, unknown>
            }
        > = Record<string, never> extends NonNullable<T['parameters']>
            ? T
            : Prettify<T & Required<Pick<T, 'parameters'>>>
        /**
         * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
         * if not specified.
         */
        interface BaseUriParameters {
            shortCode: string
            version?: string // Optional, will default to "v1" if not provided.
        }
        /**
         * Generic interface for path parameters.
         */
        interface PathParameters {
            [key: string]: string | number | boolean
        }
        /**
         * Generic interface for query parameters.
         */
        interface QueryParameters {
            [key: string]: string | number | boolean | string[] | number[]
        }
        /**
         * Generic interface for all parameter types.
         */
        type UrlParameters = PathParameters | QueryParameters
        /**
         * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
         * it from the `RequestInit` provided by node-fetch.
         */
        type BrowserRequestInit = RequestInit
        /**
         * Any properties supported in either the browser or node are accepted.
         * Using the right properties in the right context is left to the user.
         */
        type FetchOptions = NodeRequestInit & BrowserRequestInit
        /**
         * Base options that can be passed to the `ClientConfig` class.
         */
        interface ClientConfigInit<Params extends BaseUriParameters> {
            baseUri?: string
            proxy?: string
            headers?: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions?: FetchOptions
            transformRequest?: (
                data: unknown,
                headers: {
                    [key: string]: string
                }
            ) => Required<FetchOptions>['body']
            throwOnBadResponse?: boolean
        }
        type FetchFunction = (
            input: RequestInfo,
            init?: FetchOptions | undefined
        ) => Promise<Response>
        /**
         * Configuration parameters common to Commerce SDK clients
         */
        class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
            baseUri?: string
            proxy?: string
            headers: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions: FetchOptions
            transformRequest: NonNullable<ClientConfigInit<Params>['transformRequest']>
            throwOnBadResponse: boolean
            constructor(config: ClientConfigInit<Params>)
            static readonly defaults: Pick<Required<ClientConfigInit<never>>, 'transformRequest'>
        }
        type ErrorResponse = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type Money = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResult = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type SearchRequest = {
            limit?: number
            query: Query$6
            sorts?: Array<Sort$6>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type PropertyDefinition = {
            defaultValue?: PropertyValueDefinition$5
            id?: string
            name: L10nString$5
            description: L10nString$5
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString$5
            possibleValues?: Array<PropertyValueDefinition$5>
            type: string
            visible?: boolean
        } & {
            [key: string]: unknown
        }
        type LocalizedString = Record<string, unknown>
        type PaginatedSearchResult = {
            query: Query$6
            sorts?: Array<Sort$6>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type ClosedObject = Record<string, unknown>
        type OpenObject = Record<string, unknown>
        type NoPropertiesAllowed = Record<string, unknown>
        type SpecifiedPropertiesAllowed = Record<string, unknown>
        type BoolFilter = {
            filters?: Array<Filter$6>
            operator: string
        } & {
            [key: string]: unknown
        }
        type PaginatedSearchResultBase = {
            query: Query$6
            sorts?: Array<Sort$6>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type MatchAllQuery = Record<string, unknown>
        type FilteredQuery = {
            filter: Filter$6
            query: Query$6
        } & {
            [key: string]: unknown
        }
        type QueryFilter = {
            query: Query$6
        } & {
            [key: string]: unknown
        }
        type Query = {
            boolQuery?: BoolQuery$6
            filteredQuery?: FilteredQuery
            matchAllQuery?: MatchAllQuery
            nestedQuery?: NestedQuery$6
            termQuery?: TermQuery$6
            textQuery?: TextQuery$6
        } & {
            [key: string]: unknown
        }
        type TermQuery = {
            fields: Array<string>
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TermFilter = {
            field: string
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TextQuery = {
            fields: Array<string>
            searchPhrase: string
        } & {
            [key: string]: unknown
        }
        type Range2Filter = {
            filterMode?: string
            fromField: string
            fromInclusive?: boolean
            fromValue?: unknown
            toField: string
            toInclusive?: boolean
            toValue?: unknown
        } & {
            [key: string]: unknown
        }
        type BoolQuery = {
            must?: Array<Query>
            mustNot?: Array<Query>
            should?: Array<Query>
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResultBase = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type NestedQuery = {
            path: string
            query: Query
            scoreMode?: string
        } & {
            [key: string]: unknown
        }
        type Filter = {
            boolFilter?: BoolFilter
            queryFilter?: QueryFilter
            range2Filter?: Range2Filter
            rangeFilter?: RangeFilter$6
            termFilter?: TermFilter
        } & {
            [key: string]: unknown
        }
        type Sort = {
            field: string
            sortOrder?: string
        } & {
            [key: string]: unknown
        }
        type RangeFilter = {
            field: string
            from?: unknown
            fromInclusive?: boolean
            to?: unknown
            toInclusive?: boolean
        } & {
            [key: string]: unknown
        }
        type SearchRequestBase = {
            limit?: number
            query: Query
            sorts?: Array<Sort>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type MoneyMnemonic = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type L10nString = Record<string, unknown>
        type AttributeDefinition = {
            defaultValue?: PropertyValueDefinition$5
            id?: string
            name: L10nString
            description: L10nString
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString
            possibleValues?: Array<PropertyValueDefinition$5>
            type: string
            visible?: boolean
        }
        type PropertyValueDefinition = {
            description: L10nString
            displayValue: L10nString
            id: string
            position?: number
            value: string
        }
        type TaxItems = {
            taxItems?: Array<TaxItem$0>
        } & {
            [key: string]: unknown
        }
        type PaymentCardSpec = {
            cardType?: string
            checksumVerificationEnabled?: boolean
            description?: string
            image?: string
            name?: string
            numberLengths?: Array<string>
            numberPrefixes?: Array<string>
        } & {
            [key: string]: unknown
        }
        type OrderAddress = {
            address1?: string
            address2?: string
            city?: string
            companyName?: string
            countryCode?: string
            firstName?: string
            fullName?: string
            id?: string
            jobTitle?: string
            lastName?: string
            phone?: string
            postBox?: string
            postalCode?: string
            salutation?: string
            secondName?: string
            stateCode?: string
            suffix?: string
            suite?: string
            title?: string
        } & {
            [key: string]: unknown
        }
        type BasketsResult = {
            baskets: Array<Basket$1>
            total: number
        } & {
            [key: string]: unknown
        }
        type PriceAdjustmentRequest = {
            discount?: DiscountRequest$0
            itemId?: string
            itemText?: string
            level: string
            promotionId?: string
            reasonCode?: string
        } & {
            [key: string]: unknown
        }
        type PaymentCard = {
            cardType?: string
            creditCardExpired?: boolean
            creditCardToken?: string
            expirationMonth?: number
            expirationYear?: number
            holder?: string
            issueNumber?: string
            maskedNumber?: string
            numberLastDigits?: string
            validFromMonth?: number
            validFromYear?: number
        }
        type NotesResult = {
            notes?: Array<Note$0>
        } & {
            [key: string]: unknown
        }
        type ShippingItem = {
            adjustedTax?: number
            basePrice?: number
            itemId?: string
            itemText?: string
            price?: number
            priceAdjustments?: Array<PriceAdjustment$1>
            priceAfterItemDiscount?: number
            shipmentId?: string
            tax?: number
            taxBasis?: number
            taxClassId?: string
            taxRate?: number
        } & {
            [key: string]: unknown
        }
        type Discount = {
            amount?: number
            percentage?: number
            priceBookId?: string
            type: string
        } & {
            [key: string]: unknown
        }
        type Note = {
            createdBy?: string
            creationDate?: unknown
            id?: string
            subject?: string
            text?: string
        }
        type CouponItem = {
            code: string
            couponItemId?: string
            statusCode?: string
            valid?: boolean
        } & {
            [key: string]: unknown
        }
        type PromotionLink = {
            calloutMsg?: string
            name?: string
            promotionId?: string
            title?: string
        }
        type PriceBookIds = Array<string>
        type ShippingPromotion = {
            calloutMsg?: string
            promotionId?: string
            promotionName?: string
        } & {
            [key: string]: unknown
        }
        type ProductItem = {
            adjustedTax?: number
            basePrice?: number
            bonusDiscountLineItemId?: string
            bonusProductLineItem?: boolean
            bundledProductItems?: Array<ProductItem>
            gift?: boolean
            giftMessage?: string
            inventoryId?: string
            itemId?: string
            itemText?: string
            optionItems?: Array<OptionItem$1>
            price?: number
            priceAdjustments?: Array<PriceAdjustment$1>
            priceAfterItemDiscount?: number
            priceAfterOrderDiscount?: number
            productId?: string
            productListItem?: ProductListItemReference$1
            productName?: string
            quantity?: number
            shipmentId?: string
            shippingItemId?: string
            tax?: number
            taxBasis?: number
            taxClassId?: string
            taxRate?: number
        } & {
            [key: string]: unknown
        }
        type BasketPaymentInstrumentRequest = {
            amount?: number
            bankRoutingNumber?: string
            giftCertificateCode?: string
            paymentCard?: OrderPaymentCardRequest$0
            paymentMethodId?: string
        } & {
            [key: string]: unknown
        }
        type Taxes = {
            taxes: Record<string, unknown>
        }
        type OrderPaymentInstrument = {
            amount?: number
            authorizationStatus?: Status$1
            bankRoutingNumber?: string
            maskedGiftCertificateCode?: string
            paymentCard?: PaymentCard
            paymentInstrumentId?: string
            paymentMethodId?: string
        } & {
            [key: string]: unknown
        }
        type BonusDiscountLineItem = {
            bonusProducts?: Array<ProductDetailsLink$1>
            couponCode?: string
            id?: string
            maxBonusItems?: number
            promotionId?: string
        } & {
            [key: string]: unknown
        }
        type PaymentMethodResult = {
            applicablePaymentMethods?: Array<PaymentMethod$0>
        } & {
            [key: string]: unknown
        }
        type Shipment = {
            adjustedMerchandizeTotalTax?: number
            adjustedShippingTotalTax?: number
            gift?: boolean
            giftMessage?: string
            merchandizeTotalTax?: number
            productSubTotal?: number
            productTotal?: number
            shipmentId?: string
            shipmentNo?: string
            shipmentTotal?: number
            shippingAddress?: OrderAddress
            shippingMethod?: ShippingMethod$1
            shippingStatus?: string
            shippingTotal?: number
            shippingTotalTax?: number
            taxTotal?: number
            trackingNumber?: string
        } & {
            [key: string]: unknown
        }
        type CustomerInfo = {
            customerId?: string
            customerName?: string
            customerNo?: string
            email: string
        } & {
            [key: string]: unknown
        }
        type SimpleLink = Record<string, unknown>
        type PriceAdjustment = {
            appliedDiscount?: Discount
            couponCode?: string
            createdBy?: string
            creationDate?: unknown
            custom?: boolean
            itemText?: string
            lastModified?: unknown
            manual?: boolean
            price?: number
            priceAdjustmentId?: string
            promotionId?: string
            promotionLink?: string
            reasonCode?: string
        } & {
            [key: string]: unknown
        }
        type ShippingMethodResult = {
            applicableShippingMethods?: Array<ShippingMethod$1>
            defaultShippingMethodId?: string
        } & {
            [key: string]: unknown
        }
        type ProductDetailsLink = {
            productDescription?: string
            productId: string
            productName?: string
            title?: string
        }
        type OptionItem = {
            adjustedTax?: number
            basePrice?: number
            bonusDiscountLineItemId?: string
            bonusProductLineItem?: boolean
            bundledProductItems?: Array<ProductItem>
            gift?: boolean
            giftMessage?: string
            inventoryId?: string
            itemId?: string
            itemText?: string
            optionId: string
            optionItems?: Array<OptionItem>
            optionValueId: string
            price?: number
            priceAdjustments?: Array<PriceAdjustment>
            priceAfterItemDiscount?: number
            priceAfterOrderDiscount?: number
            productId?: string
            productListItem?: ProductListItemReference$1
            productName?: string
            quantity?: number
            shipmentId?: string
            shippingItemId?: string
            tax?: number
            taxBasis?: number
            taxClassId?: string
            taxRate?: number
        } & {
            [key: string]: unknown
        }
        type ShippingMethod = {
            description?: string
            externalShippingMethod?: string
            id: string
            name?: string
            price?: number
            shippingPromotions?: Array<ShippingPromotion>
        } & {
            [key: string]: unknown
        }
        type DiscountRequest = {
            type: string
            value: number
        }
        type Basket = {
            adjustedMerchandizeTotalTax?: number
            adjustedShippingTotalTax?: number
            agentBasket?: boolean
            basketId?: string
            billingAddress?: OrderAddress
            bonusDiscountLineItems?: Array<BonusDiscountLineItem>
            channelType?: string
            couponItems?: Array<CouponItem>
            creationDate?: unknown
            currency?: string
            customerInfo?: CustomerInfo
            giftCertificateItems?: Array<GiftCertificateItem$1>
            inventoryReservationExpiry?: unknown
            lastModified?: unknown
            merchandizeTotalTax?: number
            notes?: SimpleLink
            orderPriceAdjustments?: Array<PriceAdjustment>
            orderTotal?: number
            paymentInstruments?: Array<OrderPaymentInstrument>
            productItems?: Array<ProductItem>
            productSubTotal?: number
            productTotal?: number
            shipments?: Array<Shipment>
            shippingItems?: Array<ShippingItem>
            shippingTotal?: number
            shippingTotalTax?: number
            sourceCode?: string
            taxTotal?: number
            taxation?: string
        } & {
            [key: string]: unknown
        }
        type OrderPaymentInstrumentRequest = {
            amount?: number
            bankRoutingNumber?: string
            giftCertificateCode?: string
            paymentCard?: OrderPaymentCardRequest$0
            paymentMethodId?: string
        } & {
            [key: string]: unknown
        }
        type GiftCertificateItem = {
            amount: number
            giftCertificateItemId?: string
            message?: string
            recipientEmail: string
            recipientName?: string
            senderName?: string
            shipmentId?: string
        } & {
            [key: string]: unknown
        }
        type ProductListLink = {
            description?: string
            name?: string
            public?: boolean
            title?: string
            type?: string
        } & {
            [key: string]: unknown
        }
        type Order = {
            adjustedMerchandizeTotalTax?: number
            adjustedShippingTotalTax?: number
            billingAddress?: OrderAddress
            bonusDiscountLineItems?: Array<BonusDiscountLineItem>
            channelType?: string
            confirmationStatus?: string
            couponItems?: Array<CouponItem>
            createdBy?: string
            creationDate?: unknown
            currency?: string
            customerInfo?: CustomerInfo
            customerName?: string
            exportStatus?: string
            externalOrderStatus?: string
            giftCertificateItems?: Array<GiftCertificateItem>
            globalPartyId?: string
            lastModified?: unknown
            merchandizeTotalTax?: number
            notes?: SimpleLink
            orderNo?: string
            orderPriceAdjustments?: Array<PriceAdjustment>
            orderToken?: string
            orderTotal?: number
            paymentInstruments?: Array<OrderPaymentInstrument>
            paymentStatus?: string
            productItems?: Array<ProductItem>
            productSubTotal?: number
            productTotal?: number
            shipments?: Array<Shipment>
            shippingItems?: Array<ShippingItem>
            shippingStatus?: string
            shippingTotal?: number
            shippingTotalTax?: number
            siteId?: string
            sourceCode?: string
            status?: string
            taxTotal?: number
            taxation?: string
        } & {
            [key: string]: unknown
        }
        type OrderPaymentCardRequest = {
            cardType?: string
            creditCardToken?: string
            expirationMonth?: number
            expirationYear?: number
            holder?: string
            issueNumber?: string
            maskedNumber?: string
            validFromMonth?: number
            validFromYear?: number
        }
        type PaymentMethod = {
            cards?: Array<PaymentCardSpec>
            description?: string
            id: string
            image?: string
            name?: string
            paymentProcessorId?: string
        } & {
            [key: string]: unknown
        }
        type TaxItem = {
            id: string
            rate: number
            value?: number
        }
        type Status = {
            code?: string
            message?: string
            status?: number
        }
        type ProductListItemReference = {
            id: string
            priority?: number
            productDetailsLink?: ProductDetailsLink
            productList?: ProductListLink
            public?: boolean
            purchasedQuantity?: number
            quantity?: number
            type?: string
        }
        type ChangeControlled = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type ChangeControlledDataType = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type Error = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        /**
         * All path parameters that are used by at least one ShopperOrders method.
         */
        type ShopperOrdersPathParameters = {
            organizationId?: string
            orderNo?: string
            paymentInstrumentId?: string
        }
        /**
         * All query parameters that are used by at least one ShopperOrders method.
         */
        type ShopperOrdersQueryParameters = {
            siteId?: string
            locale?: string
        }
        /**
         * All parameters that are used by ShopperOrders.
         */
        type ShopperOrdersParameters = ShopperOrdersPathParameters &
            BaseUriParameters &
            ShopperOrdersQueryParameters
        /**
     * [Shopper Orders](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-orders:Summary)
     * ==================================
     *
     * *Finish the shopper checkout experience resulting in an order.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperOrders } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperOrdersClient = new ShopperOrders(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 0.3.5<br />
     * Last Updated: <br />
     * </span>
     
     *
     
     */
        class ShopperOrders<
            ConfigParameters extends ShopperOrdersParameters & Record<string, unknown>
        > {
            // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
            clientConfig: ClientConfig<ConfigParameters> & {
                baseUri: string
            }
            static readonly defaultBaseUri =
                'https://{shortCode}.api.commercecloud.salesforce.com/checkout/shopper-orders/{version}'
            constructor(config: ClientConfigInit<ConfigParameters>)
            /**
         * Submits an order based on a prepared basket. The only considered value from the request body is basketId.
         *
         * If you would like to get a raw Response object use the other createOrder function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Order.
         *
         */
            createOrder(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: Basket
                }>
            ): Promise<Order>
            /**
         * Submits an order based on a prepared basket. The only considered value from the request body is basketId.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
         *
         */
            createOrder<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: Basket
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Order>
            /**
         * Gets information for an order.
         *
         * If you would like to get a raw Response object use the other getOrder function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Order.
         *
         */
            getOrder(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            orderNo: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Order>
            /**
         * Gets information for an order.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
         *
         */
            getOrder<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            orderNo: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Order>
            /**
         * Adds a payment instrument to an order.
         
         Details:
         
         The payment instrument is added with the provided details. The payment method must be applicable for the order see GET
         /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.
         *
         * If you would like to get a raw Response object use the other createPaymentInstrumentForOrder function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Order.
         *
         */
            createPaymentInstrumentForOrder(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            orderNo: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: OrderPaymentInstrumentRequest
                }>
            ): Promise<Order>
            /**
         * Adds a payment instrument to an order.
         
         Details:
         
         The payment instrument is added with the provided details. The payment method must be applicable for the order see GET
         /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a paymentCard must be specified in the request.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
         *
         */
            createPaymentInstrumentForOrder<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            orderNo: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: OrderPaymentInstrumentRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Order>
            /**
         * Removes a payment instrument of an order.
         *
         * If you would like to get a raw Response object use the other removePaymentInstrumentFromOrder function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param paymentInstrumentId - The ID of the payment instrument to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Order.
         *
         */
            removePaymentInstrumentFromOrder(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            orderNo: string
                            paymentInstrumentId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Order>
            /**
         * Removes a payment instrument of an order.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param paymentInstrumentId - The ID of the payment instrument to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
         *
         */
            removePaymentInstrumentFromOrder<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            orderNo: string
                            paymentInstrumentId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Order>
            /**
         * Updates a payment instrument of an order.
         
         Details:
         
         The payment instrument is updated with the provided details. The payment method must be applicable for the
         order see GET /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a
         paymentCard must be specified in the request.
         *
         * If you would like to get a raw Response object use the other updatePaymentInstrumentForOrder function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param paymentInstrumentId - The ID of the payment instrument to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         *
         * @returns A promise of type Order.
         *
         */
            updatePaymentInstrumentForOrder(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            orderNo: string
                            paymentInstrumentId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: OrderPaymentInstrumentRequest
                }>
            ): Promise<Order>
            /**
         * Updates a payment instrument of an order.
         
         Details:
         
         The payment instrument is updated with the provided details. The payment method must be applicable for the
         order see GET /baskets/\{basketId\}/payment-methods, if the payment method is 'CREDIT_CARD' a
         paymentCard must be specified in the request.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param paymentInstrumentId - The ID of the payment instrument to be updated.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param body - The data to send as the request body.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Order otherwise.
         *
         */
            updatePaymentInstrumentForOrder<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            orderNo: string
                            paymentInstrumentId: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: OrderPaymentInstrumentRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Order>
            /**
         * Gets the applicable payment methods for an existing order considering the open payment amount only.
         *
         * If you would like to get a raw Response object use the other getPaymentMethodsForOrder function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PaymentMethodResult.
         *
         */
            getPaymentMethodsForOrder(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            orderNo: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<PaymentMethodResult>
            /**
         * Gets the applicable payment methods for an existing order considering the open payment amount only.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param locale - A descriptor to provide locale context for a geographical region by both a language and/or country code. The locale pattern in the query param follows the ISO 639-1 for the language code (e.g. en, de, fr) and ISO 3166-1 for the country code (e.g. US, DE, AT). The param can be a combination of language code and country code or can just refer to the language code.
         Below are some valid examples:
         - en-US
         - de-AT
         - de
         - default
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PaymentMethodResult otherwise.
         *
         */
            getPaymentMethodsForOrder<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            orderNo: string
                            siteId: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : PaymentMethodResult>
            /**
         * This method gives you the external taxation data of the order transferred from the basket during
         order creation. This endpoint can be called only if external taxation was used. See POST /baskets
         for more information.
         *
         * If you would like to get a raw Response object use the other getTaxesFromOrder function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Taxes.
         *
         */
            getTaxesFromOrder(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            orderNo: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Taxes>
            /**
         * This method gives you the external taxation data of the order transferred from the basket during
         order creation. This endpoint can be called only if external taxation was used. See POST /baskets
         for more information.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param orderNo - The order number of the order to be modified.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Taxes otherwise.
         *
         */
            getTaxesFromOrder<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            orderNo: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Taxes>
        }
    }
    type ProductPriceTable = {
        price?: number
        pricebook?: string
        quantity?: number
    } & {
        [key: string]: unknown
    }
    type PriceRange = {
        maxPrice?: number
        minPrice?: number
        pricebook?: string
    } & {
        [key: string]: unknown
    }
    type OptionValue$0 = {
        default?: boolean
        id: string
        name?: string
        price?: number
    } & {
        [key: string]: unknown
    }
    type Master$0 = {
        masterId: string
        orderable?: boolean
        price?: number
        priceMax?: number
        prices?: Record<string, unknown>
    } & {
        [key: string]: unknown
    }
    type Category = {
        categories?: Array<Category>
        description?: string
        id: string
        image?: string
        name?: string
        pageDescription?: string
        pageKeywords?: string
        pageTitle?: string
        parentCategoryId?: string
        parentCategoryTree?: Array<PathRecord>
        thumbnail?: string
    } & {
        [key: string]: unknown
    }
    type CategoryResult = {
        limit: number
        data: Array<Category>
        total: number
    } & {
        [key: string]: unknown
    }
    type VariationAttribute$0 = {
        id: string
        name?: string
        values?: Array<VariationAttributeValue>
    } & {
        [key: string]: unknown
    }
    type RecommendationType$0 = {
        displayValue: string
        value: number
    } & {
        [key: string]: unknown
    }
    type ProductType$0 = {
        bundle?: boolean
        item?: boolean
        master?: boolean
        option?: boolean
        set?: boolean
        variant?: boolean
        variationGroup?: boolean
    } & {
        [key: string]: unknown
    }
    type Recommendation$0 = {
        calloutMsg?: string
        image?: Image
        longDescription?: string
        name?: string
        recommendationType: RecommendationType$0
        recommendedItemId?: string
        shortDescription?: string
    } & {
        [key: string]: unknown
    }
    type Variant$0 = {
        orderable?: boolean
        price?: number
        productId: string
        tieredPrices?: Array<ProductPriceTable>
        variationValues?: Record<string, unknown>
    } & {
        [key: string]: unknown
    }
    type VariationGroup$0 = {
        orderable: boolean
        price: number
        productId: string
        variationValues: Record<string, unknown>
    } & {
        [key: string]: unknown
    }
    type ProductResult = {
        limit: number
        data: Array<Product>
        total: number
    } & {
        [key: string]: unknown
    }
    type ProductLink$0 = {
        sourceProductId: string
        sourceProductLink: string
        targetProductId: string
        targetProductLink: string
        type: string
    } & {
        [key: string]: unknown
    }
    type Inventory$0 = {
        ats?: number
        backorderable?: boolean
        id: string
        inStockDate?: unknown
        orderable?: boolean
        preorderable?: boolean
        stockLevel?: number
    } & {
        [key: string]: unknown
    }
    type ImageGroup$0 = {
        images: Array<Image>
        variationAttributes?: Array<VariationAttribute$0>
        viewType: string
    } & {
        [key: string]: unknown
    }
    type Option$0 = {
        description?: string
        id: string
        image?: string
        name?: string
        values?: Array<OptionValue$0>
    } & {
        [key: string]: unknown
    }
    type Product$0 = {
        brand?: string
        bundledProducts?: Array<BundledProduct>
        currency?: string
        ean?: string
        fetchDate?: number
        id: string
        imageGroups?: Array<ImageGroup$0>
        inventories?: Array<Inventory$0>
        inventory?: Inventory$0
        longDescription?: string
        manufacturerName?: string
        manufacturerSku?: string
        master?: Master$0
        minOrderQuantity?: number
        name?: string
        options?: Array<Option$0>
        pageDescription?: string
        pageKeywords?: string
        pageTitle?: string
        price?: number
        pricePerUnit?: number
        pricePerUnitMax?: number
        priceMax?: number
        priceRanges?: Array<PriceRange>
        prices?: Record<string, unknown>
        primaryCategoryId?: string
        productLinks?: Array<ProductLink$0>
        productPromotions?: Array<ProductPromotion>
        recommendations?: Array<Recommendation$0>
        setProducts?: Array<Product$0>
        shortDescription?: string
        slugUrl?: string
        stepQuantity?: number
        tieredPrices?: Array<ProductPriceTable>
        type?: ProductType$0
        unit?: string
        upc?: string
        validFrom?: unknown
        validTo?: unknown
        variants?: Array<Variant$0>
        variationAttributes?: Array<VariationAttribute$0>
        variationGroups?: Array<VariationGroup$0>
        variationValues?: Record<string, unknown>
    } & {
        [key: string]: unknown
    }
    type Image$0 = {
        alt?: string
        disBaseLink?: string
        link: string
        title?: string
    } & {
        [key: string]: unknown
    }
    type VariationAttributeValue$0 = {
        description?: string
        image?: Image$0
        imageSwatch?: Image$0
        name?: string
        orderable?: boolean
        value: string
    } & {
        [key: string]: unknown
    }
    type ProductPromotion$0 = {
        calloutMsg: string
        promotionId: string
        promotionalPrice: number
    } & {
        [key: string]: unknown
    }
    type PathRecord = {
        id?: string
        name?: string
    } & {
        [key: string]: unknown
    }
    type BundledProduct$0 = {
        id: string
        product: Product$0
        quantity: number
    } & {
        [key: string]: unknown
    }
    type RangeFilter$7 = {
        [key: string]: unknown
    }
    type BoolFilter$7 = {
        filters?: Array<Filter$6>
        operator: string
    } & {
        [key: string]: unknown
    }
    type MatchAllQuery$7 = Record<string, unknown>
    type FilteredQuery$7 = {
        filter: Filter$6
        query: Query$6
    } & {
        [key: string]: unknown
    }
    type QueryFilter$7 = {
        query: Query$6
    } & {
        [key: string]: unknown
    }
    type Query$7 = {
        boolQuery?: BoolQuery$6
        filteredQuery?: FilteredQuery$7
        matchAllQuery?: MatchAllQuery$7
        nestedQuery?: NestedQuery$6
        termQuery?: TermQuery$6
        textQuery?: TextQuery$6
    } & {
        [key: string]: unknown
    }
    type TermQuery$7 = {
        fields: Array<string>
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TermFilter$7 = {
        field: string
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TextQuery$7 = {
        fields: Array<string>
        searchPhrase: string
    } & {
        [key: string]: unknown
    }
    type Range2Filter$7 = {
        filterMode?: string
        fromField: string
        fromInclusive?: boolean
        fromValue?: unknown
        toField: string
        toInclusive?: boolean
        toValue?: unknown
    } & {
        [key: string]: unknown
    }
    type BoolQuery$7 = {
        must?: Array<Query$7>
        mustNot?: Array<Query$7>
        should?: Array<Query$7>
    } & {
        [key: string]: unknown
    }
    type NestedQuery$7 = {
        path: string
        query: Query$7
        scoreMode?: string
    } & {
        [key: string]: unknown
    }
    type Filter$7 = {
        boolFilter?: BoolFilter$7
        queryFilter?: QueryFilter$7
        range2Filter?: Range2Filter$7
        rangeFilter?: RangeFilter$7
        termFilter?: TermFilter$7
    } & {
        [key: string]: unknown
    }
    type Sort$7 = {
        field: string
        sortOrder?: string
    } & {
        [key: string]: unknown
    }
    type L10nString$6 = Record<string, unknown>
    type PropertyValueDefinition$6 = {
        description: L10nString$6
        displayValue: L10nString$6
        id: string
        position?: number
        value: string
    }
    /**
     * All path parameters that are used by at least one ShopperProducts method.
     */
    type ShopperProductsPathParameters = {
        organizationId?: string
        id?: string
    }
    /**
     * All query parameters that are used by at least one ShopperProducts method.
     */
    type ShopperProductsQueryParameters = {
        select?: string
        ids?: string
        inventoryIds?: string
        currency?: string
        expand?: Array<string>
        locale?: string
        allImages?: boolean
        perPricebook?: boolean
        siteId?: string
        levels?: number
    }
    /**
     * All parameters that are used by ShopperProducts.
     */
    type ShopperProductsParameters = ShopperProductsPathParameters &
        BaseUriParameters &
        ShopperProductsQueryParameters
    /**
     * [](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=:Summary)
     * ==================================
     *
     * **<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperProducts } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperProductsClient = new ShopperProducts(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: <br />
     * Last Updated: <br />
     * </span>
     
     *
     
     */
    declare class ShopperProducts<
        ConfigParameters extends ShopperProductsParameters & Record<string, unknown>
    > {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string
        }
        static readonly defaultBaseUri =
            'https://{shortCode}.api.commercecloud.salesforce.com/product/shopper-products/{version}'
        constructor(config: ClientConfigInit<ConfigParameters>)
        /**
         * Allows access to multiple products by a single request. Only products that are online and assigned to a site catalog are returned. The maximum number of productIDs that can be requested are 24. Along with product details, the availability, product options, images, price, promotions, and variations for the valid products will be included, as appropriate.
         *
         * If you would like to get a raw Response object use the other getProducts function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations.The select will be available, tentatively from october 2023.The exact date will be announced via changelog.
         * @param ids - The IDs of the requested products (comma-separated, max 24 IDs).
         * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
         * @param currency - The currency mnemonic specified for price.
         * @param expand - The expand parameter. A comma separated list with the allowed values (availability, links, promotions, options, images, prices, variations, recommendations). All expand parameters are used for the request when no expand parameter is provided. The value "none" may be used to turn off all expand options.
         * @param locale - The locale context.
         * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
         * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type ProductResult.
         *
         */
        getProducts(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        select?: string
                        ids: string
                        inventoryIds?: string
                        currency?: string
                        expand?: Array<string>
                        locale?: string
                        allImages?: boolean
                        perPricebook?: boolean
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<ProductResult>
        /**
         * Allows access to multiple products by a single request. Only products that are online and assigned to a site catalog are returned. The maximum number of productIDs that can be requested are 24. Along with product details, the availability, product options, images, price, promotions, and variations for the valid products will be included, as appropriate.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations.The select will be available, tentatively from october 2023.The exact date will be announced via changelog.
         * @param ids - The IDs of the requested products (comma-separated, max 24 IDs).
         * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
         * @param currency - The currency mnemonic specified for price.
         * @param expand - The expand parameter. A comma separated list with the allowed values (availability, links, promotions, options, images, prices, variations, recommendations). All expand parameters are used for the request when no expand parameter is provided. The value "none" may be used to turn off all expand options.
         * @param locale - The locale context.
         * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
         * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type ProductResult otherwise.
         *
         */
        getProducts<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        select?: string
                        ids: string
                        inventoryIds?: string
                        currency?: string
                        expand?: Array<string>
                        locale?: string
                        allImages?: boolean
                        perPricebook?: boolean
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : ProductResult>
        /**
         * Allows access to product details for a single product ID. Only products that are online and assigned to a site catalog are returned. Along with product details, the availability, images, price, bundled_products, set_products, recommedations, product options, variations, and promotions for the products will be included, as appropriate.
         *
         * If you would like to get a raw Response object use the other getProduct function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param id - The ID of the requested product.
         * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations. The select will be available, tentatively from october 2023.The exact date will be announced via changelog.
         * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
         * @param currency - The currency mnemonic specified for price.
         * @param expand - The expand parameter. A comma separated list with the allowed values (availability, bundled_products, links, promotions, options, images, prices, variations, set_products, recommendations). All expand parameters are used for the request when no expand parameter is provided. The value "none" may be used to turn off all expand options.
         * @param locale - The locale context.
         * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
         * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Product.
         *
         */
        getProduct(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        id: string
                        select?: string
                        inventoryIds?: string
                        currency?: string
                        expand?: Array<string>
                        locale?: string
                        allImages?: boolean
                        perPricebook?: boolean
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Product$0>
        /**
         * Allows access to product details for a single product ID. Only products that are online and assigned to a site catalog are returned. Along with product details, the availability, images, price, bundled_products, set_products, recommedations, product options, variations, and promotions for the products will be included, as appropriate.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param id - The ID of the requested product.
         * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations. The select will be available, tentatively from october 2023.The exact date will be announced via changelog.
         * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
         * @param currency - The currency mnemonic specified for price.
         * @param expand - The expand parameter. A comma separated list with the allowed values (availability, bundled_products, links, promotions, options, images, prices, variations, set_products, recommendations). All expand parameters are used for the request when no expand parameter is provided. The value "none" may be used to turn off all expand options.
         * @param locale - The locale context.
         * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
         * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Product otherwise.
         *
         */
        getProduct<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        id: string
                        select?: string
                        inventoryIds?: string
                        currency?: string
                        expand?: Array<string>
                        locale?: string
                        allImages?: boolean
                        perPricebook?: boolean
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Product$0>
        /**
         * When you use the URL template, the server returns multiple categories (a result object of category documents). You can use this template as a convenient way of obtaining multiple categories in a single request, instead of issuing separate requests for each category. You can specify up to 50 multiple IDs. You must enclose the list of IDs in parentheses. If a category identifier contains parenthesis or the separator sign, you must URL encode the character. The server only returns online categories.
         *
         * If you would like to get a raw Response object use the other getCategories function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param ids - The comma separated list of category IDs (max 50).
         * @param levels - Specifies how many levels of nested subcategories you want the server to return. The default value is 1. Valid values are 0, 1, or 2.
         * @param locale - The locale context.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type CategoryResult.
         *
         */
        getCategories(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        ids: string
                        levels?: number
                        locale?: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<CategoryResult>
        /**
         * When you use the URL template, the server returns multiple categories (a result object of category documents). You can use this template as a convenient way of obtaining multiple categories in a single request, instead of issuing separate requests for each category. You can specify up to 50 multiple IDs. You must enclose the list of IDs in parentheses. If a category identifier contains parenthesis or the separator sign, you must URL encode the character. The server only returns online categories.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param ids - The comma separated list of category IDs (max 50).
         * @param levels - Specifies how many levels of nested subcategories you want the server to return. The default value is 1. Valid values are 0, 1, or 2.
         * @param locale - The locale context.
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type CategoryResult otherwise.
         *
         */
        getCategories<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        ids: string
                        levels?: number
                        locale?: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : CategoryResult>
        /**
         * When you use the URL template below, the server returns a category identified by its ID; by default, the server
         also returns the first level of subcategories, but you can specify another level by setting the levels
         parameter. The server only returns online categories.
         *
         * If you would like to get a raw Response object use the other getCategory function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param id - The ID of the requested category.
         * @param levels -
         * @param locale -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type Category.
         *
         */
        getCategory(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        id: string
                        levels?: number
                        locale?: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<Category>
        /**
         * When you use the URL template below, the server returns a category identified by its ID; by default, the server
         also returns the first level of subcategories, but you can specify another level by setting the levels
         parameter. The server only returns online categories.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId -
         * @param id - The ID of the requested category.
         * @param levels -
         * @param locale -
         * @param siteId -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type Category otherwise.
         *
         */
        getCategory<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        id: string
                        levels?: number
                        locale?: string
                        siteId: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : Category>
    }
    declare namespace ShopperProductsTypes {
        /*
         * Copyright (c) 2023, Salesforce, Inc.
         * All rights reserved.
         * SPDX-License-Identifier: BSD-3-Clause
         * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
         */
        /**
         * Makes a type easier to read.
         */
        type Prettify<T> = NonNullable<{
            [K in keyof T]: T[K]
        }>
        /**
         * Generates the types required on a method, based on those provided in the config.
         */
        type CompositeParameters<
            MethodParameters extends Record<string, unknown>,
            ConfigParameters extends Record<string, unknown>
        > = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>
        /**
         * If an object has a `parameters` property, and the `parameters` object has required properties,
         * then the `parameters` property on the root object is marked as required.
         */
        type RequireParametersUnlessAllAreOptional<
            T extends {
                parameters?: Record<string, unknown>
            }
        > = Record<string, never> extends NonNullable<T['parameters']>
            ? T
            : Prettify<T & Required<Pick<T, 'parameters'>>>
        /**
         * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
         * if not specified.
         */
        interface BaseUriParameters {
            shortCode: string
            version?: string // Optional, will default to "v1" if not provided.
        }
        /**
         * Generic interface for path parameters.
         */
        interface PathParameters {
            [key: string]: string | number | boolean
        }
        /**
         * Generic interface for query parameters.
         */
        interface QueryParameters {
            [key: string]: string | number | boolean | string[] | number[]
        }
        /**
         * Generic interface for all parameter types.
         */
        type UrlParameters = PathParameters | QueryParameters
        /**
         * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
         * it from the `RequestInit` provided by node-fetch.
         */
        type BrowserRequestInit = RequestInit
        /**
         * Any properties supported in either the browser or node are accepted.
         * Using the right properties in the right context is left to the user.
         */
        type FetchOptions = NodeRequestInit & BrowserRequestInit
        /**
         * Base options that can be passed to the `ClientConfig` class.
         */
        interface ClientConfigInit<Params extends BaseUriParameters> {
            baseUri?: string
            proxy?: string
            headers?: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions?: FetchOptions
            transformRequest?: (
                data: unknown,
                headers: {
                    [key: string]: string
                }
            ) => Required<FetchOptions>['body']
            throwOnBadResponse?: boolean
        }
        type FetchFunction = (
            input: RequestInfo,
            init?: FetchOptions | undefined
        ) => Promise<Response>
        /**
         * Configuration parameters common to Commerce SDK clients
         */
        class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
            baseUri?: string
            proxy?: string
            headers: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions: FetchOptions
            transformRequest: NonNullable<ClientConfigInit<Params>['transformRequest']>
            throwOnBadResponse: boolean
            constructor(config: ClientConfigInit<Params>)
            static readonly defaults: Pick<Required<ClientConfigInit<never>>, 'transformRequest'>
        }
        type ProductPriceTable = {
            price?: number
            pricebook?: string
            quantity?: number
        } & {
            [key: string]: unknown
        }
        type PriceRange = {
            maxPrice?: number
            minPrice?: number
            pricebook?: string
        } & {
            [key: string]: unknown
        }
        type OptionValue = {
            default?: boolean
            id: string
            name?: string
            price?: number
        } & {
            [key: string]: unknown
        }
        type Master = {
            masterId: string
            orderable?: boolean
            price?: number
            priceMax?: number
            prices?: Record<string, unknown>
        } & {
            [key: string]: unknown
        }
        type Category = {
            categories?: Array<Category>
            description?: string
            id: string
            image?: string
            name?: string
            pageDescription?: string
            pageKeywords?: string
            pageTitle?: string
            parentCategoryId?: string
            parentCategoryTree?: Array<PathRecord>
            thumbnail?: string
        } & {
            [key: string]: unknown
        }
        type CategoryResult = {
            limit: number
            data: Array<Category>
            total: number
        } & {
            [key: string]: unknown
        }
        type VariationAttribute = {
            id: string
            name?: string
            values?: Array<VariationAttributeValue$0>
        } & {
            [key: string]: unknown
        }
        type RecommendationType = {
            displayValue: string
            value: number
        } & {
            [key: string]: unknown
        }
        type ProductType = {
            bundle?: boolean
            item?: boolean
            master?: boolean
            option?: boolean
            set?: boolean
            variant?: boolean
            variationGroup?: boolean
        } & {
            [key: string]: unknown
        }
        type Recommendation = {
            calloutMsg?: string
            image?: Image$0
            longDescription?: string
            name?: string
            recommendationType: RecommendationType
            recommendedItemId?: string
            shortDescription?: string
        } & {
            [key: string]: unknown
        }
        type Variant = {
            orderable?: boolean
            price?: number
            productId: string
            tieredPrices?: Array<ProductPriceTable>
            variationValues?: Record<string, unknown>
        } & {
            [key: string]: unknown
        }
        type VariationGroup = {
            orderable: boolean
            price: number
            productId: string
            variationValues: Record<string, unknown>
        } & {
            [key: string]: unknown
        }
        type ProductResult = {
            limit: number
            data: Array<Product$0>
            total: number
        } & {
            [key: string]: unknown
        }
        type ProductLink = {
            sourceProductId: string
            sourceProductLink: string
            targetProductId: string
            targetProductLink: string
            type: string
        } & {
            [key: string]: unknown
        }
        type Inventory = {
            ats?: number
            backorderable?: boolean
            id: string
            inStockDate?: unknown
            orderable?: boolean
            preorderable?: boolean
            stockLevel?: number
        } & {
            [key: string]: unknown
        }
        type ImageGroup = {
            images: Array<Image$0>
            variationAttributes?: Array<VariationAttribute>
            viewType: string
        } & {
            [key: string]: unknown
        }
        type Option = {
            description?: string
            id: string
            image?: string
            name?: string
            values?: Array<OptionValue>
        } & {
            [key: string]: unknown
        }
        type Product = {
            brand?: string
            bundledProducts?: Array<BundledProduct$0>
            currency?: string
            ean?: string
            fetchDate?: number
            id: string
            imageGroups?: Array<ImageGroup>
            inventories?: Array<Inventory>
            inventory?: Inventory
            longDescription?: string
            manufacturerName?: string
            manufacturerSku?: string
            master?: Master
            minOrderQuantity?: number
            name?: string
            options?: Array<Option>
            pageDescription?: string
            pageKeywords?: string
            pageTitle?: string
            price?: number
            pricePerUnit?: number
            pricePerUnitMax?: number
            priceMax?: number
            priceRanges?: Array<PriceRange>
            prices?: Record<string, unknown>
            primaryCategoryId?: string
            productLinks?: Array<ProductLink>
            productPromotions?: Array<ProductPromotion$0>
            recommendations?: Array<Recommendation>
            setProducts?: Array<Product>
            shortDescription?: string
            slugUrl?: string
            stepQuantity?: number
            tieredPrices?: Array<ProductPriceTable>
            type?: ProductType
            unit?: string
            upc?: string
            validFrom?: unknown
            validTo?: unknown
            variants?: Array<Variant>
            variationAttributes?: Array<VariationAttribute>
            variationGroups?: Array<VariationGroup>
            variationValues?: Record<string, unknown>
        } & {
            [key: string]: unknown
        }
        type Image = {
            alt?: string
            disBaseLink?: string
            link: string
            title?: string
        } & {
            [key: string]: unknown
        }
        type VariationAttributeValue = {
            description?: string
            image?: Image
            imageSwatch?: Image
            name?: string
            orderable?: boolean
            value: string
        } & {
            [key: string]: unknown
        }
        type ProductPromotion = {
            calloutMsg: string
            promotionId: string
            promotionalPrice: number
        } & {
            [key: string]: unknown
        }
        type PathRecord = {
            id?: string
            name?: string
        } & {
            [key: string]: unknown
        }
        type BundledProduct = {
            id: string
            product: Product
            quantity: number
        } & {
            [key: string]: unknown
        }
        type ErrorResponse = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type ChangeControlled = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type RangeFilter = {
            [key: string]: unknown
        }
        type ChangeControlledDataType = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type Error = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type Money = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResult = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type SearchRequest = {
            limit?: number
            query: Query$7
            sorts?: Array<Sort$7>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type PropertyDefinition = {
            defaultValue?: PropertyValueDefinition$6
            id?: string
            name: L10nString$6
            description: L10nString$6
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString$6
            possibleValues?: Array<PropertyValueDefinition$6>
            type: string
            visible?: boolean
        } & {
            [key: string]: unknown
        }
        type LocalizedString = Record<string, unknown>
        type PaginatedSearchResult = {
            query: Query$7
            sorts?: Array<Sort$7>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type ClosedObject = Record<string, unknown>
        type OpenObject = Record<string, unknown>
        type NoPropertiesAllowed = Record<string, unknown>
        type SpecifiedPropertiesAllowed = Record<string, unknown>
        type BoolFilter = {
            filters?: Array<Filter$7>
            operator: string
        } & {
            [key: string]: unknown
        }
        type PaginatedSearchResultBase = {
            query: Query$7
            sorts?: Array<Sort$7>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type MatchAllQuery = Record<string, unknown>
        type FilteredQuery = {
            filter: Filter$7
            query: Query$7
        } & {
            [key: string]: unknown
        }
        type QueryFilter = {
            query: Query$7
        } & {
            [key: string]: unknown
        }
        type Query = {
            boolQuery?: BoolQuery$7
            filteredQuery?: FilteredQuery
            matchAllQuery?: MatchAllQuery
            nestedQuery?: NestedQuery$7
            termQuery?: TermQuery$7
            textQuery?: TextQuery$7
        } & {
            [key: string]: unknown
        }
        type TermQuery = {
            fields: Array<string>
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TermFilter = {
            field: string
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TextQuery = {
            fields: Array<string>
            searchPhrase: string
        } & {
            [key: string]: unknown
        }
        type Range2Filter = {
            filterMode?: string
            fromField: string
            fromInclusive?: boolean
            fromValue?: unknown
            toField: string
            toInclusive?: boolean
            toValue?: unknown
        } & {
            [key: string]: unknown
        }
        type BoolQuery = {
            must?: Array<Query>
            mustNot?: Array<Query>
            should?: Array<Query>
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResultBase = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type NestedQuery = {
            path: string
            query: Query
            scoreMode?: string
        } & {
            [key: string]: unknown
        }
        type Filter = {
            boolFilter?: BoolFilter
            queryFilter?: QueryFilter
            range2Filter?: Range2Filter
            rangeFilter?: RangeFilter
            termFilter?: TermFilter
        } & {
            [key: string]: unknown
        }
        type Sort = {
            field: string
            sortOrder?: string
        } & {
            [key: string]: unknown
        }
        type SearchRequestBase = {
            limit?: number
            query: Query
            sorts?: Array<Sort>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type MoneyMnemonic = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type L10nString = Record<string, unknown>
        type AttributeDefinition = {
            defaultValue?: PropertyValueDefinition$6
            id?: string
            name: L10nString
            description: L10nString
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString
            possibleValues?: Array<PropertyValueDefinition$6>
            type: string
            visible?: boolean
        }
        type PropertyValueDefinition = {
            description: L10nString
            displayValue: L10nString
            id: string
            position?: number
            value: string
        }
        /**
         * All path parameters that are used by at least one ShopperProducts method.
         */
        type ShopperProductsPathParameters = {
            organizationId?: string
            id?: string
        }
        /**
         * All query parameters that are used by at least one ShopperProducts method.
         */
        type ShopperProductsQueryParameters = {
            select?: string
            ids?: string
            inventoryIds?: string
            currency?: string
            expand?: Array<string>
            locale?: string
            allImages?: boolean
            perPricebook?: boolean
            siteId?: string
            levels?: number
        }
        /**
         * All parameters that are used by ShopperProducts.
         */
        type ShopperProductsParameters = ShopperProductsPathParameters &
            BaseUriParameters &
            ShopperProductsQueryParameters
        /**
         * [](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=:Summary)
         * ==================================
         *
         * **<br />
         *
         * Simple example:
         *
         * ```typescript
         *   import { ShopperProducts } from "commerce-sdk-isomorphic";
         *
         *   const clientConfig = {
         *     parameters: {
         *       clientId: "XXXXXX",
         *       organizationId: "XXXX",
         *       shortCode: "XXX",
         *       siteId: "XX"
         *     }
         *   };
         *   const shopperProductsClient = new ShopperProducts(clientConfig);
         * ```
         *
         * <span style="font-size:.7em; display:block; text-align: right">
         * API Version: <br />
         * Last Updated: <br />
         * </span>
         
         *
         
         */
        class ShopperProducts<
            ConfigParameters extends ShopperProductsParameters & Record<string, unknown>
        > {
            // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
            clientConfig: ClientConfig<ConfigParameters> & {
                baseUri: string
            }
            static readonly defaultBaseUri =
                'https://{shortCode}.api.commercecloud.salesforce.com/product/shopper-products/{version}'
            constructor(config: ClientConfigInit<ConfigParameters>)
            /**
             * Allows access to multiple products by a single request. Only products that are online and assigned to a site catalog are returned. The maximum number of productIDs that can be requested are 24. Along with product details, the availability, product options, images, price, promotions, and variations for the valid products will be included, as appropriate.
             *
             * If you would like to get a raw Response object use the other getProducts function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations.The select will be available, tentatively from october 2023.The exact date will be announced via changelog.
             * @param ids - The IDs of the requested products (comma-separated, max 24 IDs).
             * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
             * @param currency - The currency mnemonic specified for price.
             * @param expand - The expand parameter. A comma separated list with the allowed values (availability, links, promotions, options, images, prices, variations, recommendations). All expand parameters are used for the request when no expand parameter is provided. The value "none" may be used to turn off all expand options.
             * @param locale - The locale context.
             * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
             * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type ProductResult.
             *
             */
            getProducts(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            select?: string
                            ids: string
                            inventoryIds?: string
                            currency?: string
                            expand?: Array<string>
                            locale?: string
                            allImages?: boolean
                            perPricebook?: boolean
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<ProductResult>
            /**
             * Allows access to multiple products by a single request. Only products that are online and assigned to a site catalog are returned. The maximum number of productIDs that can be requested are 24. Along with product details, the availability, product options, images, price, promotions, and variations for the valid products will be included, as appropriate.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations.The select will be available, tentatively from october 2023.The exact date will be announced via changelog.
             * @param ids - The IDs of the requested products (comma-separated, max 24 IDs).
             * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
             * @param currency - The currency mnemonic specified for price.
             * @param expand - The expand parameter. A comma separated list with the allowed values (availability, links, promotions, options, images, prices, variations, recommendations). All expand parameters are used for the request when no expand parameter is provided. The value "none" may be used to turn off all expand options.
             * @param locale - The locale context.
             * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
             * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type ProductResult otherwise.
             *
             */
            getProducts<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            select?: string
                            ids: string
                            inventoryIds?: string
                            currency?: string
                            expand?: Array<string>
                            locale?: string
                            allImages?: boolean
                            perPricebook?: boolean
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : ProductResult>
            /**
             * Allows access to product details for a single product ID. Only products that are online and assigned to a site catalog are returned. Along with product details, the availability, images, price, bundled_products, set_products, recommedations, product options, variations, and promotions for the products will be included, as appropriate.
             *
             * If you would like to get a raw Response object use the other getProduct function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param id - The ID of the requested product.
             * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations. The select will be available, tentatively from october 2023.The exact date will be announced via changelog.
             * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
             * @param currency - The currency mnemonic specified for price.
             * @param expand - The expand parameter. A comma separated list with the allowed values (availability, bundled_products, links, promotions, options, images, prices, variations, set_products, recommendations). All expand parameters are used for the request when no expand parameter is provided. The value "none" may be used to turn off all expand options.
             * @param locale - The locale context.
             * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
             * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type Product.
             *
             */
            getProduct(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            id: string
                            select?: string
                            inventoryIds?: string
                            currency?: string
                            expand?: Array<string>
                            locale?: string
                            allImages?: boolean
                            perPricebook?: boolean
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Product>
            /**
             * Allows access to product details for a single product ID. Only products that are online and assigned to a site catalog are returned. Along with product details, the availability, images, price, bundled_products, set_products, recommedations, product options, variations, and promotions for the products will be included, as appropriate.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param id - The ID of the requested product.
             * @param select - The property selector declaring which fields are included into the response payload. You can specify a single field name, a comma-separated list of names, or work with wildcards.You can also sepcify Array Operations. The select will be available, tentatively from october 2023.The exact date will be announced via changelog.
             * @param inventoryIds - The optional inventory list IDs, for which the availability should be shown (comma-separated, max 5 inventoryListIDs).
             * @param currency - The currency mnemonic specified for price.
             * @param expand - The expand parameter. A comma separated list with the allowed values (availability, bundled_products, links, promotions, options, images, prices, variations, set_products, recommendations). All expand parameters are used for the request when no expand parameter is provided. The value "none" may be used to turn off all expand options.
             * @param locale - The locale context.
             * @param allImages - The flag that indicates whether to retrieve the whole image model for the requested product.
             * @param perPricebook - The flag that indicates whether to retrieve the per PriceBook prices and tiered prices (if available) for requested Products. Available end of June, 2021.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Product otherwise.
             *
             */
            getProduct<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            id: string
                            select?: string
                            inventoryIds?: string
                            currency?: string
                            expand?: Array<string>
                            locale?: string
                            allImages?: boolean
                            perPricebook?: boolean
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Product>
            /**
             * When you use the URL template, the server returns multiple categories (a result object of category documents). You can use this template as a convenient way of obtaining multiple categories in a single request, instead of issuing separate requests for each category. You can specify up to 50 multiple IDs. You must enclose the list of IDs in parentheses. If a category identifier contains parenthesis or the separator sign, you must URL encode the character. The server only returns online categories.
             *
             * If you would like to get a raw Response object use the other getCategories function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param ids - The comma separated list of category IDs (max 50).
             * @param levels - Specifies how many levels of nested subcategories you want the server to return. The default value is 1. Valid values are 0, 1, or 2.
             * @param locale - The locale context.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type CategoryResult.
             *
             */
            getCategories(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            ids: string
                            levels?: number
                            locale?: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<CategoryResult>
            /**
             * When you use the URL template, the server returns multiple categories (a result object of category documents). You can use this template as a convenient way of obtaining multiple categories in a single request, instead of issuing separate requests for each category. You can specify up to 50 multiple IDs. You must enclose the list of IDs in parentheses. If a category identifier contains parenthesis or the separator sign, you must URL encode the character. The server only returns online categories.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param ids - The comma separated list of category IDs (max 50).
             * @param levels - Specifies how many levels of nested subcategories you want the server to return. The default value is 1. Valid values are 0, 1, or 2.
             * @param locale - The locale context.
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type CategoryResult otherwise.
             *
             */
            getCategories<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            ids: string
                            levels?: number
                            locale?: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : CategoryResult>
            /**
             * When you use the URL template below, the server returns a category identified by its ID; by default, the server
             also returns the first level of subcategories, but you can specify another level by setting the levels
             parameter. The server only returns online categories.
             *
             * If you would like to get a raw Response object use the other getCategory function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param id - The ID of the requested category.
             * @param levels -
             * @param locale -
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type Category.
             *
             */
            getCategory(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            id: string
                            levels?: number
                            locale?: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Category>
            /**
             * When you use the URL template below, the server returns a category identified by its ID; by default, the server
             also returns the first level of subcategories, but you can specify another level by setting the levels
             parameter. The server only returns online categories.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param id - The ID of the requested category.
             * @param levels -
             * @param locale -
             * @param siteId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Category otherwise.
             *
             */
            getCategory<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            id: string
                            levels?: number
                            locale?: string
                            siteId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Category>
        }
    }
    type Promotion = {
        calloutMsg?: string
        currency?: string
        details?: string
        endDate?: unknown
        id: string
        image?: string
        name?: string
        startDate?: unknown
    } & {
        [key: string]: unknown
    }
    type PromotionResult = {
        count: number
        data: Array<Promotion>
        total: number
    } & {
        [key: string]: unknown
    }
    type TermQuery$8 = {
        fields: Array<string>
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TextQuery$8 = {
        fields: Array<string>
        searchPhrase: string
    } & {
        [key: string]: unknown
    }
    type BoolQuery$8 = {
        must?: Array<any>
        mustNot?: Array<any>
        should?: Array<any>
    } & {
        [key: string]: unknown
    }
    type NestedQuery$8 = {
        path: string
        query: unknown
        scoreMode?: string
    } & {
        [key: string]: unknown
    }
    type Sort$8 = {
        field: string
        sortOrder?: string
    } & {
        [key: string]: unknown
    }
    type L10nString$7 = Record<string, unknown>
    type PropertyValueDefinition$7 = {
        description: L10nString$7
        displayValue: L10nString$7
        id: string
        position?: number
        value: string
    }
    /**
     * All path parameters that are used by at least one ShopperPromotions method.
     */
    type ShopperPromotionsPathParameters = {
        organizationId?: string
        campaignId?: string
    }
    /**
     * All query parameters that are used by at least one ShopperPromotions method.
     */
    type ShopperPromotionsQueryParameters = {
        siteId?: string
        ids?: string
        locale?: string
        startDate?: string
        endDate?: string
        currency?: string
    }
    /**
     * All parameters that are used by ShopperPromotions.
     */
    type ShopperPromotionsParameters = ShopperPromotionsPathParameters &
        BaseUriParameters &
        ShopperPromotionsQueryParameters
    /**
     * [Shopper Promotions](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-promotions:Summary)
     * ==================================
     *
     * *View details for active promotions.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperPromotions } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperPromotionsClient = new ShopperPromotions(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 1.0.21<br />
     * Last Updated: <br />
     * </span>
     
     *
     
     */
    declare class ShopperPromotions<
        ConfigParameters extends ShopperPromotionsParameters & Record<string, unknown>
    > {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string
        }
        static readonly defaultBaseUri =
            'https://{shortCode}.api.commercecloud.salesforce.com/pricing/shopper-promotions/{version}'
        constructor(config: ClientConfigInit<ConfigParameters>)
        /**
         * Returns an array of enabled promotions for a list of specified IDs. In the request URL, you can specify up to 50 IDs. If you specify an ID that contains either parentheses or the separator characters, you must URL encode these characters. Each request returns only enabled promotions as the server does not consider promotion qualifiers or schedules.
         *
         * If you would like to get a raw Response object use the other getPromotions function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param ids -
         * @param locale -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PromotionResult.
         *
         */
        getPromotions(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                        ids: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<PromotionResult>
        /**
         * Returns an array of enabled promotions for a list of specified IDs. In the request URL, you can specify up to 50 IDs. If you specify an ID that contains either parentheses or the separator characters, you must URL encode these characters. Each request returns only enabled promotions as the server does not consider promotion qualifiers or schedules.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param ids -
         * @param locale -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PromotionResult otherwise.
         *
         */
        getPromotions<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                        ids: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : PromotionResult>
        /**
         * Handles get promotion by filter criteria. Returns an array of enabled promotions matching the specified filter
         criteria. In the request URL, you must provide a campaign_id parameter, and you can optionally specify a date
         range by providing start_date and end_date parameters. Both parameters are required to specify a date range, as
         omitting one causes the server to return a MissingParameterException fault. Each request returns only enabled
         promotions, since the server does not consider promotion qualifiers or schedules.
         *
         * If you would like to get a raw Response object use the other getPromotionsForCampaign function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param campaignId - Find the promotions assigned to this campaign (mandatory).
         * @param siteId -
         * @param startDate - The start date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
         * @param endDate - The end date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
         * @param currency - The currency mnemonic specified for price. This parameter is effective only for product suggestions.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type PromotionResult.
         *
         */
        getPromotionsForCampaign(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        campaignId: string
                        siteId: string
                        startDate?: string
                        endDate?: string
                        currency?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<PromotionResult>
        /**
         * Handles get promotion by filter criteria. Returns an array of enabled promotions matching the specified filter
         criteria. In the request URL, you must provide a campaign_id parameter, and you can optionally specify a date
         range by providing start_date and end_date parameters. Both parameters are required to specify a date range, as
         omitting one causes the server to return a MissingParameterException fault. Each request returns only enabled
         promotions, since the server does not consider promotion qualifiers or schedules.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param campaignId - Find the promotions assigned to this campaign (mandatory).
         * @param siteId -
         * @param startDate - The start date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
         * @param endDate - The end date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
         * @param currency - The currency mnemonic specified for price. This parameter is effective only for product suggestions.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type PromotionResult otherwise.
         *
         */
        getPromotionsForCampaign<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        campaignId: string
                        siteId: string
                        startDate?: string
                        endDate?: string
                        currency?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : PromotionResult>
    }
    declare namespace ShopperPromotionsTypes {
        /*
         * Copyright (c) 2023, Salesforce, Inc.
         * All rights reserved.
         * SPDX-License-Identifier: BSD-3-Clause
         * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
         */
        /**
         * Makes a type easier to read.
         */
        type Prettify<T> = NonNullable<{
            [K in keyof T]: T[K]
        }>
        /**
         * Generates the types required on a method, based on those provided in the config.
         */
        type CompositeParameters<
            MethodParameters extends Record<string, unknown>,
            ConfigParameters extends Record<string, unknown>
        > = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>
        /**
         * If an object has a `parameters` property, and the `parameters` object has required properties,
         * then the `parameters` property on the root object is marked as required.
         */
        type RequireParametersUnlessAllAreOptional<
            T extends {
                parameters?: Record<string, unknown>
            }
        > = Record<string, never> extends NonNullable<T['parameters']>
            ? T
            : Prettify<T & Required<Pick<T, 'parameters'>>>
        /**
         * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
         * if not specified.
         */
        interface BaseUriParameters {
            shortCode: string
            version?: string // Optional, will default to "v1" if not provided.
        }
        /**
         * Generic interface for path parameters.
         */
        interface PathParameters {
            [key: string]: string | number | boolean
        }
        /**
         * Generic interface for query parameters.
         */
        interface QueryParameters {
            [key: string]: string | number | boolean | string[] | number[]
        }
        /**
         * Generic interface for all parameter types.
         */
        type UrlParameters = PathParameters | QueryParameters
        /**
         * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
         * it from the `RequestInit` provided by node-fetch.
         */
        type BrowserRequestInit = RequestInit
        /**
         * Any properties supported in either the browser or node are accepted.
         * Using the right properties in the right context is left to the user.
         */
        type FetchOptions = NodeRequestInit & BrowserRequestInit
        /**
         * Base options that can be passed to the `ClientConfig` class.
         */
        interface ClientConfigInit<Params extends BaseUriParameters> {
            baseUri?: string
            proxy?: string
            headers?: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions?: FetchOptions
            transformRequest?: (
                data: unknown,
                headers: {
                    [key: string]: string
                }
            ) => Required<FetchOptions>['body']
            throwOnBadResponse?: boolean
        }
        type FetchFunction = (
            input: RequestInfo,
            init?: FetchOptions | undefined
        ) => Promise<Response>
        /**
         * Configuration parameters common to Commerce SDK clients
         */
        class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
            baseUri?: string
            proxy?: string
            headers: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions: FetchOptions
            transformRequest: NonNullable<ClientConfigInit<Params>['transformRequest']>
            throwOnBadResponse: boolean
            constructor(config: ClientConfigInit<Params>)
            static readonly defaults: Pick<Required<ClientConfigInit<never>>, 'transformRequest'>
        }
        type Promotion = {
            calloutMsg?: string
            currency?: string
            details?: string
            endDate?: unknown
            id: string
            image?: string
            name?: string
            startDate?: unknown
        } & {
            [key: string]: unknown
        }
        type PromotionResult = {
            count: number
            data: Array<Promotion>
            total: number
        } & {
            [key: string]: unknown
        }
        type Error = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type ErrorResponse = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type ChangeControlled = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type RangeFilter = {
            [key: string]: unknown
        }
        type ChangeControlledDataType = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type Money = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResult = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type SearchRequest = {
            limit?: number
            query: unknown
            sorts?: Array<Sort$8>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type PropertyDefinition = {
            defaultValue?: PropertyValueDefinition$7
            id?: string
            name: L10nString$7
            description: L10nString$7
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString$7
            possibleValues?: Array<PropertyValueDefinition$7>
            type: string
            visible?: boolean
        } & {
            [key: string]: unknown
        }
        type LocalizedString = Record<string, unknown>
        type PaginatedSearchResult = {
            query: unknown
            sorts?: Array<Sort$8>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type ClosedObject = Record<string, unknown>
        type OpenObject = Record<string, unknown>
        type NoPropertiesAllowed = Record<string, unknown>
        type SpecifiedPropertiesAllowed = Record<string, unknown>
        type BoolFilter = {
            filters?: Array<any>
            operator: string
        } & {
            [key: string]: unknown
        }
        type PaginatedSearchResultBase = {
            query: unknown
            sorts?: Array<Sort$8>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type MatchAllQuery = Record<string, unknown>
        type FilteredQuery = {
            filter: unknown
            query: unknown
        } & {
            [key: string]: unknown
        }
        type QueryFilter = {
            query: unknown
        } & {
            [key: string]: unknown
        }
        type Query = {
            boolQuery?: BoolQuery$8
            filteredQuery?: FilteredQuery
            matchAllQuery?: MatchAllQuery
            nestedQuery?: NestedQuery$8
            termQuery?: TermQuery$8
            textQuery?: TextQuery$8
        } & {
            [key: string]: unknown
        }
        type TermQuery = {
            fields: Array<string>
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TermFilter = {
            field: string
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TextQuery = {
            fields: Array<string>
            searchPhrase: string
        } & {
            [key: string]: unknown
        }
        type Range2Filter = {
            filterMode?: string
            fromField: string
            fromInclusive?: boolean
            fromValue?: unknown
            toField: string
            toInclusive?: boolean
            toValue?: unknown
        } & {
            [key: string]: unknown
        }
        type BoolQuery = {
            must?: Array<any>
            mustNot?: Array<any>
            should?: Array<any>
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResultBase = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type NestedQuery = {
            path: string
            query: unknown
            scoreMode?: string
        } & {
            [key: string]: unknown
        }
        type Filter = {
            boolFilter?: BoolFilter
            queryFilter?: QueryFilter
            range2Filter?: Range2Filter
            rangeFilter?: RangeFilter
            termFilter?: TermFilter
        } & {
            [key: string]: unknown
        }
        type Sort = {
            field: string
            sortOrder?: string
        } & {
            [key: string]: unknown
        }
        type SearchRequestBase = {
            limit?: number
            query: unknown
            sorts?: Array<Sort>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type MoneyMnemonic = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type L10nString = Record<string, unknown>
        type AttributeDefinition = {
            defaultValue?: PropertyValueDefinition$7
            id?: string
            name: L10nString
            description: L10nString
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString
            possibleValues?: Array<PropertyValueDefinition$7>
            type: string
            visible?: boolean
        }
        type PropertyValueDefinition = {
            description: L10nString
            displayValue: L10nString
            id: string
            position?: number
            value: string
        }
        /**
         * All path parameters that are used by at least one ShopperPromotions method.
         */
        type ShopperPromotionsPathParameters = {
            organizationId?: string
            campaignId?: string
        }
        /**
         * All query parameters that are used by at least one ShopperPromotions method.
         */
        type ShopperPromotionsQueryParameters = {
            siteId?: string
            ids?: string
            locale?: string
            startDate?: string
            endDate?: string
            currency?: string
        }
        /**
         * All parameters that are used by ShopperPromotions.
         */
        type ShopperPromotionsParameters = ShopperPromotionsPathParameters &
            BaseUriParameters &
            ShopperPromotionsQueryParameters
        /**
         * [Shopper Promotions](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-promotions:Summary)
         * ==================================
         *
         * *View details for active promotions.*<br />
         *
         * Simple example:
         *
         * ```typescript
         *   import { ShopperPromotions } from "commerce-sdk-isomorphic";
         *
         *   const clientConfig = {
         *     parameters: {
         *       clientId: "XXXXXX",
         *       organizationId: "XXXX",
         *       shortCode: "XXX",
         *       siteId: "XX"
         *     }
         *   };
         *   const shopperPromotionsClient = new ShopperPromotions(clientConfig);
         * ```
         *
         * <span style="font-size:.7em; display:block; text-align: right">
         * API Version: 1.0.21<br />
         * Last Updated: <br />
         * </span>
         
         *
         
         */
        class ShopperPromotions<
            ConfigParameters extends ShopperPromotionsParameters & Record<string, unknown>
        > {
            // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
            clientConfig: ClientConfig<ConfigParameters> & {
                baseUri: string
            }
            static readonly defaultBaseUri =
                'https://{shortCode}.api.commercecloud.salesforce.com/pricing/shopper-promotions/{version}'
            constructor(config: ClientConfigInit<ConfigParameters>)
            /**
             * Returns an array of enabled promotions for a list of specified IDs. In the request URL, you can specify up to 50 IDs. If you specify an ID that contains either parentheses or the separator characters, you must URL encode these characters. Each request returns only enabled promotions as the server does not consider promotion qualifiers or schedules.
             *
             * If you would like to get a raw Response object use the other getPromotions function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param siteId -
             * @param ids -
             * @param locale -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type PromotionResult.
             *
             */
            getPromotions(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                            ids: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<PromotionResult>
            /**
             * Returns an array of enabled promotions for a list of specified IDs. In the request URL, you can specify up to 50 IDs. If you specify an ID that contains either parentheses or the separator characters, you must URL encode these characters. Each request returns only enabled promotions as the server does not consider promotion qualifiers or schedules.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param siteId -
             * @param ids -
             * @param locale -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type PromotionResult otherwise.
             *
             */
            getPromotions<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                            ids: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : PromotionResult>
            /**
             * Handles get promotion by filter criteria. Returns an array of enabled promotions matching the specified filter
             criteria. In the request URL, you must provide a campaign_id parameter, and you can optionally specify a date
             range by providing start_date and end_date parameters. Both parameters are required to specify a date range, as
             omitting one causes the server to return a MissingParameterException fault. Each request returns only enabled
             promotions, since the server does not consider promotion qualifiers or schedules.
             *
             * If you would like to get a raw Response object use the other getPromotionsForCampaign function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param campaignId - Find the promotions assigned to this campaign (mandatory).
             * @param siteId -
             * @param startDate - The start date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
             * @param endDate - The end date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
             * @param currency - The currency mnemonic specified for price. This parameter is effective only for product suggestions.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type PromotionResult.
             *
             */
            getPromotionsForCampaign(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            campaignId: string
                            siteId: string
                            startDate?: string
                            endDate?: string
                            currency?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<PromotionResult>
            /**
             * Handles get promotion by filter criteria. Returns an array of enabled promotions matching the specified filter
             criteria. In the request URL, you must provide a campaign_id parameter, and you can optionally specify a date
             range by providing start_date and end_date parameters. Both parameters are required to specify a date range, as
             omitting one causes the server to return a MissingParameterException fault. Each request returns only enabled
             promotions, since the server does not consider promotion qualifiers or schedules.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param campaignId - Find the promotions assigned to this campaign (mandatory).
             * @param siteId -
             * @param startDate - The start date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
             * @param endDate - The end date of the promotion in ISO8601 date time format: yyyy-MM-dd'T'HH:mmZ
             * @param currency - The currency mnemonic specified for price. This parameter is effective only for product suggestions.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type PromotionResult otherwise.
             *
             */
            getPromotionsForCampaign<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            campaignId: string
                            siteId: string
                            startDate?: string
                            endDate?: string
                            currency?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : PromotionResult>
        }
    }
    type TermQuery$9 = {
        fields: Array<string>
        operator: string
        values?: Array<any>
    } & {
        [key: string]: unknown
    }
    type TextQuery$9 = {
        fields: Array<string>
        searchPhrase: string
    } & {
        [key: string]: unknown
    }
    type BoolQuery$9 = {
        must?: Array<any>
        mustNot?: Array<any>
        should?: Array<any>
    } & {
        [key: string]: unknown
    }
    type NestedQuery$9 = {
        path: string
        query: unknown
        scoreMode?: string
    } & {
        [key: string]: unknown
    }
    type Sort$9 = {
        field: string
        sortOrder?: string
    } & {
        [key: string]: unknown
    }
    type RangeFilter$9 = {
        field: string
        from?: unknown
        fromInclusive?: boolean
        to?: unknown
        toInclusive?: boolean
    } & {
        [key: string]: unknown
    }
    type L10nString$8 = Record<string, unknown>
    type PropertyValueDefinition$8 = {
        description: L10nString$8
        displayValue: L10nString$8
        id: string
        position?: number
        value: string
    }
    type ProductRef = {
        id: string
    } & {
        [key: string]: unknown
    }
    type SuggestedTerms = {
        originalTerm: string
        terms?: Array<SuggestedTerm>
    } & {
        [key: string]: unknown
    }
    type CategorySuggestions = {
        categories?: Array<SuggestedCategory>
        suggestedPhrases?: Array<SuggestedPhrase>
        suggestedTerms: Array<SuggestedTerms>
    } & {
        [key: string]: unknown
    }
    type SuggestedProduct = {
        currency: string
        price: number
        productId: string
        productName: string
    } & {
        [key: string]: unknown
    }
    type SuggestedPhrase = {
        exactMatch: boolean
        phrase: string
    } & {
        [key: string]: unknown
    }
    type VariationAttribute$1 = {
        id: string
        name?: string
        values?: Array<VariationAttributeValue$0>
    } & {
        [key: string]: unknown
    }
    type ProductSuggestions = {
        products?: Array<SuggestedProduct>
        suggestedPhrases?: Array<SuggestedPhrase>
        suggestedTerms: Array<SuggestedTerms>
    } & {
        [key: string]: unknown
    }
    type SuggestedCategory = {
        id: string
        name: string
        parentCategoryName: string
    } & {
        [key: string]: unknown
    }
    type ProductType$1 = {
        bundle?: boolean
        item?: boolean
        master?: boolean
        option?: boolean
        set?: boolean
        variant?: boolean
        variationGroup?: boolean
    } & {
        [key: string]: unknown
    }
    type BrandSuggestions = Record<string, unknown>
    type ProductSearchRefinementValue = {
        description?: string
        hitCount: number
        label: string
        presentationId?: string
        value: string
        values?: Array<ProductSearchRefinementValue>
    } & {
        [key: string]: unknown
    }
    type ProductSearchSortingOption = {
        id: string
        label: string
    } & {
        [key: string]: unknown
    }
    type SuggestedTerm = {
        completed: boolean
        corrected: boolean
        exactMatch: boolean
        value: string
    } & {
        [key: string]: unknown
    }
    type ProductSearchRefinement = {
        attributeId: string
        label?: string
        values?: Array<ProductSearchRefinementValue>
    } & {
        [key: string]: unknown
    }
    type CustomSuggestions = {
        customSuggestion?: string
        suggestedPhrases?: Array<SuggestedPhrase>
        suggestedTerms: Array<SuggestedTerms>
    } & {
        [key: string]: unknown
    }
    type ProductSearchHit = {
        currency?: string
        hitType?: string
        image?: Image$0
        orderable?: boolean
        price?: number
        priceMax?: number
        prices?: Record<string, unknown>
        productId: string
        productName?: string
        productType?: ProductType$1
        representedProduct?: ProductRef
        representedProducts?: Array<ProductRef>
        variationAttributes?: Array<VariationAttribute$1>
    } & {
        [key: string]: unknown
    }
    type ProductSearchResult = {
        limit: number
        hits: Array<ProductSearchHit>
        query: string
        refinements: Array<ProductSearchRefinement>
        searchPhraseSuggestions: Suggestion
        selectedRefinements?: Record<string, unknown>
        selectedSortingOption?: string
        sortingOptions: Array<ProductSearchSortingOption>
        offset: number
        total: number
    } & {
        [key: string]: unknown
    }
    type Image$1 = {
        alt?: string
        disBaseLink?: string
        link: string
        title?: string
    } & {
        [key: string]: unknown
    }
    type VariationAttributeValue$1 = {
        description?: string
        image?: Image$1
        imageSwatch?: Image$1
        name?: string
        orderable?: boolean
        value: string
    } & {
        [key: string]: unknown
    }
    type Suggestion$0 = {
        suggestedPhrases?: Array<SuggestedPhrase>
        suggestedTerms: Array<SuggestedTerms>
    } & {
        [key: string]: unknown
    }
    type SuggestionResult = {
        brandSuggestions?: BrandSuggestions
        categorySuggestions?: CategorySuggestions
        productSuggestions?: ProductSuggestions
        customSuggestion?: CustomSuggestions
        searchPhrase: string
    } & {
        [key: string]: unknown
    }
    /**
     * All path parameters that are used by at least one ShopperSearch method.
     */
    type ShopperSearchPathParameters = {
        organizationId?: string
    }
    /**
     * All query parameters that are used by at least one ShopperSearch method.
     */
    type ShopperSearchQueryParameters = {
        siteId?: string
        q?: string
        refine?: Array<string>
        sort?: string
        currency?: string
        locale?: string
        expand?: Array<string>
        offset?: unknown
        limit?: number
    }
    /**
     * All parameters that are used by ShopperSearch.
     */
    type ShopperSearchParameters = ShopperSearchPathParameters &
        BaseUriParameters &
        ShopperSearchQueryParameters
    /**
     * [Shopper Search](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-search:Summary)
     * ==================================
     *
     * *product search and helpful search suggestions.*<br />
     *
     * Simple example:
     *
     * ```typescript
     *   import { ShopperSearch } from "commerce-sdk-isomorphic";
     *
     *   const clientConfig = {
     *     parameters: {
     *       clientId: "XXXXXX",
     *       organizationId: "XXXX",
     *       shortCode: "XXX",
     *       siteId: "XX"
     *     }
     *   };
     *   const shopperSearchClient = new ShopperSearch(clientConfig);
     * ```
     *
     * <span style="font-size:.7em; display:block; text-align: right">
     * API Version: 1.0.29<br />
     * Last Updated: <br />
     * </span>
     
     *
     
     */
    declare class ShopperSearch<
        ConfigParameters extends ShopperSearchParameters & Record<string, unknown>
    > {
        // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
        clientConfig: ClientConfig<ConfigParameters> & {
            baseUri: string
        }
        static readonly defaultBaseUri =
            'https://{shortCode}.api.commercecloud.salesforce.com/search/shopper-search/{version}/'
        constructor(config: ClientConfigInit<ConfigParameters>)
        /**
         * Provides keyword and refinement search functionality for products. Only returns the product ID, link, and name in
         the product search hit. The search result contains only products that are online and assigned to site catalog.
         *
         * If you would like to get a raw Response object use the other productSearch function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param q - The query phrase to search for. For example to search for a product "shirt", type q=shirt.
         * @param refine - Parameter that represents a refinement attribute or values pair. Refinement attribute ID and
         values are separated by '='. Multiple values are supported by a subset of refinement attributes and
         can be provided by separating them using a pipe (URL
         encoded = "|") i.e. refine=c_refinementColor=red|green|blue. Value ranges can be specified like this: refine=price=(100..500) . Multiple refine parameters can be provided by using the refine as the key i.e refine=price=(0..10)&refine=c_refinementColor=green. The refinements can be a collection of custom defined attributes IDs and the system defined attributes IDs but the search can only accept a total of 9 refinements at a time.
         The following system refinement attribute ids are supported:
         
         cgid: Allows refinement per single category ID. Multiple category ids are not supported.
         price: Allows refinement per single price range. Multiple price ranges are not supported.
         pmid: Allows refinement per promotion ID.
         htype: Allow refinement by including only the provided hit types. Accepted types are 'product', 'master', 'set', 'bundle', 'slicing_group' (deprecated), 'variation_group'.
         orderable_only: Unavailable products are excluded from the search results if true is set. Multiple refinement values are not supported.
         * @param sort - The ID of the sorting option to sort the search hits.
         * @param currency - The currency mnemonic specified for price. This parameter is effective only if the returned results contain prices.
         * @param locale -
         * @param expand - The expand parameter. A list with the allowed values (availability, images, prices, represented_products, variations). If the parameter is missing all the values will be returned.
         * @param offset -
         * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type ProductSearchResult.
         *
         */
        productSearch(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                        q?: string
                        refine?: Array<string>
                        sort?: string
                        currency?: string
                        locale?: string
                        expand?: Array<string>
                        offset?: unknown
                        limit?: number
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<ProductSearchResult>
        /**
         * Provides keyword and refinement search functionality for products. Only returns the product ID, link, and name in
         the product search hit. The search result contains only products that are online and assigned to site catalog.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param q - The query phrase to search for. For example to search for a product "shirt", type q=shirt.
         * @param refine - Parameter that represents a refinement attribute or values pair. Refinement attribute ID and
         values are separated by '='. Multiple values are supported by a subset of refinement attributes and
         can be provided by separating them using a pipe (URL
         encoded = "|") i.e. refine=c_refinementColor=red|green|blue. Value ranges can be specified like this: refine=price=(100..500) . Multiple refine parameters can be provided by using the refine as the key i.e refine=price=(0..10)&refine=c_refinementColor=green. The refinements can be a collection of custom defined attributes IDs and the system defined attributes IDs but the search can only accept a total of 9 refinements at a time.
         The following system refinement attribute ids are supported:
         
         cgid: Allows refinement per single category ID. Multiple category ids are not supported.
         price: Allows refinement per single price range. Multiple price ranges are not supported.
         pmid: Allows refinement per promotion ID.
         htype: Allow refinement by including only the provided hit types. Accepted types are 'product', 'master', 'set', 'bundle', 'slicing_group' (deprecated), 'variation_group'.
         orderable_only: Unavailable products are excluded from the search results if true is set. Multiple refinement values are not supported.
         * @param sort - The ID of the sorting option to sort the search hits.
         * @param currency - The currency mnemonic specified for price. This parameter is effective only if the returned results contain prices.
         * @param locale -
         * @param expand - The expand parameter. A list with the allowed values (availability, images, prices, represented_products, variations). If the parameter is missing all the values will be returned.
         * @param offset -
         * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type ProductSearchResult otherwise.
         *
         */
        productSearch<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                        q?: string
                        refine?: Array<string>
                        sort?: string
                        currency?: string
                        locale?: string
                        expand?: Array<string>
                        offset?: unknown
                        limit?: number
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : ProductSearchResult>
        /**
         * Provides keyword search functionality for products, categories, and brands suggestions. Returns suggested products, suggested categories, and suggested brands for the given search phrase.
         *
         * If you would like to get a raw Response object use the other getSearchSuggestions function.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param q - The search phrase (q) for which suggestions are evaluated. Search suggestions are determined when the search phrase input is at least three (default) characters long. The value is configurable in the Business Manager.
         * @param limit - The maximum number of suggestions made per request. If no value is defined, by default five suggestions per suggestion type are evaluated. This affects all types of suggestions (category, product, brand, and custom suggestions).
         * @param currency - The currency code specified for price. This parameter is effective only for product suggestions.
         * @param locale -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         *
         * @returns A promise of type SuggestionResult.
         *
         */
        getSearchSuggestions(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                        q: string
                        limit?: number
                        currency?: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>
        ): Promise<SuggestionResult>
        /**
         * Provides keyword search functionality for products, categories, and brands suggestions. Returns suggested products, suggested categories, and suggested brands for the given search phrase.
         *
         * @param options - An object containing the options for this method.
         * @param parameters - An object containing the parameters for this method.
         * @param organizationId - An identifier for the organization the request is being made by.
         * @param siteId -
         * @param q - The search phrase (q) for which suggestions are evaluated. Search suggestions are determined when the search phrase input is at least three (default) characters long. The value is configurable in the Business Manager.
         * @param limit - The maximum number of suggestions made per request. If no value is defined, by default five suggestions per suggestion type are evaluated. This affects all types of suggestions (category, product, brand, and custom suggestions).
         * @param currency - The currency code specified for price. This parameter is effective only for product suggestions.
         * @param locale -
         * @param headers - An object literal of key value pairs of the headers to be
         * sent with this request.
         * @param rawResponse - Set to true to return entire Response object instead of DTO.
         * @returns A promise of type Response if rawResponse is true, a promise of type SuggestionResult otherwise.
         *
         */
        getSearchSuggestions<T extends boolean>(
            options?: RequireParametersUnlessAllAreOptional<{
                parameters?: CompositeParameters<
                    {
                        organizationId: string
                        siteId: string
                        q: string
                        limit?: number
                        currency?: string
                        locale?: string
                    },
                    ConfigParameters
                >
                headers?: {
                    [key: string]: string
                }
            }>,
            rawResponse?: T
        ): Promise<T extends true ? Response : SuggestionResult>
    }
    declare namespace ShopperSearchTypes {
        /*
         * Copyright (c) 2023, Salesforce, Inc.
         * All rights reserved.
         * SPDX-License-Identifier: BSD-3-Clause
         * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
         */
        /**
         * Makes a type easier to read.
         */
        type Prettify<T> = NonNullable<{
            [K in keyof T]: T[K]
        }>
        /**
         * Generates the types required on a method, based on those provided in the config.
         */
        type CompositeParameters<
            MethodParameters extends Record<string, unknown>,
            ConfigParameters extends Record<string, unknown>
        > = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>
        /**
         * If an object has a `parameters` property, and the `parameters` object has required properties,
         * then the `parameters` property on the root object is marked as required.
         */
        type RequireParametersUnlessAllAreOptional<
            T extends {
                parameters?: Record<string, unknown>
            }
        > = Record<string, never> extends NonNullable<T['parameters']>
            ? T
            : Prettify<T & Required<Pick<T, 'parameters'>>>
        /**
         * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
         * if not specified.
         */
        interface BaseUriParameters {
            shortCode: string
            version?: string // Optional, will default to "v1" if not provided.
        }
        /**
         * Generic interface for path parameters.
         */
        interface PathParameters {
            [key: string]: string | number | boolean
        }
        /**
         * Generic interface for query parameters.
         */
        interface QueryParameters {
            [key: string]: string | number | boolean | string[] | number[]
        }
        /**
         * Generic interface for all parameter types.
         */
        type UrlParameters = PathParameters | QueryParameters
        /**
         * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
         * it from the `RequestInit` provided by node-fetch.
         */
        type BrowserRequestInit = RequestInit
        /**
         * Any properties supported in either the browser or node are accepted.
         * Using the right properties in the right context is left to the user.
         */
        type FetchOptions = NodeRequestInit & BrowserRequestInit
        /**
         * Base options that can be passed to the `ClientConfig` class.
         */
        interface ClientConfigInit<Params extends BaseUriParameters> {
            baseUri?: string
            proxy?: string
            headers?: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions?: FetchOptions
            transformRequest?: (
                data: unknown,
                headers: {
                    [key: string]: string
                }
            ) => Required<FetchOptions>['body']
            throwOnBadResponse?: boolean
        }
        type FetchFunction = (
            input: RequestInfo,
            init?: FetchOptions | undefined
        ) => Promise<Response>
        /**
         * Configuration parameters common to Commerce SDK clients
         */
        class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
            baseUri?: string
            proxy?: string
            headers: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions: FetchOptions
            transformRequest: NonNullable<ClientConfigInit<Params>['transformRequest']>
            throwOnBadResponse: boolean
            constructor(config: ClientConfigInit<Params>)
            static readonly defaults: Pick<Required<ClientConfigInit<never>>, 'transformRequest'>
        }
        type Money = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResult = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type SearchRequest = {
            limit?: number
            query: unknown
            sorts?: Array<Sort$9>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type PropertyDefinition = {
            defaultValue?: PropertyValueDefinition$8
            id?: string
            name: L10nString$8
            description: L10nString$8
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString$8
            possibleValues?: Array<PropertyValueDefinition$8>
            type: string
            visible?: boolean
        } & {
            [key: string]: unknown
        }
        type LocalizedString = Record<string, unknown>
        type PaginatedSearchResult = {
            query: unknown
            sorts?: Array<Sort$9>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type ClosedObject = Record<string, unknown>
        type OpenObject = Record<string, unknown>
        type NoPropertiesAllowed = Record<string, unknown>
        type SpecifiedPropertiesAllowed = Record<string, unknown>
        type BoolFilter = {
            filters?: Array<any>
            operator: string
        } & {
            [key: string]: unknown
        }
        type PaginatedSearchResultBase = {
            query: unknown
            sorts?: Array<Sort$9>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type MatchAllQuery = Record<string, unknown>
        type FilteredQuery = {
            filter: unknown
            query: unknown
        } & {
            [key: string]: unknown
        }
        type QueryFilter = {
            query: unknown
        } & {
            [key: string]: unknown
        }
        type Query = {
            boolQuery?: BoolQuery$9
            filteredQuery?: FilteredQuery
            matchAllQuery?: MatchAllQuery
            nestedQuery?: NestedQuery$9
            termQuery?: TermQuery$9
            textQuery?: TextQuery$9
        } & {
            [key: string]: unknown
        }
        type TermQuery = {
            fields: Array<string>
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TermFilter = {
            field: string
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TextQuery = {
            fields: Array<string>
            searchPhrase: string
        } & {
            [key: string]: unknown
        }
        type Range2Filter = {
            filterMode?: string
            fromField: string
            fromInclusive?: boolean
            fromValue?: unknown
            toField: string
            toInclusive?: boolean
            toValue?: unknown
        } & {
            [key: string]: unknown
        }
        type BoolQuery = {
            must?: Array<any>
            mustNot?: Array<any>
            should?: Array<any>
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResultBase = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type NestedQuery = {
            path: string
            query: unknown
            scoreMode?: string
        } & {
            [key: string]: unknown
        }
        type Filter = {
            boolFilter?: BoolFilter
            queryFilter?: QueryFilter
            range2Filter?: Range2Filter
            rangeFilter?: RangeFilter$9
            termFilter?: TermFilter
        } & {
            [key: string]: unknown
        }
        type Sort = {
            field: string
            sortOrder?: string
        } & {
            [key: string]: unknown
        }
        type RangeFilter = {
            field: string
            from?: unknown
            fromInclusive?: boolean
            to?: unknown
            toInclusive?: boolean
        } & {
            [key: string]: unknown
        }
        type SearchRequestBase = {
            limit?: number
            query: unknown
            sorts?: Array<Sort>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type MoneyMnemonic = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type L10nString = Record<string, unknown>
        type AttributeDefinition = {
            defaultValue?: PropertyValueDefinition$8
            id?: string
            name: L10nString
            description: L10nString
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString
            possibleValues?: Array<PropertyValueDefinition$8>
            type: string
            visible?: boolean
        }
        type PropertyValueDefinition = {
            description: L10nString
            displayValue: L10nString
            id: string
            position?: number
            value: string
        }
        type ErrorResponse = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type ChangeControlled = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type ChangeControlledDataType = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type Error = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type ProductRef = {
            id: string
        } & {
            [key: string]: unknown
        }
        type SuggestedTerms = {
            originalTerm: string
            terms?: Array<SuggestedTerm>
        } & {
            [key: string]: unknown
        }
        type CategorySuggestions = {
            categories?: Array<SuggestedCategory>
            suggestedPhrases?: Array<SuggestedPhrase>
            suggestedTerms: Array<SuggestedTerms>
        } & {
            [key: string]: unknown
        }
        type SuggestedProduct = {
            currency: string
            price: number
            productId: string
            productName: string
        } & {
            [key: string]: unknown
        }
        type SuggestedPhrase = {
            exactMatch: boolean
            phrase: string
        } & {
            [key: string]: unknown
        }
        type VariationAttribute = {
            id: string
            name?: string
            values?: Array<VariationAttributeValue$1>
        } & {
            [key: string]: unknown
        }
        type ProductSuggestions = {
            products?: Array<SuggestedProduct>
            suggestedPhrases?: Array<SuggestedPhrase>
            suggestedTerms: Array<SuggestedTerms>
        } & {
            [key: string]: unknown
        }
        type SuggestedCategory = {
            id: string
            name: string
            parentCategoryName: string
        } & {
            [key: string]: unknown
        }
        type ProductType = {
            bundle?: boolean
            item?: boolean
            master?: boolean
            option?: boolean
            set?: boolean
            variant?: boolean
            variationGroup?: boolean
        } & {
            [key: string]: unknown
        }
        type BrandSuggestions = Record<string, unknown>
        type ProductSearchRefinementValue = {
            description?: string
            hitCount: number
            label: string
            presentationId?: string
            value: string
            values?: Array<ProductSearchRefinementValue>
        } & {
            [key: string]: unknown
        }
        type ProductSearchSortingOption = {
            id: string
            label: string
        } & {
            [key: string]: unknown
        }
        type SuggestedTerm = {
            completed: boolean
            corrected: boolean
            exactMatch: boolean
            value: string
        } & {
            [key: string]: unknown
        }
        type ProductSearchRefinement = {
            attributeId: string
            label?: string
            values?: Array<ProductSearchRefinementValue>
        } & {
            [key: string]: unknown
        }
        type CustomSuggestions = {
            customSuggestion?: string
            suggestedPhrases?: Array<SuggestedPhrase>
            suggestedTerms: Array<SuggestedTerms>
        } & {
            [key: string]: unknown
        }
        type ProductSearchHit = {
            currency?: string
            hitType?: string
            image?: Image$1
            orderable?: boolean
            price?: number
            priceMax?: number
            prices?: Record<string, unknown>
            productId: string
            productName?: string
            productType?: ProductType
            representedProduct?: ProductRef
            representedProducts?: Array<ProductRef>
            variationAttributes?: Array<VariationAttribute>
        } & {
            [key: string]: unknown
        }
        type ProductSearchResult = {
            limit: number
            hits: Array<ProductSearchHit>
            query: string
            refinements: Array<ProductSearchRefinement>
            searchPhraseSuggestions: Suggestion$0
            selectedRefinements?: Record<string, unknown>
            selectedSortingOption?: string
            sortingOptions: Array<ProductSearchSortingOption>
            offset: number
            total: number
        } & {
            [key: string]: unknown
        }
        type Image = {
            alt?: string
            disBaseLink?: string
            link: string
            title?: string
        } & {
            [key: string]: unknown
        }
        type VariationAttributeValue = {
            description?: string
            image?: Image
            imageSwatch?: Image
            name?: string
            orderable?: boolean
            value: string
        } & {
            [key: string]: unknown
        }
        type Suggestion = {
            suggestedPhrases?: Array<SuggestedPhrase>
            suggestedTerms: Array<SuggestedTerms>
        } & {
            [key: string]: unknown
        }
        type SuggestionResult = {
            brandSuggestions?: BrandSuggestions
            categorySuggestions?: CategorySuggestions
            productSuggestions?: ProductSuggestions
            customSuggestion?: CustomSuggestions
            searchPhrase: string
        } & {
            [key: string]: unknown
        }
        /**
         * All path parameters that are used by at least one ShopperSearch method.
         */
        type ShopperSearchPathParameters = {
            organizationId?: string
        }
        /**
         * All query parameters that are used by at least one ShopperSearch method.
         */
        type ShopperSearchQueryParameters = {
            siteId?: string
            q?: string
            refine?: Array<string>
            sort?: string
            currency?: string
            locale?: string
            expand?: Array<string>
            offset?: unknown
            limit?: number
        }
        /**
         * All parameters that are used by ShopperSearch.
         */
        type ShopperSearchParameters = ShopperSearchPathParameters &
            BaseUriParameters &
            ShopperSearchQueryParameters
        /**
         * [Shopper Search](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-search:Summary)
         * ==================================
         *
         * *product search and helpful search suggestions.*<br />
         *
         * Simple example:
         *
         * ```typescript
         *   import { ShopperSearch } from "commerce-sdk-isomorphic";
         *
         *   const clientConfig = {
         *     parameters: {
         *       clientId: "XXXXXX",
         *       organizationId: "XXXX",
         *       shortCode: "XXX",
         *       siteId: "XX"
         *     }
         *   };
         *   const shopperSearchClient = new ShopperSearch(clientConfig);
         * ```
         *
         * <span style="font-size:.7em; display:block; text-align: right">
         * API Version: 1.0.29<br />
         * Last Updated: <br />
         * </span>
         
         *
         
         */
        class ShopperSearch<
            ConfigParameters extends ShopperSearchParameters & Record<string, unknown>
        > {
            // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
            clientConfig: ClientConfig<ConfigParameters> & {
                baseUri: string
            }
            static readonly defaultBaseUri =
                'https://{shortCode}.api.commercecloud.salesforce.com/search/shopper-search/{version}/'
            constructor(config: ClientConfigInit<ConfigParameters>)
            /**
             * Provides keyword and refinement search functionality for products. Only returns the product ID, link, and name in
             the product search hit. The search result contains only products that are online and assigned to site catalog.
             *
             * If you would like to get a raw Response object use the other productSearch function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param siteId -
             * @param q - The query phrase to search for. For example to search for a product "shirt", type q=shirt.
             * @param refine - Parameter that represents a refinement attribute or values pair. Refinement attribute ID and
             values are separated by '='. Multiple values are supported by a subset of refinement attributes and
             can be provided by separating them using a pipe (URL
             encoded = "|") i.e. refine=c_refinementColor=red|green|blue. Value ranges can be specified like this: refine=price=(100..500) . Multiple refine parameters can be provided by using the refine as the key i.e refine=price=(0..10)&refine=c_refinementColor=green. The refinements can be a collection of custom defined attributes IDs and the system defined attributes IDs but the search can only accept a total of 9 refinements at a time.
             The following system refinement attribute ids are supported:
             
             cgid: Allows refinement per single category ID. Multiple category ids are not supported.
             price: Allows refinement per single price range. Multiple price ranges are not supported.
             pmid: Allows refinement per promotion ID.
             htype: Allow refinement by including only the provided hit types. Accepted types are 'product', 'master', 'set', 'bundle', 'slicing_group' (deprecated), 'variation_group'.
             orderable_only: Unavailable products are excluded from the search results if true is set. Multiple refinement values are not supported.
             * @param sort - The ID of the sorting option to sort the search hits.
             * @param currency - The currency mnemonic specified for price. This parameter is effective only if the returned results contain prices.
             * @param locale -
             * @param expand - The expand parameter. A list with the allowed values (availability, images, prices, represented_products, variations). If the parameter is missing all the values will be returned.
             * @param offset -
             * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type ProductSearchResult.
             *
             */
            productSearch(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                            q?: string
                            refine?: Array<string>
                            sort?: string
                            currency?: string
                            locale?: string
                            expand?: Array<string>
                            offset?: unknown
                            limit?: number
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<ProductSearchResult>
            /**
             * Provides keyword and refinement search functionality for products. Only returns the product ID, link, and name in
             the product search hit. The search result contains only products that are online and assigned to site catalog.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param siteId -
             * @param q - The query phrase to search for. For example to search for a product "shirt", type q=shirt.
             * @param refine - Parameter that represents a refinement attribute or values pair. Refinement attribute ID and
             values are separated by '='. Multiple values are supported by a subset of refinement attributes and
             can be provided by separating them using a pipe (URL
             encoded = "|") i.e. refine=c_refinementColor=red|green|blue. Value ranges can be specified like this: refine=price=(100..500) . Multiple refine parameters can be provided by using the refine as the key i.e refine=price=(0..10)&refine=c_refinementColor=green. The refinements can be a collection of custom defined attributes IDs and the system defined attributes IDs but the search can only accept a total of 9 refinements at a time.
             The following system refinement attribute ids are supported:
             
             cgid: Allows refinement per single category ID. Multiple category ids are not supported.
             price: Allows refinement per single price range. Multiple price ranges are not supported.
             pmid: Allows refinement per promotion ID.
             htype: Allow refinement by including only the provided hit types. Accepted types are 'product', 'master', 'set', 'bundle', 'slicing_group' (deprecated), 'variation_group'.
             orderable_only: Unavailable products are excluded from the search results if true is set. Multiple refinement values are not supported.
             * @param sort - The ID of the sorting option to sort the search hits.
             * @param currency - The currency mnemonic specified for price. This parameter is effective only if the returned results contain prices.
             * @param locale -
             * @param expand - The expand parameter. A list with the allowed values (availability, images, prices, represented_products, variations). If the parameter is missing all the values will be returned.
             * @param offset -
             * @param limit - Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type ProductSearchResult otherwise.
             *
             */
            productSearch<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                            q?: string
                            refine?: Array<string>
                            sort?: string
                            currency?: string
                            locale?: string
                            expand?: Array<string>
                            offset?: unknown
                            limit?: number
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : ProductSearchResult>
            /**
             * Provides keyword search functionality for products, categories, and brands suggestions. Returns suggested products, suggested categories, and suggested brands for the given search phrase.
             *
             * If you would like to get a raw Response object use the other getSearchSuggestions function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param siteId -
             * @param q - The search phrase (q) for which suggestions are evaluated. Search suggestions are determined when the search phrase input is at least three (default) characters long. The value is configurable in the Business Manager.
             * @param limit - The maximum number of suggestions made per request. If no value is defined, by default five suggestions per suggestion type are evaluated. This affects all types of suggestions (category, product, brand, and custom suggestions).
             * @param currency - The currency code specified for price. This parameter is effective only for product suggestions.
             * @param locale -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type SuggestionResult.
             *
             */
            getSearchSuggestions(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                            q: string
                            limit?: number
                            currency?: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<SuggestionResult>
            /**
             * Provides keyword search functionality for products, categories, and brands suggestions. Returns suggested products, suggested categories, and suggested brands for the given search phrase.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId - An identifier for the organization the request is being made by.
             * @param siteId -
             * @param q - The search phrase (q) for which suggestions are evaluated. Search suggestions are determined when the search phrase input is at least three (default) characters long. The value is configurable in the Business Manager.
             * @param limit - The maximum number of suggestions made per request. If no value is defined, by default five suggestions per suggestion type are evaluated. This affects all types of suggestions (category, product, brand, and custom suggestions).
             * @param currency - The currency code specified for price. This parameter is effective only for product suggestions.
             * @param locale -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type SuggestionResult otherwise.
             *
             */
            getSearchSuggestions<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            siteId: string
                            q: string
                            limit?: number
                            currency?: string
                            locale?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : SuggestionResult>
        }
    }
    declare class TemplateURL extends URL {
        /**
         * @param url -
         * @param base -
         */
        constructor(
            url: string,
            base: string,
            parameters?: {
                pathParams?: PathParameters
                queryParams?: QueryParameters
                origin?: string
            }
        )
        /**
         * Replace the origin (protocol/host) portion of the URL with a new origin.
         * The path portion is retained and concatenated with any path included in the
         * new origin. Thee primary use of this function is to use a proxy.
         *
         * @param newOriginString - The new origin to substitute (ex: https://example.com)
         */
        replaceOrigin(newOriginString: string): void
        /**
         * Add append an object literal of query parameters to the URL object. SCAPI expects
         * Arrays to be comma separated where \{ a: ["1", "2"] \} becomes ?a=1,2.
         * The 'refine' query parameter is an exception, where SCAPI expects the the "repeat"
         * convention where \{ refine: ["1", "2"] \} becomes "?refine=1&refine=2"
         */
        addQueryParams(queryParams?: QueryParameters): void
        /**
         * Replace bracketed URL template parameters with values from parameters object
         *
         * @param template - The URL template string to make substitutions in
         * @param parameters - The object literal that provides the values to substitute
         *
         * @returns String URL with substitutions made
         */
        static renderTemplateUri(template: string, parameters?: PathParameters): string
    }
    declare namespace helpers {
        /*
         * Copyright (c) 2023, Salesforce, Inc.
         * All rights reserved.
         * SPDX-License-Identifier: BSD-3-Clause
         * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
         */
        /**
         * Makes a type easier to read.
         */
        type Prettify<T> = NonNullable<{
            [K in keyof T]: T[K]
        }>
        /**
         * Generates the types required on a method, based on those provided in the config.
         */
        type CompositeParameters<
            MethodParameters extends Record<string, unknown>,
            ConfigParameters extends Record<string, unknown>
        > = Prettify<Omit<MethodParameters, keyof ConfigParameters> & Partial<MethodParameters>>
        /**
         * If an object has a `parameters` property, and the `parameters` object has required properties,
         * then the `parameters` property on the root object is marked as required.
         */
        type RequireParametersUnlessAllAreOptional<
            T extends {
                parameters?: Record<string, unknown>
            }
        > = Record<string, never> extends NonNullable<T['parameters']>
            ? T
            : Prettify<T & Required<Pick<T, 'parameters'>>>
        /**
         * Template parameters used in the base URI of all API endpoints. `version` will default to `"v1"`
         * if not specified.
         */
        interface BaseUriParameters {
            shortCode: string
            version?: string // Optional, will default to "v1" if not provided.
        }
        /**
         * Generic interface for path parameters.
         */
        interface PathParameters {
            [key: string]: string | number | boolean
        }
        /**
         * Generic interface for query parameters.
         */
        interface QueryParameters {
            [key: string]: string | number | boolean | string[] | number[]
        }
        /**
         * Generic interface for all parameter types.
         */
        type UrlParameters = PathParameters | QueryParameters
        /**
         * Alias for `RequestInit` from TypeScript's DOM lib, to more clearly differentiate
         * it from the `RequestInit` provided by node-fetch.
         */
        type BrowserRequestInit = RequestInit
        /**
         * Any properties supported in either the browser or node are accepted.
         * Using the right properties in the right context is left to the user.
         */
        type FetchOptions = NodeRequestInit & BrowserRequestInit
        /**
         * Base options that can be passed to the `ClientConfig` class.
         */
        interface ClientConfigInit<Params extends BaseUriParameters> {
            baseUri?: string
            proxy?: string
            headers?: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions?: FetchOptions
            transformRequest?: (
                data: unknown,
                headers: {
                    [key: string]: string
                }
            ) => Required<FetchOptions>['body']
            throwOnBadResponse?: boolean
        }
        type FetchFunction = (
            input: RequestInfo,
            init?: FetchOptions | undefined
        ) => Promise<Response>
        /**
         * Configuration parameters common to Commerce SDK clients
         */
        class ClientConfig<Params extends BaseUriParameters> implements ClientConfigInit<Params> {
            baseUri?: string
            proxy?: string
            headers: {
                [key: string]: string
            }
            parameters: Params
            fetchOptions: FetchOptions
            transformRequest: NonNullable<ClientConfigInit<Params>['transformRequest']>
            throwOnBadResponse: boolean
            constructor(config: ClientConfigInit<Params>)
            static readonly defaults: Pick<Required<ClientConfigInit<never>>, 'transformRequest'>
        }
        /*
         * Copyright (c) 2022, Salesforce, Inc.
         * All rights reserved.
         * SPDX-License-Identifier: BSD-3-Clause
         * For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause
         */
        const isBrowser: boolean
        const isNode: boolean
        const globalObject: typeof globalThis
        const hasFetchAvailable: boolean

        const fetch: FetchFunction
        type LoginRequest = {
            client_id?: string
            response_type?: string
            redirect_uri: string
            state?: string
            scope?: string
            usid?: string
            channel_id: string
            code_challenge?: string
        } & {
            [key: string]: unknown
        }
        type TrustedAgentTokenRequest = {
            agent_id?: string
            client_id: string
            channel_id: string
            code_verifier: string
            grant_type: string
            login_id: string
            idp_origin: string
        } & {
            [key: string]: unknown
        }
        type IntrospectResponse = {
            active: boolean
            scope: string
            client_id: string
            sub: string
            exp: number
            username: string
            token_type: string
        } & {
            [key: string]: unknown
        }
        type PasswordlessLoginRequest = {
            user_id: string
            mode: string
            locale?: string
            usid?: string
            channel_id: string
            callback_uri?: string
        } & {
            [key: string]: unknown
        }
        type PasswordLessLoginTokenRequest = {
            grant_type: string
            hint: string
            pwdless_login_token: string
            client_id?: string
            code_verifier?: string
        } & {
            [key: string]: unknown
        }
        type Oauth2ErrorResponse = {
            error: string
            error_uri?: string
            error_description?: string
        } & {
            [key: string]: unknown
        }
        type PasswordActionVerifyRequest = {
            client_id: string
            pwd_action_token: string
            code_verifier: string
            new_password: string
            channel_id: string
        } & {
            [key: string]: unknown
        }
        type TrustedSystemTokenRequest = {
            usid?: string
            grant_type: string
            hint: string
            login_id: string
            idp_origin: string
            client_id: string
            channel_id: string
            email_id?: string
        } & {
            [key: string]: unknown
        }
        type PasswordActionRequest = {
            user_id: string
            mode: string
            channel_id: string
            locale?: string
            client_id?: string
            code_challenge?: string
            callback_uri?: string
            idp_name?: string
        } & {
            [key: string]: unknown
        }
        type TokenResponse = {
            access_token: string
            id_token: string
            refresh_token: string
            expires_in: number
            refresh_token_expires_in: unknown
            token_type: string
            usid: string
            customer_id: string
            enc_user_id: string
            idp_access_token: string
        } & {
            [key: string]: unknown
        }
        type TokenRequest = {
            refresh_token?: string
            code?: string
            usid?: string
            grant_type: string
            redirect_uri?: string
            code_verifier?: string
            client_id?: string
            channel_id?: string
        } & {
            [key: string]: unknown
        }
        type TokenActionRequest = {
            token: string
            token_type_hint?: string
        } & {
            [key: string]: unknown
        }
        type SessionBridgeTokenRequest = {
            code: string
            client_id: string
            channel_id: string
            code_verifier: string
            dwsid: string
            grant_type: string
            login_id: string
            dwsgst?: string
            usid?: string
        } & {
            [key: string]: unknown
        }
        type ErrorResponse = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type ChangeControlled = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type RangeFilter = {
            [key: string]: unknown
        }
        type ChangeControlledDataType = {
            creationDate?: unknown
            modificationDate?: unknown
            createdBy?: string
            lastModifiedBy?: string
        } & {
            [key: string]: unknown
        }
        type Error = {
            type: string
            title?: string
            detail?: string
            instance?: string
        } & {
            [key: string]: unknown
        }
        type Money = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResult = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type SearchRequest = {
            limit?: number
            query: Query
            sorts?: Array<Sort>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type PropertyDefinition = {
            defaultValue?: PropertyValueDefinition
            id?: string
            name: L10nString
            description: L10nString
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString
            possibleValues?: Array<PropertyValueDefinition>
            type: string
            visible?: boolean
        } & {
            [key: string]: unknown
        }
        type LocalizedString = Record<string, unknown>
        type PaginatedSearchResult = {
            query: Query
            sorts?: Array<Sort>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type ClosedObject = Record<string, unknown>
        type OpenObject = Record<string, unknown>
        type NoPropertiesAllowed = Record<string, unknown>
        type SpecifiedPropertiesAllowed = Record<string, unknown>
        type BoolFilter = {
            filters?: Array<Filter>
            operator: string
        } & {
            [key: string]: unknown
        }
        type PaginatedSearchResultBase = {
            query: Query
            sorts?: Array<Sort>
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type MatchAllQuery = Record<string, unknown>
        type FilteredQuery = {
            filter: Filter
            query: Query
        } & {
            [key: string]: unknown
        }
        type QueryFilter = {
            query: Query
        } & {
            [key: string]: unknown
        }
        type Query = {
            boolQuery?: BoolQuery
            filteredQuery?: FilteredQuery
            matchAllQuery?: MatchAllQuery
            nestedQuery?: NestedQuery
            termQuery?: TermQuery
            textQuery?: TextQuery
        } & {
            [key: string]: unknown
        }
        type TermQuery = {
            fields: Array<string>
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TermFilter = {
            field: string
            operator: string
            values?: Array<any>
        } & {
            [key: string]: unknown
        }
        type TextQuery = {
            fields: Array<string>
            searchPhrase: string
        } & {
            [key: string]: unknown
        }
        type Range2Filter = {
            filterMode?: string
            fromField: string
            fromInclusive?: boolean
            fromValue?: unknown
            toField: string
            toInclusive?: boolean
            toValue?: unknown
        } & {
            [key: string]: unknown
        }
        type BoolQuery = {
            must?: Array<Query>
            mustNot?: Array<Query>
            should?: Array<Query>
        } & {
            [key: string]: unknown
        }
        type SimpleSearchResultBase = {
            limit: number
            hits?: Array<Record<string, unknown>>
            offset: unknown
            total: unknown
        } & {
            [key: string]: unknown
        }
        type NestedQuery = {
            path: string
            query: Query
            scoreMode?: string
        } & {
            [key: string]: unknown
        }
        type Filter = {
            boolFilter?: BoolFilter
            queryFilter?: QueryFilter
            range2Filter?: Range2Filter
            rangeFilter?: RangeFilter
            termFilter?: TermFilter
        } & {
            [key: string]: unknown
        }
        type Sort = {
            field: string
            sortOrder?: string
        } & {
            [key: string]: unknown
        }
        type SearchRequestBase = {
            limit?: number
            query: Query
            sorts?: Array<Sort>
            offset?: unknown
        } & {
            [key: string]: unknown
        }
        type MoneyMnemonic = {
            currencyMnemonic?: string
            value?: number
        } & {
            [key: string]: unknown
        }
        type L10nString = Record<string, unknown>
        type AttributeDefinition = {
            defaultValue?: PropertyValueDefinition
            id?: string
            name: L10nString
            description: L10nString
            key?: boolean
            localizable?: boolean
            mandatory?: boolean
            max?: number
            minLength?: number
            min?: number
            multiValueType?: boolean
            regularExpression?: string
            scale?: number
            searchable?: boolean
            siteSpecific?: boolean
            system?: boolean
            unit?: L10nString
            possibleValues?: Array<PropertyValueDefinition>
            type: string
            visible?: boolean
        }
        type PropertyValueDefinition = {
            description: L10nString
            displayValue: L10nString
            id: string
            position?: number
            value: string
        }
        /**
         * All path parameters that are used by at least one ShopperLogin method.
         */
        type ShopperLoginPathParameters = {
            organizationId?: string
        }
        /**
         * All query parameters that are used by at least one ShopperLogin method.
         */
        type ShopperLoginQueryParameters = {
            client_id?: string
            refresh_token?: string
            channel_id?: string
            hint?: string
            redirect_uri?: string
            response_type?: string
            scope?: string
            state?: string
            usid?: string
            code_challenge?: string
            login_id?: string
            idp_origin?: string
        }
        /**
         * All parameters that are used by ShopperLogin.
         */
        type ShopperLoginParameters = ShopperLoginPathParameters &
            BaseUriParameters &
            ShopperLoginQueryParameters
        /**
         * [Shopper Login and API Access Service](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary)
         * ==================================
         *
         * *Enable shoppers to log in more easily, stay logged in for longer, and get a more fluid and personalized shopping experience powered by Shopper APIs.*<br />
         *
         * Simple example:
         *
         * ```typescript
         *   import { ShopperLogin } from "commerce-sdk-isomorphic";
         *
         *   const clientConfig = {
         *     parameters: {
         *       clientId: "XXXXXX",
         *       organizationId: "XXXX",
         *       shortCode: "XXX",
         *       siteId: "XX"
         *     }
         *   };
         *   const shopperLoginClient = new ShopperLogin(clientConfig);
         * ```
         *
         * <span style="font-size:.7em; display:block; text-align: right">
         * API Version: 1.39.17<br />
         * Last Updated: <br />
         * </span>
         
         *
         
         */
        class ShopperLogin<
            ConfigParameters extends ShopperLoginParameters & Record<string, unknown>
        > {
            // baseUri is not required on ClientConfig, but we know that we provide one in the class constructor
            clientConfig: ClientConfig<ConfigParameters> & {
                baseUri: string
            }
            static readonly defaultBaseUri =
                'https://{shortCode}.api.commercecloud.salesforce.com/shopper/auth/{version}'
            constructor(config: ClientConfigInit<ConfigParameters>)
            /**
             * Logs in a shopper with credentials that are managed by a B2C Commerce instance (ECOM). It follows the authorization code grant flow as defined by the OAuth 2.1 standard. It also uses a proof key for code exchange (PKCE).
             
             For PKCE values:
             - The `code_verifier` string is a random string used for the `/token` endpoint request.
             - The `code_challenge` is an encoded version of the `code_verifier` string using an SHA-256 hash.
             
             The request must include a basic authorization header that contains a Base64 encoded version of the following string: `\<shopperUserID\>:\<shopperPassword\>`.
             
             Required parameters: `code_challenge`, `channel_id`, `client_id`, and `redirect_uri`.
             
             Optional parameters: `usid`.
             
             The SLAS `/login` endpoint redirects back to the redirect URI and returns an authorization code.
             
             Calls to `/login` made with the same loginId and tenantId within 1 second will result in a conflict.
             
             *
             * If you would like to get a raw Response object use the other authenticateCustomer function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type void.
             *
             */
            authenticateCustomer(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: LoginRequest
                }>
            ): Promise<void>
            /**
             * Logs in a shopper with credentials that are managed by a B2C Commerce instance (ECOM). It follows the authorization code grant flow as defined by the OAuth 2.1 standard. It also uses a proof key for code exchange (PKCE).
             
             For PKCE values:
             - The `code_verifier` string is a random string used for the `/token` endpoint request.
             - The `code_challenge` is an encoded version of the `code_verifier` string using an SHA-256 hash.
             
             The request must include a basic authorization header that contains a Base64 encoded version of the following string: `\<shopperUserID\>:\<shopperPassword\>`.
             
             Required parameters: `code_challenge`, `channel_id`, `client_id`, and `redirect_uri`.
             
             Optional parameters: `usid`.
             
             The SLAS `/login` endpoint redirects back to the redirect URI and returns an authorization code.
             
             Calls to `/login` made with the same loginId and tenantId within 1 second will result in a conflict.
             
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            authenticateCustomer<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: LoginRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
             * Allows the customer to authenticate when their identity provider is down.
             *
             * If you would like to get a raw Response object use the other authorizePasswordlessCustomer function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type Object.
             *
             */
            authorizePasswordlessCustomer(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordlessLoginRequest
                }>
            ): Promise<Record<string, unknown>>
            /**
             * Allows the customer to authenticate when their identity provider is down.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
             *
             */
            authorizePasswordlessCustomer<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordlessLoginRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Record<string, unknown>>
            /**
             * Log out a shopper. The shopper's access token and refresh token are revoked. If the shopper authenticated with a B2C Commerce (ECOM) instance, the OCAPI JWT is also revoked. This should be called for Registered users that have logged in using SLAS. his should be called for registered users that have logged in using SLAS. This endpoint is not for use with guest users.
             
             Required header: Authorization header bearer token of the Shopper access token to logout.
             
             Required parameters: `refresh token`, `channel_id`, and `client`.
             *
             * If you would like to get a raw Response object use the other logoutCustomer function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param client_id - The SLAS client ID.
             * @param refresh_token - Refresh token that was given during the access token request.
             * @param channel_id - The `channel_id` parameter must be provided if the shopper authenticated using the `login` endpoint with ECOM.
             * @param hint - Optional parameter for logging out user sessions. Use `all-sessions` to log out all user sessions. If `hint` is not used, only the current user session will be logged out.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type TokenResponse.
             *
             */
            logoutCustomer(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            client_id: string
                            refresh_token: string
                            channel_id?: string
                            hint?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<TokenResponse>
            /**
             * Log out a shopper. The shopper's access token and refresh token are revoked. If the shopper authenticated with a B2C Commerce (ECOM) instance, the OCAPI JWT is also revoked. This should be called for Registered users that have logged in using SLAS. his should be called for registered users that have logged in using SLAS. This endpoint is not for use with guest users.
             
             Required header: Authorization header bearer token of the Shopper access token to logout.
             
             Required parameters: `refresh token`, `channel_id`, and `client`.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param client_id - The SLAS client ID.
             * @param refresh_token - Refresh token that was given during the access token request.
             * @param channel_id - The `channel_id` parameter must be provided if the shopper authenticated using the `login` endpoint with ECOM.
             * @param hint - Optional parameter for logging out user sessions. Use `all-sessions` to log out all user sessions. If `hint` is not used, only the current user session will be logged out.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
             *
             */
            logoutCustomer<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            client_id: string
                            refresh_token: string
                            channel_id?: string
                            hint?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : TokenResponse>
            /**
             * Get an authorization code after authenticating a user against an identity provider (IDP). This is the first step of the OAuth 2.1 authorization code flow, where a user can log in via federation to the IDP configured for the client. After successfully logging in, the user gets an authorization code via a redirect URI.
             
             This endpoint can be called from the front channel (the browser).
             *
             * If you would like to get a raw Response object use the other authorizeCustomer function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
             - `http://localhost:3000/callback`
             - `https://example.com/callback`
             - `com.example.app:redirect_uri_path`
             - ` *.subdomain.topleveldomain.com`
             
             * @param response_type - Must be `code`. Indicates that the client wants an authorization code (using the `authorization_code` grant type).
             * @param client_id - The client ID obtained during application registration.
             * @param scope -
             * @param state - Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended.
             * @param usid - A unique shopper identifier (USID). If not provided, a new USID is generated.
             * @param hint - Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.
             
             To use a public client, set `hint` to `guest` and use a public client ID to get an authorization code. If no `hint` is provided, the preferred IDP of the tenant is used by default.
             
             For session bridge authorization the `hint` should be set to `sb-user` for a registered customer and to `sb-guest` for a guest.
             * @param channel_id - The channel that this request is for. For an ECOM request, this is angalous to the site ID.
             * @param code_challenge - PKCE code challenge. Created by the client calling the `login` endpoint.
             
             The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
             
             The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type void.
             *
             */
            authorizeCustomer(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            redirect_uri: string
                            response_type: string
                            client_id: string
                            scope?: string
                            state?: string
                            usid?: string
                            hint?: string
                            channel_id?: string
                            code_challenge: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<void>
            /**
             * Get an authorization code after authenticating a user against an identity provider (IDP). This is the first step of the OAuth 2.1 authorization code flow, where a user can log in via federation to the IDP configured for the client. After successfully logging in, the user gets an authorization code via a redirect URI.
             
             This endpoint can be called from the front channel (the browser).
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param redirect_uri - The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
             - `http://localhost:3000/callback`
             - `https://example.com/callback`
             - `com.example.app:redirect_uri_path`
             - ` *.subdomain.topleveldomain.com`
             
             * @param response_type - Must be `code`. Indicates that the client wants an authorization code (using the `authorization_code` grant type).
             * @param client_id - The client ID obtained during application registration.
             * @param scope -
             * @param state - Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended.
             * @param usid - A unique shopper identifier (USID). If not provided, a new USID is generated.
             * @param hint - Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.
             
             To use a public client, set `hint` to `guest` and use a public client ID to get an authorization code. If no `hint` is provided, the preferred IDP of the tenant is used by default.
             
             For session bridge authorization the `hint` should be set to `sb-user` for a registered customer and to `sb-guest` for a guest.
             * @param channel_id - The channel that this request is for. For an ECOM request, this is angalous to the site ID.
             * @param code_challenge - PKCE code challenge. Created by the client calling the `login` endpoint.
             
             The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
             
             The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            authorizeCustomer<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            redirect_uri: string
                            response_type: string
                            client_id: string
                            scope?: string
                            state?: string
                            usid?: string
                            hint?: string
                            channel_id?: string
                            code_challenge: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
             * Get the shopper or guest JWT access token and a refresh token. This is the second step of the OAuth 2.1 authorization code flow.
             
             For a private client, an application is able to get an access token for the shopper through the back channel (a trusted server) by passing in the client credentials and the authorization code retrieved from the `authorize` endpoint.
             
             For a guest user, get the shopper JWT access token and a refresh token. This is where a client appplication is able to get an access token for the guest user through the back channel (a trusted server) by passing in the client credentials.
             
             For a public client using PKCE, an application will pass a PKCE `code_verifier` that matches the `code_challenge` that was used to `authorize` the customer along with the authorization code.
             
             When refreshing the access token with a private client ID and client secret, the refresh token is _not_ regenerated. However, when refreshing the access token with a public client ID, the refresh token is _always_ regenerated. The old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token.
             
             See the Body section for required parameters, including `grant_type` and others, depending on the value of `grant_type`.
             
             **Important**: We strongly recommended using the `channel_id` query parameter because **it will be required in the future**.
             *
             * If you would like to get a raw Response object use the other getAccessToken function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type TokenResponse.
             *
             */
            getAccessToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TokenRequest
                }>
            ): Promise<TokenResponse>
            /**
             * Get the shopper or guest JWT access token and a refresh token. This is the second step of the OAuth 2.1 authorization code flow.
             
             For a private client, an application is able to get an access token for the shopper through the back channel (a trusted server) by passing in the client credentials and the authorization code retrieved from the `authorize` endpoint.
             
             For a guest user, get the shopper JWT access token and a refresh token. This is where a client appplication is able to get an access token for the guest user through the back channel (a trusted server) by passing in the client credentials.
             
             For a public client using PKCE, an application will pass a PKCE `code_verifier` that matches the `code_challenge` that was used to `authorize` the customer along with the authorization code.
             
             When refreshing the access token with a private client ID and client secret, the refresh token is _not_ regenerated. However, when refreshing the access token with a public client ID, the refresh token is _always_ regenerated. The old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token.
             
             See the Body section for required parameters, including `grant_type` and others, depending on the value of `grant_type`.
             
             **Important**: We strongly recommended using the `channel_id` query parameter because **it will be required in the future**.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
             *
             */
            getAccessToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TokenRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : TokenResponse>
            /**
             * Get a shopper JWT access token for a registered customer using session bridge.
             
             For public client id requests the grant_type must be set to `session_bridge`.
             
             For  private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.
             *
             * If you would like to get a raw Response object use the other getSessionBridgeAccessToken function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type TokenResponse.
             *
             */
            getSessionBridgeAccessToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: SessionBridgeTokenRequest
                }>
            ): Promise<TokenResponse>
            /**
             * Get a shopper JWT access token for a registered customer using session bridge.
             
             For public client id requests the grant_type must be set to `session_bridge`.
             
             For  private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
             *
             */
            getSessionBridgeAccessToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: SessionBridgeTokenRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : TokenResponse>
            /**
             * Get a shopper JWT access token for a registered customer whose credentials are stored using a third party system.
             
             For external trusted-system requests, a basic authorization header that includes a SLAS client ID and SLAS client secret can be used in place of the bearer token.
             
             For internal trusted-system requests, the bearer token must be a C2C JWT.
             *
             * If you would like to get a raw Response object use the other getTrustedSystemAccessToken function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type TokenResponse.
             *
             */
            getTrustedSystemAccessToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TrustedSystemTokenRequest
                }>
            ): Promise<TokenResponse>
            /**
             * Get a shopper JWT access token for a registered customer whose credentials are stored using a third party system.
             
             For external trusted-system requests, a basic authorization header that includes a SLAS client ID and SLAS client secret can be used in place of the bearer token.
             
             For internal trusted-system requests, the bearer token must be a C2C JWT.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
             *
             */
            getTrustedSystemAccessToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TrustedSystemTokenRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : TokenResponse>
            /**
             * Obtains a new agent on behalf authorization token for a registered customer.
             *
             * If you would like to get a raw Response object use the other getTrustedAgentAuthorizationToken function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param client_id - The SLAS public client ID or SLAS private client ID for use with internal, trusted-agent requests. When using a private client ID a PKCE code challenge is not required.
             * @param channel_id - The channel (ECOM site) that the user is associated with.
             * @param code_challenge - PKCE code challenge. Created by the caller.
             
             The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
             
             The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
             
             The `code_challenge` is not needed if a using SLAS private `client_id`.
             * @param login_id - The ID of the shopper for trusted agent access.
             * @param idp_origin - The IDP that the shopper is associated with.
             * @param redirect_uri - The redirect for Account Manager to redirect to. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
             - `http://localhost:3000/callback`
             - `https://example.com/callback`
             - `com.example.app:redirect_uri_path`
             - ` *.subdomain.topleveldomain.com`
             
             * @param response_type - Must be `code`. Indicates that the caller wants an authorization code.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type void.
             *
             */
            getTrustedAgentAuthorizationToken(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            client_id: string
                            channel_id: string
                            code_challenge: string
                            login_id: string
                            idp_origin: string
                            redirect_uri: string
                            response_type: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<void>
            /**
             * Obtains a new agent on behalf authorization token for a registered customer.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param client_id - The SLAS public client ID or SLAS private client ID for use with internal, trusted-agent requests. When using a private client ID a PKCE code challenge is not required.
             * @param channel_id - The channel (ECOM site) that the user is associated with.
             * @param code_challenge - PKCE code challenge. Created by the caller.
             
             The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.
             
             The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
             
             The `code_challenge` is not needed if a using SLAS private `client_id`.
             * @param login_id - The ID of the shopper for trusted agent access.
             * @param idp_origin - The IDP that the shopper is associated with.
             * @param redirect_uri - The redirect for Account Manager to redirect to. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
             - `http://localhost:3000/callback`
             - `https://example.com/callback`
             - `com.example.app:redirect_uri_path`
             - ` *.subdomain.topleveldomain.com`
             
             * @param response_type - Must be `code`. Indicates that the caller wants an authorization code.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            getTrustedAgentAuthorizationToken<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            client_id: string
                            channel_id: string
                            code_challenge: string
                            login_id: string
                            idp_origin: string
                            redirect_uri: string
                            response_type: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
             * Get a shopper JWT access token for a registered customer using a trusted agent (merchant).
             
             If using a SLAS private client ID, you must also use an `_sfdc_client_auth` header.
             
             The value of the `_sfdc_client_auth` header must be a Base64-encoded string. The string is composed of a SLAS private client ID and client secret, separated by a colon (`:`). For example, `privateClientId:privateClientsecret` becomes `cHJpdmF0ZUNsaWVudElkOnByaXZhdGVDbGllbnRzZWNyZXQ=` after Base64 encoding.
             *
             * If you would like to get a raw Response object use the other getTrustedAgentAccessToken function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type TokenResponse.
             *
             */
            getTrustedAgentAccessToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TrustedAgentTokenRequest
                }>
            ): Promise<TokenResponse>
            /**
             * Get a shopper JWT access token for a registered customer using a trusted agent (merchant).
             
             If using a SLAS private client ID, you must also use an `_sfdc_client_auth` header.
             
             The value of the `_sfdc_client_auth` header must be a Base64-encoded string. The string is composed of a SLAS private client ID and client secret, separated by a colon (`:`). For example, `privateClientId:privateClientsecret` becomes `cHJpdmF0ZUNsaWVudElkOnByaXZhdGVDbGllbnRzZWNyZXQ=` after Base64 encoding.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
             *
             */
            getTrustedAgentAccessToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TrustedAgentTokenRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : TokenResponse>
            /**
             * Request a reset password token
             *
             * If you would like to get a raw Response object use the other getPasswordResetToken function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type void.
             *
             */
            getPasswordResetToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordActionRequest
                }>
            ): Promise<void>
            /**
             * Request a reset password token
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            getPasswordResetToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordActionRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
             * Creates a new password
             *
             * If you would like to get a raw Response object use the other resetPassword function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type void.
             *
             */
            resetPassword(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordActionVerifyRequest
                }>
            ): Promise<void>
            /**
             * Creates a new password
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type void otherwise.
             *
             */
            resetPassword<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordActionVerifyRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : void>
            /**
             * Issue a shopper token (JWT).
             *
             * If you would like to get a raw Response object use the other getPasswordLessAccessToken function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type TokenResponse.
             *
             */
            getPasswordLessAccessToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordLessLoginTokenRequest
                }>
            ): Promise<TokenResponse>
            /**
             * Issue a shopper token (JWT).
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
             *
             */
            getPasswordLessAccessToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: PasswordLessLoginTokenRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : TokenResponse>
            /**
             * Invalidate the refresh token. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, and the refresh token to be revoked is required in the body.
             *
             * If you would like to get a raw Response object use the other revokeToken function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type TokenResponse.
             *
             */
            revokeToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TokenActionRequest
                }>
            ): Promise<TokenResponse>
            /**
             * Invalidate the refresh token. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, and the refresh token to be revoked is required in the body.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type TokenResponse otherwise.
             *
             */
            revokeToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TokenActionRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : TokenResponse>
            /**
             * Returns the token properties. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, as well as an access token or refresh token. Use `token_type_hint` to help identify the token.
             *
             * If you would like to get a raw Response object use the other introspectToken function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             *
             * @returns A promise of type Object.
             *
             */
            introspectToken(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TokenActionRequest
                }>
            ): Promise<Record<string, unknown>>
            /**
             * Returns the token properties. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, as well as an access token or refresh token. Use `token_type_hint` to help identify the token.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param body - The data to send as the request body.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
             *
             */
            introspectToken<T extends boolean>(
                options: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                    body: TokenActionRequest
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Record<string, unknown>>
            /**
             * Returns a JSON listing of claims about the currently authenticated user.
             *
             * If you would like to get a raw Response object use the other getUserInfo function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param channel_id - Used when getting user information for a SFCC login. For an ECOM customer, this is angalous to the site ID. Required when getting user information for an ECOM customer.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type Object.
             *
             */
            getUserInfo(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            channel_id?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Record<string, unknown>>
            /**
             * Returns a JSON listing of claims about the currently authenticated user.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param channel_id - Used when getting user information for a SFCC login. For an ECOM customer, this is angalous to the site ID. Required when getting user information for an ECOM customer.
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
             *
             */
            getUserInfo<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                            channel_id?: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Record<string, unknown>>
            /**
             * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
             
             For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute.
             
             *
             * If you would like to get a raw Response object use the other getWellknownOpenidConfiguration function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type Object.
             *
             */
            getWellknownOpenidConfiguration(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Record<string, unknown>>
            /**
             * Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
             
             For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute.
             
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
             *
             */
            getWellknownOpenidConfiguration<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Record<string, unknown>>
            /**
             * Returns a JSON Web Key Set (JWKS) containing the current, past, and future public keys. The key set enables clients to validate the Shopper JSON Web Token (JWT) issued by SLAS.
             
             For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute.
             
             *
             * If you would like to get a raw Response object use the other getJwksUri function.
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             *
             * @returns A promise of type Object.
             *
             */
            getJwksUri(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>
            ): Promise<Record<string, unknown>>
            /**
             * Returns a JSON Web Key Set (JWKS) containing the current, past, and future public keys. The key set enables clients to validate the Shopper JSON Web Token (JWT) issued by SLAS.
             
             For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute.
             
             *
             * @param options - An object containing the options for this method.
             * @param parameters - An object containing the parameters for this method.
             * @param organizationId -
             * @param headers - An object literal of key value pairs of the headers to be
             * sent with this request.
             * @param rawResponse - Set to true to return entire Response object instead of DTO.
             * @returns A promise of type Response if rawResponse is true, a promise of type Object otherwise.
             *
             */
            getJwksUri<T extends boolean>(
                options?: RequireParametersUnlessAllAreOptional<{
                    parameters?: CompositeParameters<
                        {
                            organizationId: string
                        },
                        ConfigParameters
                    >
                    headers?: {
                        [key: string]: string
                    }
                }>,
                rawResponse?: T
            ): Promise<T extends true ? Response : Record<string, unknown>>
        }
        const stringToBase64: typeof btoa
        /**
         * Parse out the code and usid from a redirect url
         * @param urlString A url that contains `code` and `usid` query parameters, typically returned when calling a Shopper Login endpoint
         * @returns An object containing the code and usid.
         */
        const getCodeAndUsidFromUrl: (urlString: string) => {
            code: string
            usid: string
        }
        /**
         * Creates a random string to use as a code verifier. This code is created by the client and sent with both the authorization request (as a code challenge) and the token request.
         * @returns code verifier
         */
        const createCodeVerifier: () => string
        /**
         * Encodes a code verifier to a code challenge to send to the authorization endpoint
         * @param codeVerifier random string to use as a code verifier
         * @returns code challenge
         */
        const generateCodeChallenge: (codeVerifier: string) => Promise<string>
        /**
         * Wrapper for the authorization endpoint. For federated login (3rd party IDP non-guest), the caller should redirect the user to the url in the url field of the returned object. The url will be the login page for the 3rd party IDP and the user will be sent to the redirectURI on success. Guest sessions return the code and usid directly with no need to redirect.
         * @param slasClient a configured instance of the ShopperLogin SDK client
         * @param codeVerifier - random string created by client app to use as a secret in the request
         * @param parameters - Request parameters used by the `authorizeCustomer` endpoint.
         * @param parameters.redirectURI - the location the client will be returned to after successful login with 3rd party IDP. Must be registered in SLAS.
         * @param parameters.hint? - optional string to hint at a particular IDP. Guest sessions are created by setting this to 'guest'
         * @param parameters.usid? - optional saved SLAS user id to link the new session to a previous session
         * @returns login url, user id and authorization code if available
         */
        function authorize(
            slasClient: ShopperLogin<{
                shortCode: string
                organizationId: string
                clientId: string
                siteId: string
            }>,
            codeVerifier: string,
            parameters: {
                redirectURI: string
                hint?: string
                usid?: string
            }
        ): Promise<{
            code: string
            url: string
            usid: string
        }>
        /**
         * A single function to execute the ShopperLogin Public Client Guest Login with proof key for code exchange flow as described in the [API documentation](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary).
         * @param slasClient a configured instance of the ShopperLogin SDK client.
         * @param parameters - parameters to pass in the API calls.
         * @param parameters.redirectURI - Per OAuth standard, a valid app route. Must be listed in your SLAS configuration. On server, this will not be actually called. On browser, this will be called, but ignored.
         * @param parameters.usid? - Unique Shopper Identifier to enable personalization.
         * @returns TokenResponse
         */
        function loginGuestUser(
            slasClient: ShopperLogin<{
                shortCode: string
                organizationId: string
                clientId: string
                siteId: string
            }>,
            parameters: {
                redirectURI: string
                usid?: string
            }
        ): Promise<TokenResponse>
        /**
         * A single function to execute the ShopperLogin Public Client Registered User B2C Login with proof key for code exchange flow as described in the [API documentation](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta=shopper-login:Summary).
         * @param slasClient a configured instance of the ShopperLogin SDK client.
         * @param credentials - the id and password to login with.
         * @param credentials.username - the id of the user to login with.
         * @param credentials.password - the password of the user to login with.
         * @param parameters - parameters to pass in the API calls.
         * @param parameters.redirectURI - Per OAuth standard, a valid app route. Must be listed in your SLAS configuration. On server, this will not be actually called. On browser, this will be called, but ignored.
         * @param parameters.usid? - Unique Shopper Identifier to enable personalization.
         * @returns TokenResponse
         */
        function loginRegisteredUserB2C(
            slasClient: ShopperLogin<{
                shortCode: string
                organizationId: string
                clientId: string
                siteId: string
            }>,
            credentials: {
                username: string
                password: string
            },
            parameters: {
                redirectURI: string
                usid?: string
            }
        ): Promise<TokenResponse>
        /**
         * Exchange a refresh token for a new access token.
         * @param slasClient a configured instance of the ShopperLogin SDK client.
         * @param parameters - parameters to pass in the API calls.
         * @param parameters.refreshToken - a valid refresh token to exchange for a new access token (and refresh token).
         * @returns TokenResponse
         */
        function refreshAccessToken(
            slasClient: ShopperLogin<{
                shortCode: string
                organizationId: string
                clientId: string
                siteId: string
            }>,
            parameters: {
                refreshToken: string
            }
        ): Promise<TokenResponse>
        /**
         * Logout a shopper. The shoppers access token and refresh token will be revoked and if the shopper authenticated with ECOM the OCAPI JWT will also be revoked.
         * @param slasClient a configured instance of the ShopperLogin SDK client.
         * @param parameters - parameters to pass in the API calls.
         * @param parameters.accessToken - a valid access token to exchange for a new access token (and refresh token).
         * @param parameters.refreshToken - a valid refresh token to exchange for a new access token (and refresh token).
         * @returns TokenResponse
         */
        function logout(
            slasClient: ShopperLogin<{
                shortCode: string
                organizationId: string
                clientId: string
                siteId: string
            }>,
            parameters: {
                accessToken: string
                refreshToken: string
            }
        ): Promise<TokenResponse>
    }
}
